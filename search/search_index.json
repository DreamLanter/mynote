{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-]"},"docs":[{"location":"","text":"\u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4\uff01 \u00b6 \u65bd\u5de5\u4e2d\uff01 \u6b63\u5728\u4ece \u8bed\u96c0 \u9010\u6b65\u8fc1\u79fb\uff01\u5185\u5bb9\u8fd8\u975e\u5e38\u4e0d\u5b8c\u6574\u2014\u2014 \u670b\u53cb\u4eec\uff01 \u65ed\u5b9d\u7684\u535a\u5ba2\uff01 \u4fee\u52fe\u7684\u5168\u65b0\u7b14\u8bb0\u672c\u2014\u2014 \u641c\u62c9\u5b85\uff01 Frank! \u5c0f\u89d2\u9f99\uff01 \u5a03\u5a03\u673a\uff01","title":"\u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4\uff01"},{"location":"#\u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4","text":"\u65bd\u5de5\u4e2d\uff01 \u6b63\u5728\u4ece \u8bed\u96c0 \u9010\u6b65\u8fc1\u79fb\uff01\u5185\u5bb9\u8fd8\u975e\u5e38\u4e0d\u5b8c\u6574\u2014\u2014 \u670b\u53cb\u4eec\uff01 \u65ed\u5b9d\u7684\u535a\u5ba2\uff01 \u4fee\u52fe\u7684\u5168\u65b0\u7b14\u8bb0\u672c\u2014\u2014 \u641c\u62c9\u5b85\uff01 Frank! \u5c0f\u89d2\u9f99\uff01 \u5a03\u5a03\u673a\uff01","title":"\u54b8\u9c7c\u6684\u7684\u4ee3\u7801\u7a7a\u95f4\uff01"},{"location":"recent/","text":"\u6742\u9879 \u535a\u5ba2\u642d\u5efa\u8bb0\u5f55 OS 9 \u4e3b\u5b58 PL 2 \u5f52\u7eb3\u5b9a\u4e49 \u751f\u6d3b \u5173\u4e8e\u4eb2\u5bc6\u5173\u7cfb\u7684\u788e\u788e\u5ff5 C++ \u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 C++ \u7406\u89e3 STL \u2014\u2014 \u8fed\u4ee3\u5668\u4e0e\u51fd\u6570\u5bf9\u8c61","title":"\u6700\u8fd1\u66f4\u65b0"},{"location":"cpp/","text":"C++ \u5b66\u4e60 \u00b6 \u611f\u89c9 C++ \u8fd8\u662f\u592a\u83dc\u4e86\uff09\uff09\u6162\u6162\u968f\u7f18\u770b\u770b\u76f8\u5173\u7684\u6587\u7ae0\u5427QWQ \u6bd4\u8f83\u60f3\u770b\u7684\u5185\u5bb9\uff1a The C++ Programming Language Effective C++ The Design and Evolution of C++","title":"C++ \u5b66\u4e60"},{"location":"cpp/#c-\u5b66\u4e60","text":"\u611f\u89c9 C++ \u8fd8\u662f\u592a\u83dc\u4e86\uff09\uff09\u6162\u6162\u968f\u7f18\u770b\u770b\u76f8\u5173\u7684\u6587\u7ae0\u5427QWQ \u6bd4\u8f83\u60f3\u770b\u7684\u5185\u5bb9\uff1a The C++ Programming Language Effective C++ The Design and Evolution of C++","title":"C++ \u5b66\u4e60"},{"location":"cpp/cpp_for_contests/","text":"Abstract \u672c\u6587\u6240\u9700\u9884\u5907\u77e5\u8bc6\uff1a C / C++ \u57fa\u7840 \u672c\u6587\u9762\u5411\u5bf9\u8c61\uff1a \u9700\u8981\u505a\u7b97\u6cd5\u9898\u7684\u840c\u65b0! \u5728\u505a LeetCode \u6216\u8005\u5404\u79cd\u7b14\u8bd5\u7684\u7b97\u6cd5\u9898\u7684\u65f6\u5019\uff0c\u907f\u514d\u9020\u8f6e\u5b50\u53ef\u4ee5\u4e3a\u6211\u4eec\u8282\u7701\u5f88\u591a\u5199\u4ee3\u7801\u548c\u8c03\u8bd5\u7684\u65f6\u95f4\uff1b\u800c C++ \u5728\u4e0d\u65ad\u7684\u53d1\u5c55\u4e2d\u4e3a\u6211\u4eec\u5b9e\u73b0\u4e86\u8bb8\u591a\u597d\u7528\u7684\u7279\u6027\u3002\u5f88\u591a\u5c0f\u670b\u53cb\u53ea\u5728\u57fa\u7840\u8bfe\u7a0b\u4e2d\u5b66\u8fc7 C \u8bed\u8a00\uff0c\u5b66\u6821\u5f00\u8bbe\u7684 C++ \u76f8\u5173\u8bfe\u7a0b\u53ef\u80fd\u4e5f\u6ca1\u6709\u6db5\u76d6\u5f88\u591a\u8fd9\u65b9\u9762\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u672c\u5468\u6211\u4eec\u8bd5\u56fe\u53d1\u73b0\u90a3\u4e9b\u5728\u5199\u9898\u4e2d\u5e38\u7528\u7684\u6280\u5de7\uff0c\u5e76\u52a0\u4ee5\u5206\u6790\u548c\u603b\u7ed3\u3002 \u672c\u6587\u51c6\u5907\u4ed3\u4fc3\uff0c\u53ef\u80fd\u6709\u5f88\u591a\u9057\u6f0f\u548c\u4e0d\u4e25\u8c28\u4e4b\u5904\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63 QWQ \u63a8\u8350\u9605\u8bfb \u548c\u672c\u6587\u65e0\u5173\uff0c\u4f46\u662f\u63a8\u8350\u9605\u8bfb\uff1a \u5982\u4f55\u4ece\u4e24\u9898\u9009\u624b\u53d8\u6210\u7a33\u5b9a\u4e09\u9898\u9009\u624b\u4ee5\u53ca ak \u5468\u8d5b\uff1f \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u4ecb\u7ecd\u53ea\u4e3a\u6ee1\u8db3\u6700\u57fa\u672c\u7684\u4f7f\u7528\uff1b\u5728\u641c\u7d22\u5f15\u64ce\u641c\u7d22\uff0c\u53ef\u4ee5\u627e\u5230\u66f4\u591a\u7684\u7528\u6cd5\u3002\u5f53\u81ea\u5df1\u7f16\u7a0b\u800c\u4e0d\u662f\u5728 LeetCode \u4e4b\u7c7b\u7684\u5730\u65b9\u505a\u51fd\u6570\u9898\u65f6\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u5b83\u4eec\u6240\u9700\u7684\u5934\u6587\u4ef6\u7b49\u4fe1\u606f\u3002 \u5982\u672a\u7279\u6b8a\u8bf4\u660e\uff0c\u672c\u6587\u8ba8\u8bba\u7684\u5185\u5bb9\u90fd\u5728 namespace std \u91cc\uff1b\u672c\u6587\u7684\u4f8b\u5b50\u5927\u591a\u6765\u6e90\u4e8e cppreference.com \u3002 1 \u57fa\u7840 \u00b6 \u4f7f\u7528 C++ \u7b54\u9898\u65f6\uff0c\u6709\u4e00\u4e9b\u975e\u5e38\u57fa\u7840\u548c\u5e38\u7528\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u5b83\u4eec\uff01 1.1 \u5f15\u7528 \u00b6 \u5728 C \u8bed\u8a00\u4e2d\uff0c\u7b26\u53f7 & \u662f \u53d6\u5730\u5740\u7b26 \u3002\u800c\u5728 C++ \u4e2d\uff0c & \u6709\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\uff1a\u5b9a\u4e49\u5f15\u7528\u53d8\u91cf\u3002\u5f15\u7528\u5c31\u662f\u67d0\u4e00\u4e2a\u53d8\u91cf\u7684\u522b\u540d\uff0c \u5bf9\u5f15\u7528\u7684\u64cd\u4f5c\u548c\u5bf9\u53d8\u91cf\u76f4\u63a5\u64cd\u4f5c\u5b8c\u5168\u4e00\u6837 \u3002\u5b9a\u4e49\u8bed\u6cd5\u4e3a\uff1a Type &refVarName = varName; \u3002 \u5f15\u7528\u4e0e\u6307\u9488\u7c7b\u4f3c\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u6709\uff1a \u4e0d\u5b58\u5728\u7a7a\u5f15\u7528\u3002\u5f15\u7528\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u5757\u5408\u6cd5\u7684\u5185\u5b58\uff0c\u56e0\u6b64 \u58f0\u660e\u5f15\u7528\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u8fdb\u884c\u521d\u59cb\u5316 \u3002 \u5f15\u7528\u53d8\u91cf\u58f0\u660e\u5b8c\u6bd5\u540e\uff0c \u76f8\u5f53\u4e8e\u539f\u53d8\u91cf\u6709\u4e862\u4e2a\u540d\u79f0\uff0c\u5373\u5f15\u7528\u540d\u548c\u539f\u540d\u3002 \u5f15\u7528\u4e0d\u5360\u5b58\u50a8\u5355\u5143\uff0c\u5bf9\u5f15\u7528\u548c\u539f\u53d8\u91cf\u53d6\u5740\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684 \u3002 \u4e00\u65e6\u5f15\u7528\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u88ab\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u5373 \u4e0d\u80fd\u5c06\u4e00\u4e2a\u5f15\u7528\u540d\u91cd\u65b0\u4f5c\u4e3a\u5176\u4ed6\u53d8\u91cf\u540d\u7684\u522b\u540d \u3002 \u4e0d\u80fd\u5efa\u7acb\u6570\u7ec4\u7684\u5f15\u7528\u3002 \u6307\u9488\u89e3\u51b3\u4e86\u6211\u4eec\u5728\u4f20\u9012\u53c2\u6570\u65f6\u590d\u5236\u5e26\u6765\u7684\u6548\u7387\u548c\u7a7a\u95f4\u6d88\u8017\u7b49\u95ee\u9898\u3002\u800c\u5f15\u7528\u76f8\u6bd4\u4e8e\u6307\u9488\u66f4\u52a0\u5b89\u5168\uff08\u907f\u514d\u5bf9\u5185\u5b58\u7684\u975e\u6cd5\u5f15\u7528\uff09\u3001\u53ef\u8bfb\u6027\u66f4\u9ad8\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u989d\u5916\u5206\u914d\u5185\u5b58\u5355\u5143\u3002 \u548c\u6307\u9488\u7c7b\u4f3c\uff0c int &a = b, c = d \u4e2d\uff0c a \u7684\u7c7b\u578b\u662f int & \uff0c\u800c c \u7684\u7c7b\u578b\u662f int \u3002 \u5f15\u7528\u5176\u5b9e\u5c31\u662f\u6307\u9488\u5305\u88c5\u4e86\u4e00\u4e0b\u3002 \u901a\u8fc7\u5f15\u7528\u53d6\u4e00\u4e2a\u522b\u540d\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u5f15\u7528\u7684\u76ee\u7684\u4e3b\u8981\u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u3002\u4f8b\u5982\uff1a void swap ( int & a , int & b ){ int temp = a ; a = b ; b = temp ; } int main (){ int var1 = 1 , var2 = 2 ; swap ( var1 , var2 ); cout << var1 << \" \" << var2 << endl ; return 0 ; } \u8f93\u51fa\u662f\uff1a 2 1 \u3002 \u5173\u4e8e\u5f15\u7528\u7684\u5176\u4ed6\u7528\u6cd5\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 1.2 vector \u00b6 #include <vector> vector \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u81ea\u52a8\u6269\u5c55\u957f\u5ea6\u7684\u6570\u7ec4\u3002 \u6784\u9020 \uff1a \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 vector<int> v; \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u3001\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5747\u4e3a int \u7684 vector\uff0c\u5176\u540d\u5b57\u4e3a v \u3002\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u5305\u62ec\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u66ff\u6362\u8fd9\u91cc\u7684 int \u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c vector<int> v = {1, 2, 3}; \u7684\u65b9\u5f0f\u521d\u59cb\u5316\u3002 \u540c\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 vector<int> v(n); \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5305\u542b n \u4e2a\u5143\u7d20\u7684 vector\u3002 \u53ef\u4ee5\u901a\u8fc7 vector<int> v(n, 1); \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u4e14\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u90fd\u4e3a 1 \u7684 vector\u3002 \u83b7\u53d6\u957f\u5ea6 \u3002\u53ef\u4ee5\u901a\u8fc7 v.size() \u83b7\u53d6 vector v \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5728\u672b\u5c3e\u63d2\u5165\u5143\u7d20 \u3002\u53ef\u4ee5\u901a\u8fc7 v.push_back(x) \u7684\u65b9\u5f0f\u5c06 x \u63d2\u5165\u5230 vector v \u7684\u672b\u5c3e\u3002\u8fd9\u91cc\u7684\u63d2\u5165\u662f\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u7684\uff0c\u800c\u4f7f\u7528 v.emplace_back(...) \u5219\u53ef\u4ee5\u5728 vector \u4e2d\u8fdb\u884c\u201c\u539f\u5730\u6784\u9020\u201d\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u6548\u7387\u66f4\u597d\uff0c\u5199\u8d77\u6765\u4e5f\u66f4\u7b80\u5355\u3002 \u8bbf\u95ee\uff08\u8bfb\u53d6 / \u4fee\u6539\uff09\u5143\u7d20 \u3002\u548c\u6570\u7ec4\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7 v[i] \u7684\u65b9\u5f0f\u8bbf\u95ee vector v \u7684\u7b2c i \u4e2a\u5143\u7d20\uff0c\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002\u6ce8\u610f\uff0c\u5f53 i >= v.size() \u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u53ef\u80fd\u53d1\u751f\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u904d\u5386 \u3002 C++11 \u9664\u4e86\u4f7f\u7528 for (int i = 0; i < v.size(); i++) sum += v[i]; \u7684\u65b9\u5f0f\u904d\u5386\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a for (auto a : v) sum += a; \u3002\u8fd9\u79cd\u5199\u6cd5\u53eb\u505a range-based for loop\u3002 C++11 \u8fd9\u91cc\u7684 auto \u4f1a\u81ea\u52a8\u63a8\u65ad\u51fa a \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f vector v \u4e2d\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u5b98\u65b9\u79f0\u547c\u662f Placeholder type specifiers\u3002\u5728\u505a LeetCode \u7684\u7edd\u5927\u591a\u6570\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 for (auto &a : v) \uff0c\u52a0\u4e0a\u4e00\u4e2a\u5f15\u7528\u3002\u52a0\u4e0a\u8fd9\u4e2a\u5f15\u7528\u540e\u5c31\u4e0d\u4f1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u5faa\u73af\u90fd\u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u5728\u904d\u5386\u4e8c\u7ef4 vector \u7684\u65f6\u5019\u5c24\u4e3a\u6709\u610f\u4e49\u3002\u5f53\u7136\u52a0\u4e0a\u5f15\u7528\u540e\u5bf9\u8fd9\u4e2a\u53d8\u91cf a \u505a\u7684\u6539\u52a8\u4f1a\u771f\u5b9e\u5730\u5f71\u54cd\u5230 vector v \u3002 \u9884\u7559\u5927\u5c0f \u53ef\u4ee5\u901a\u8fc7 v.reserve(n) \u6765\u5c06 vector \u7684 capacity\uff08\u800c\u975e size\uff09\u9884\u7559\u4e3a n \u3002\u5982\u679c\u7406\u89e3 vector \u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u610f\u4e49\uff08\u53ef\u4ee5\u770b cppref \u91cc\u7684\u4f8b\u5b50\uff09\u3002\u5982\u679c\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u6682\u65f6\u5f53\u505a\u6ca1\u770b\u89c1\u8fd9\u4e00\u6761\u3002 1.3 string \u00b6 #include <string> string \u662f C++ \u4e2d\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5176\u5b9e\u73b0\u548c C \u4e2d\u7684\u5b57\u7b26\u6570\u7ec4\u4e00\u81f4\uff0c\u4e5f\u662f\u4ee5 '\\0' \u6807\u8bc6\u7ed3\u675f\u3002 \u6784\u9020 \u3002\u53ef\u4ee5\u901a\u8fc7 string s; \u6216\u8005 string s = \"123\"; \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u83b7\u53d6\u957f\u5ea6 \u3002\u53ef\u4ee5\u901a\u8fc7 s.length() \u6216\u8005 s.size() \u7684\u65b9\u5f0f\u83b7\u53d6\u5176\u957f\u5ea6\uff0c\u8be5\u957f\u5ea6\u4e0d\u542b\u672b\u5c3e\u7684 '\\0' \u3002 \u62fc\u63a5 \u3002\u53ef\u4ee5\u901a\u8fc7 s1 + s2 \u6216\u8005 s + 'a' \u7684\u65b9\u5f0f\u5c06\u5b57\u7b26\u4e32\u4e0e\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\uff08\u5747\u53ef\u4ee5\u662f\u5b57\u9762\u91cf\uff09\u62fc\u63a5\u3002 \u8bbf\u95ee\u5b57\u7b26 \u3002\u548c\u6570\u7ec4\u3001vector \u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7 s[i] \u7684\u65b9\u5f0f\u8bbf\u95ee\u5b57\u7b26\u4e32\u7684\u7b2c i \u4e2a\u5b57\u7b26\u3002 \u904d\u5386 \u3002 C++11 \u7c7b\u4f3c vector\uff0c\u53ef\u4ee5\u901a\u8fc7 for (auto c : s) \u7684\u65b9\u5f0f\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u3002 \u6bd4\u8f83 \u3002\u53ef\u4ee5\u901a\u8fc7 == , != , > \u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 1.4 pair \u00b6 #include <utility> pair \u53ef\u4ee5\u5c06\u4e24\u4e2a\u4e0d\u5fc5\u76f8\u540c\u7684\u7c7b\u578b\u6512\u8d77\u6765\uff0c\u4f8b\u5982 pair<int, int> p1; \u6216\u8005 pair<int, string> p2; \u3002 \u53ef\u4ee5\u7528 pair<int, double> p{1, 1.3}; \u7684\u65b9\u5f0f\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 p = make_pair(0, -3.1) \u7684\u65b9\u5f0f\u8d4b\u503c\u3002pair \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u3002 \u53ef\u4ee5\u7528 p1.first \u3001 p1.second \u7684\u65b9\u5f0f\u8bbf\u95ee\u5176\u6210\u5458\u3002 pair \u9ed8\u8ba4\u7684\u6bd4\u8f83\u65b9\u6cd5\u662f\u5148\u6309\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u6bd4\u8f83\uff0c\u76f8\u540c\u518d\u6309\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u6bd4\u8f83\u3002 2 \u4e0d\u90a3\u4e48\u57fa\u7840 \u00b6 Note \u540e\u9762\u7684\u90e8\u5206\u57fa\u672c\u662f\u60f3\u5230\u54ea\u5199\u5230\u54ea\uff0c\u6240\u4ee5\u4e0d\u5b8c\u5168\u6709\u903b\u8f91\u548c\u96be\u5ea6\u7684\u987a\u5e8f\uff09\uff09\uff09 \u7528 \u2606 \u6807\u660e\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u5e38\u7528\u7684\u5185\u5bb9\uff01 2.1 \u2606\u2606\u2606 sort \u00b6 #include <algorithm> sort \u7528\u4e8e\u5bf9\u6570\u7ec4\u6216 vector \u7b49\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u4e14\u5143\u7d20\u53ef\u6bd4\u8f83\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6392\u5e8f\u3002\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \u3002 \u4f8b\u5982\uff1a int a [] = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( a , a + 6 ); \u6b64\u65f6 a \u4e2d\u7684\u503c\u4e3a -2 1 3 3 4 5\uff0c\u5373\u5347\u5e8f\u6392\u5217\u3002 \u8fd9\u91cc a \u548c a + 6 \u662f\u5de6\u95ed\u53f3\u5f00\u7684\u6392\u5e8f\u533a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c sort(a + 1, a + 4) \u7684\u65b9\u5f0f\u5bf9\u90e8\u5206\u8fdb\u884c\u6392\u5e8f\u3002 \u5bf9\u4e8e vector\uff0c\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u4f7f\u7528\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end ()); \u5982\u679c\u60f3\u8981\u964d\u5e8f\u600e\u4e48\u529e\u5462\uff1f\u65b9\u6cd5\u4e4b\u4e00\u662f\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), greater < int > ()); \u6b64\u65f6 v \u4e2d\u7684\u503c\u662f 5 4 3 3 1 -2\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u3002\u6bd4\u8f83\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff0c\u8fd4\u56de\u4e00\u4e2a bool \u503c\u8868\u793a\u524d\u8005\u662f\u5426\u5e94\u5f53\u5728\u540e\u8005\u4e4b\u524d\uff1a bool cmp ( const int & a , const int & b ) { return a > b ; } vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), cmp ); \u6ce8\u610f\uff0c\u6bd4\u8f83\u51fd\u6570\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e a < b \u3002\u56e0\u6b64\u5f53\u4e24\u4e2a\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u6bd4\u8f83\u51fd\u6570\u603b\u662f\u5e94\u5f53\u8fd4\u56de false\u3002 C++11 \u4e5f\u53ef\u4ee5\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff08\u5176\u5b9e\u5c31\u662f\u533f\u540d\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u4e86\uff0c\u6709\u7f18\u518d\u804a XD\uff09\u7b80\u5316\u5199\u6cd5\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), []( const int & a , const int & b ) { return a > b ; }); \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u53ef\u4ee5\u9002\u7528\u66f4\u590d\u6742\u7684\u6392\u5e8f\uff0c\u4f8b\u5982\u9700\u8981\u6bd4\u8f83\u7684\u5143\u7d20\u672c\u8eab\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\u3002\u4f8b\u5982\uff1a bool cmp ( const vector < int >& a , const vector < int >& b ) { return a [ 0 ] == b [ 0 ] ? a [ 1 ] < b [ 1 ] : a [ 0 ] < b [ 0 ]; } \u8fd9\u4e2a\u6bd4\u8f83\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e vector<vector<int>> \u7c7b\u578b\u7684\u6392\u5e8f\u3002 \u5e38\u7528\u7684\u6807\u51c6\u5e93\uff08\u5982 libgc++\uff09\u4e2d\u5bf9\u4e8e std::sort \u7684\u5b9e\u73b0\u4fdd\u8bc1\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \uff0c\u800c\u4e0d\u4f1a\u9000\u5316\u6210\u5feb\u6392\u7684 \\(O(n^2)\\) \u3002\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u662f\u4e00\u79cd\u5feb\u6392\u3001\u5806\u6392\u4ee5\u53ca\u63d2\u5165\u6392\u5e8f\u7684\u7ed3\u5408\u4f53\u3002 \uff08\u8fd8\u6709\u66f4\u591a\u6bd4\u8f83\u5668\u7684\u5199\u6cd5\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u5c55\u5f00\u5566\uff09 2.2 \u2606 upper_bound & lower_bound & binary_search & equal_range \u00b6 #include <algorithm> \u7528\u4e8e\u6709\u5e8f\u7684\u6570\u7ec4\uff01 \u53ef\u4ee5\u50cf sort \u4e00\u6837\u6307\u5b9a\u6bd4\u8f83\u51fd\u6570\u3002 auto u = upper_bound(data.begin(), data.end(), i) \u8fd4\u56de\u7b2c\u4e00\u4e2a \u4e25\u683c\u5927\u4e8e i \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff08\u548c\u6307\u9488\u5dee\u4e0d\u591a\uff0c\u53ef\u4ee5\u7528 *u \u83b7\u53d6\u5176\u503c\uff09\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5373 data.end() \u3002 lower_bound \u8fd4\u56de\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e i \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u8fd9\u91cc\u6f14\u793a\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4f8b\u5b50\uff08\u53ef\u4ee5\u770b\u5230\uff0c\u4f20\u5165\u7684\u5f85\u67e5\u627e\u53c2\u6570\u5e76\u4e0d\u4e00\u5b9a\u9700\u8981\u548c\u5bb9\u5668\u5185\u5143\u7d20\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u53ea\u8981\u548c\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u543b\u5408\u5373\u53ef\uff09\uff1a auto prc_info = lower_bound ( prices . begin (), prices . end (), i , []( const PriceInfo & info , double value ){ return info . price < value ; }); binary_search(v.begin(), v.end(), i) \u8fd4\u56de\u4e00\u4e2a bool\uff0c\u8868\u793a i \u662f\u5426\u5728 v \u4e2d\u3002 \u6ce8\u610f\uff1a\u8fd9 3 \u4e2a\u51fd\u6570\u5747\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u56e0\u6b64\u5982\u679c\u539f\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\uff0c\u7ed3\u679c\u5c31\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\u590d\u6742\u5ea6\u5747\u4e3a \\(O(\\log n)\\) 2.3 gcd & lcm C++17 \u00b6 #include <numeric> \u7ecf\u5e38\u8bb0\u4e0d\u4f4f\u8f97\u8f6c\u76f8\u9664\u6cd5\u600e\u4e48\u5199\u2026\u2026\u8fd9\u4e0b\u4e0d\u7528\u8bb0\u4e86\uff01 cout << gcd(18, 12) << \" \" << lcm(18, 12) << endl; \uff0c\u8f93\u51fa\u4e3a 6 36 \u3002 2.4 unique \u00b6 #include <algorithm> \u7528\u6765\u53bb\u9664\u8fde\u7eed\u7684\u91cd\u590d\u5143\u7d20\u3002\u4f8b\u5982 std::vector<int> v{1, 2, 1, 1, 3, 3, 3, 4, 5, 4}; , \u7ecf\u8fc7 auto last = std::unique(v.begin(), v.end()); \u540e v now holds {1 2 1 3 4 5 4 x x x} , where x is indeterminate\uff1b\u53ef\u4ee5\u7528 v.erase(last, v.end()); \u5220\u9664\u540e\u9762\u7684\u591a\u4f59\u4f4d\u7f6e\u3002 \u5f53\u7136\uff0csort \u540e unique \u5219\u53ef\u4ee5\u6392\u5e8f\u5e76\u5b8c\u5168\u53bb\u91cd\u3002 2.5 Algorithm \u5e93\u91cc\u5176\u4ed6\u770b\u8d77\u6765\u6709\u7528\u7684\u4e1c\u897f \u00b6 \uff08\u4e0b\u9762\u7684\u201c\u6570\u7ec4\u201d\u4e0d\u4ec5\u53ef\u4ee5\u662f\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e00\u4e9b\u6ee1\u8db3\u76f8\u5173\u6761\u4ef6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e14\u6761\u4ef6\u53ef\u80fd\u5404\u4e0d\u76f8\u540c\uff1b\u5728\u6b64\u6682\u4e0d\u5c55\u5f00\uff09 C++17 \u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u548c sort \u4e00\u6837\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a std::max_element \uff0c\u4e5f\u6709 min https://en.cppreference.com/w/cpp/algorithm/max_element C++17 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff1a std::merge https://en.cppreference.com/w/cpp/algorithm/merge C++17 \u9006\u8f6c\u4e00\u4e2a\u6570\u7ec4\uff1a std::reverse https://en.cppreference.com/w/cpp/algorithm/reverse 2.6 \u5176\u4ed6 \u00b6 \u5185\u7f6e\u7c7b\u578b\u7684\u6700\u5927 / \u6700\u5c0f\u503c\uff1a #include <limits> std::numeric_limits<int>::max() \u3001 std::numeric_limits<char>::min() \u4e4b\u7c7b\u7684 \u53ef\u4ee5\u7528 x & (x - 1) == 0 \u68c0\u9a8c x \u662f\u4e0d\u662f 2 \u7684\u6574\u6570\u6b21\u5e42 \u53ef\u4ee5\u7528 x & (-x) \u8ba1\u7b97 x \u6700\u5927\u7684 2 \u7684\u6574\u6570\u6b21\u5e42\u56e0\u5b50 (the greatest power of 2 that divides X) \u53ef\u4ee5\u7528 __builtin_popcount(x) \u8ba1\u7b97 int x \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\uff1b __builtin_popcountll \u53ef\u4ee5\u7528\u4e8e long long\u3002 3 \u6570\u636e\u7ed3\u6784\u4e4b\u7c7b\u7684\u4e1c\u897f \u00b6 Note \u8fd9\u90e8\u5206\u5176\u5b9e\u4e0d\u592a\u6e05\u695a\u8be5\u600e\u4e48\u5199QWQ\uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u5927\u6982\u63cf\u8ff0\u6bcf\u79cd\u6570\u636e\u7ed3\u6784\u662f\u5e72\u4ec0\u4e48\u7684\u4ee5\u53ca\u5b83\u7684\u7528\u6cd5\uff1b\u5173\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u76f8\u5173\u7684\u77e5\u8bc6\u6211\u5c3d\u91cf\u8d34\u4e0a\u94fe\u63a5~ \u5b83\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7 a.size() \u83b7\u53d6\u5143\u7d20\u4e2a\u6570\u3001 a.empty() \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff08\u8fd4\u56de bool\uff09\uff0c\u5c31\u4e0d\u5728\u6bcf\u4e2a\u91cc\u9762\u5199\u4e00\u904d\u4e86\uff01 \u672a\u7279\u6b8a\u8bf4\u660e\u7684\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u5747\u4e3a \\(O(1)\\) \u3002 \u4e0b\u9762\u5747\u4ee5\u5143\u7d20\u7c7b\u578b\u4e3a int \u4e3a\u4f8b\uff0c\u4f46\u662f\u8fd9\u4e2a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u610f\u7c7b\u578b\uff0c\u6bd4\u5982 stack<map<string, Foo>> \u4e4b\u7c7b\u7684\u4e5f\u90fd\u53ef\u4ee5\uff01 3.1 stack & queue & priority_queue | Container adaptors \u00b6 Info \u8fd9\u4e09\u79cd\u6570\u636e\u7ed3\u6784\u662f\u4e0d\u80fd\u904d\u5386\u7684\u3002\u201c\u5982\u679c\u4f60\u9700\u8981\u904d\u5386\u5b83\u4eec\uff0c\u90a3\u4e48\u4f60\u5c31\u4e0d\u5e94\u5f53\u9009\u62e9\u5b83\u4eec\u3002\u201d 3.1.1 \u2606 stack & queue \u00b6 \u6808 \u6808 \uff08stack\uff09\u662f\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa\uff08LIFO\uff09\u8868\uff0c\u9650\u5236\u4e86\u63d2\u5165\u548c\u5220\u9664\u53ea\u80fd\u5728\u8868\u7684\u672b\u7aef\uff08\u6210\u4e3a\u6808\u9876\uff0ctop\uff09\u8fdb\u884c\u3002\u5178\u578b\u7684\u64cd\u4f5c\u662f Push, Pop \u548c Top\uff08\u8bfb\u53d6\u6808\u9876\u5143\u7d20\u7684\u503c\uff09\u3002 #include <stack> \u6784\u9020\uff1a stack<int> s; \u538b\u6808\uff1a s.push(1) \u51fa\u6808\uff1a s.pop() \u8bbf\u95ee\u6808\u9876\uff1a s.top() \u961f\u5217 \u961f\u5217 \uff08queue\uff09\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u8868\u3002\u5165\u961f\uff08Enqueue\uff09\u5728\u961f\u5c3e\uff08rear\uff09\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u51fa\u961f\uff08Dequeue\uff09\u5219\u5220\u9664\u961f\u5934\uff08front\uff09\u7684\u4e00\u4e2a\u5143\u7d20\u3002 #include <queue> \u6784\u9020\uff1a queue<int> q; \u5165\u961f\uff1a q.push(2) \u51fa\u961f\uff1a q.pop() \u8bbf\u95ee\u961f\u9996 / \u961f\u5c3e\u5143\u7d20\uff1a q.front() , q.back() \uff08\u53e6\u5916\u8fd8\u6709 deque \uff0c\u53cc\u7aef\u961f\u5217\uff0c\u7701\u7565\uff09 See Also\uff1a - \u8868\u3001\u6808\u548c\u961f\u5217 | Lists, Stacks and Queues 3.1.2 \u2606\u2606 priority_queue \u00b6 \u4f18\u5148\u961f\u5217 \u4f18\u5148\u961f\u5217 \uff08priority queue\uff09\u662f\u59cb\u7ec8\u4fdd\u8bc1\u961f\u5934\u5143\u7d20\u662f\u961f\u5217\u4e2d\u6700\u5c0f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u7528\u5806\u5b9e\u73b0\u3002\u652f\u6301\u7684\u4e3b\u8981\u64cd\u4f5c\u6709\uff1a\u63d2\u5165\uff08\u5165\u961f\uff09\uff0c\u67e5\u8be2\u548c\u5220\u9664\u6700\u5c0f\u503c\uff08\u51fa\u961f\uff09\u3002 #include <queue> \u6784\u9020 priority_queue<int> q1 \uff1a\u961f\u9996\u59cb\u7ec8\u662f\u6700\u5c0f\u503c priority_queue<int, vector<int>, greater<int>> q2 \uff1a\u961f\u9996\u59cb\u7ec8\u662f\u6700\u5927\u503c \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a auto cmp = []( const int & a , const int & b ) { return a > b ;}; priority_queue < int , vector < int > , decltype ( cmp ) > q3 ( cmp ); \u8fd8\u53ef\u4ee5\u7528\u5df2\u6709\u7684\u6570\u7ec4\u521d\u59cb\u5316\u4f18\u5148\u961f\u5217\uff1a priority_queue<int> q1(v.begin(), v.end()); priority_queue<int, vector<int>, greater<int>> q2(v.begin(), v.end()); priority_queue<int, vector<int>, decltype(cmp)> q3(v.begin(), v.end(), cmp); \u8fd9\u6837\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\u662f \\(O(N)\\) \u7684\u3002 \u5165\u961f\uff1a q.push(2) \u51fa\u961f\uff1a q.pop() \u5165\u961f\u548c\u51fa\u961f\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684\u3002 \u8bbf\u95ee\u961f\u9996\uff08\u6700\u5c0f\uff09\u5143\u7d20\uff1a q.top() See Also\uff1a - \u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0\uff1a \u5806 | Heaps 3.2 \u2606 set & map & multiset & multimap | Associative containers \u00b6 Note std::set \u662f\u552f\u4e00\u3001\u6709\u5e8f\u5143\u7d20\u7684\u96c6\u5408\uff0c\u8fd9\u91cc\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u3002 std::map \u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u952e\u552f\u4e00\u3001\u6709\u5e8f\uff0c\u8fd9\u91cc\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u3002 std::multiset \u548c std::multimap \u5206\u522b\u662f\u5b83\u4eec\u7684\u53ef\u91cd\u7248\u672c\uff0c\u5373\u952e\u4e0d\u552f\u4e00\u3002 \u8fd9\u56db\u79cd\u6570\u636e\u7ed3\u6784\u662f\u53ef\u4ee5\u904d\u5386\u7684\uff0c\u4e14\u904d\u5386\u65f6\u4e5f\u662f\u6709\u5e8f\u7684\u3002 3.2.1 set & multiset \u00b6 #include <set> \u6784\u9020\uff1a set<int> s; \u6216 multiset<int> s; \u4e5f\u53ef\u4ee5\u7c7b\u4f3c priority_queue \u7528\u6570\u7ec4\u7b49\u6784\u9020\uff0c\u590d\u6742\u5ea6\u662f \\(O(N\\log N)\\) \u7684 \u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a auto cmp = [](int a, int b) { return ... }; std::set<int, decltype(cmp)> s(cmp); \u63d2\u5165\uff1a s.insert(3); \uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u5220\u9664\uff1a s.erase(2) \uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N + k)\\) \u7684\uff0c \\(k\\) \u662f\u627e\u5230\u7684\u4e2a\u6570 \u8ba1\u6570\uff1a s.count(3) \uff0c\u8fd4\u56de\u6709\u591a\u5c11\u4e2a\u5bf9\u5e94\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N + k)\\) \u7684\uff0c \\(k\\) \u662f\u627e\u5230\u7684\u4e2a\u6570 \u67e5\u627e\uff1a s.find(2) \uff0c\u8fd4\u56de\u4e00\u4e2a\u503c\u76f8\u7b49\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de s.end() \u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u4e5f\u6709 s.lower_bound(2) \u3001 s.upper_bound(3) \u51fd\u6570\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 3.2.2 map \u00b6 #include <map> \u6784\u9020\uff1a map<int, string> s; \u9644\u6ce8\u540c set & multiset \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 s[1] = \"123\" \u7684\u65b9\u5f0f\u65b0\u5efa\u952e\u503c\u5bf9\u6216\u8005\u8986\u76d6\u5df2\u6709\u7684\uff0c\u65e0\u8bba key 1 \u4e4b\u524d\u662f\u5426\u5b58\u5728\u3002 \u4e0b\u9762\u4e24\u4e2a\u5e76\u4e0d\u5e38\u7528\uff1a \u63d2\u5165\uff1a s.insert({1, \"123\"}); \uff0c\u5982\u679c key 1 \u5df2\u7ecf\u5b58\u5728\u5219\u4e0d\u4f1a\u8986\u76d6\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u8bbf\u95ee\uff1a s.at(1) \uff0c\u5982\u679c key 1 \u5b58\u5728\u5219\u8fd4\u56de\u5bf9\u5e94 value \u7684\u5f15\u7528\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u5220\u9664\uff1a s.erase(2) \uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u8ba1\u6570\uff1a s.count(3) \uff0c\u8fd4\u56de\u6709\u591a\u5c11\u4e2a key \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u67e5\u627e\uff1a s.find(2) \uff0c\u8fd4\u56de key \u76f8\u7b49\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de s.end() \u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u4e5f\u6709 s.lower_bound(2) \u3001 s.upper_bound(3) \u51fd\u6570\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 3.2.3 multimap \u00b6 #include <map> \u4e0d\u592a\u5e38\u7528\uff0c\u6682\u7565 See Also\uff1a - \u7ea2\u9ed1\u6811\uff1a \u5e73\u8861\u641c\u7d22\u6811 | Balanced Search Tree 3.3 \u2606\u2606 unordered_set & unordered_map | Unordered associative containers \u00b6 Note std::unordered_set \u548c std::unordered_map \u5206\u522b\u662f std::set \u548c std::map \u7684\u65e0\u5e8f\u7248\u672c\uff0c\u5373\u952e\u4e0d\u7ecf\u8fc7\u6392\u5e8f\u3002\u8fd9\u91cc\u7528\u54c8\u5e0c\u5b9e\u73b0\u3002 \u8fd9\u4e24\u79cd\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u53ef\u4ee5\u904d\u5386\u7684\u3002 #include <unordered_set> #include <unordered_map> \u6210\u5458\u51fd\u6570\u4e0e set \u548c map \u7c7b\u4f3c\uff0c\u4f46\u662f\u56e0\u4e3a\u65e0\u5e8f\u6240\u4ee5\u6ca1\u6709 lower_bound \u548c upper_bound \u3002 \u540c\u65f6\u7531\u4e8e\u662f\u4f7f\u7528\u54c8\u5e0c\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u63d2\u5165\u3001\u5220\u9664\u3001\u8bbf\u95ee\u3001\u67e5\u627e\u7684\u5e73\u5747\u590d\u6742\u5ea6\u5747\u4e3a \\(O(1)\\) \u3002\u56e0\u6b64\uff0c\u5728\u6ca1\u6709\u6392\u5e8f\u9700\u6c42\u65f6\u53ef\u4ee5\u9996\u9009\u8fd9\u4e24\u4e2a\u5bb9\u5668\u3002 See Also\uff1a - \u54c8\u5e0c\uff08\u4e4c\u4e4c\u6211\u6ca1\u6709\u7b14\u8bb0\uff09 \uff08\u4e5f\u6709 unordered_multiset \u548c unordered_multimap\uff0c\u4f46\u662f\u597d\u50cf\u4e0d\u600e\u4e48\u5e38\u7528\uff09 4 \u7ed3\u8bed \u00b6 \u4e8b\u5b9e\u4e0a\uff0c\u5728\u505a\u529b\u6263\u5468\u8d5b\u548c\u5404\u79cd\u7b14\u9762\u8bd5\u7684\u7b97\u6cd5\u9898\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u81ea\u5df1\u4f1a\u7528\u5230\u7684 C++ \u5c42\u9762\u4e0a\u80fd\u63d0\u4f9b\u7684\u5e2e\u52a9\u5927\u6982\u4e5f\u5c31\u4e0a\u9762\u8fd9\u4e9b\uff1b\u5176\u4e2d\u8fd8\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u662f\u53ef\u4ee5\u81ea\u5df1\u7b80\u5355\u5b9e\u73b0\u7684\u3002\u800c\u505a\u51fa\u9898\u76ee\u7684\u5173\u952e\u66f4\u591a\u8fd8\u662f\u9760\u7b97\u6cd5\u7684\u8bbe\u8ba1\u3002\u6211\u672c\u8eab\u4e5f\u6ca1\u6709\u505a\u8fc7\u591a\u5c11\u9898\uff0c\u76ee\u524d\u7684\u6c34\u5e73\u4e5f\u662f\u5728\u5c1d\u8bd5\u5728\u5468\u8d5b\u4e2d\u80fd\u7a33\u5b9a\u505a\u51fa\u4e09\u9898\uff0c\u611f\u89c9\u57fa\u7840\u7b97\u6cd5\u3001\u601d\u8def\u548c\u89c1\u8bc6\u65b9\u9762\u8fd8\u6709\u5f88\u591a\u6b20\u7f3a\u3002\u6574\u7406\u4e0a\u9762\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4e5f\u5e0c\u671b\u80fd\u7ed9\u81ea\u5df1\u548c\u8bfb\u8005\uff08\u5982\u679c\u6709\uff09\u5e26\u6765\u4e00\u70b9\u70b9\u5e2e\u52a9\uff01 \u4e5f\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41\u3001\u4e92\u76f8 push \u505a\u9898\u9884\u9632\u8001\u5e74\u75f4\u5446\uff0c\u540c\u65f6\u4e5f\u8bf7\u529b\u6240\u80fd\u53ca\u7684\u5927\u5c0f\u670b\u53cb\u4eec\u6765\u9c7c\u8086\u5468\u62a5\u5199\u5199\u4e1c\u897fQWQ\uff01\u611f\u8c22\u5927\u5bb6~ P.S. \u5982\u679c\u6709\u5176\u4ed6\u597d\u7528\u7684\u4e1c\u897f\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u5206\u4eab ~","title":"\u5feb\u901f\u5165\u95e8 C++ \u5199\u9898"},{"location":"cpp/cpp_for_contests/#1-\u57fa\u7840","text":"\u4f7f\u7528 C++ \u7b54\u9898\u65f6\uff0c\u6709\u4e00\u4e9b\u975e\u5e38\u57fa\u7840\u548c\u5e38\u7528\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u5b83\u4eec\uff01","title":"1 \u57fa\u7840"},{"location":"cpp/cpp_for_contests/#11-\u5f15\u7528","text":"\u5728 C \u8bed\u8a00\u4e2d\uff0c\u7b26\u53f7 & \u662f \u53d6\u5730\u5740\u7b26 \u3002\u800c\u5728 C++ \u4e2d\uff0c & \u6709\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\uff1a\u5b9a\u4e49\u5f15\u7528\u53d8\u91cf\u3002\u5f15\u7528\u5c31\u662f\u67d0\u4e00\u4e2a\u53d8\u91cf\u7684\u522b\u540d\uff0c \u5bf9\u5f15\u7528\u7684\u64cd\u4f5c\u548c\u5bf9\u53d8\u91cf\u76f4\u63a5\u64cd\u4f5c\u5b8c\u5168\u4e00\u6837 \u3002\u5b9a\u4e49\u8bed\u6cd5\u4e3a\uff1a Type &refVarName = varName; \u3002 \u5f15\u7528\u4e0e\u6307\u9488\u7c7b\u4f3c\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u7684\u6709\uff1a \u4e0d\u5b58\u5728\u7a7a\u5f15\u7528\u3002\u5f15\u7528\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u5757\u5408\u6cd5\u7684\u5185\u5b58\uff0c\u56e0\u6b64 \u58f0\u660e\u5f15\u7528\u65f6\uff0c\u5fc5\u987b\u540c\u65f6\u8fdb\u884c\u521d\u59cb\u5316 \u3002 \u5f15\u7528\u53d8\u91cf\u58f0\u660e\u5b8c\u6bd5\u540e\uff0c \u76f8\u5f53\u4e8e\u539f\u53d8\u91cf\u6709\u4e862\u4e2a\u540d\u79f0\uff0c\u5373\u5f15\u7528\u540d\u548c\u539f\u540d\u3002 \u5f15\u7528\u4e0d\u5360\u5b58\u50a8\u5355\u5143\uff0c\u5bf9\u5f15\u7528\u548c\u539f\u53d8\u91cf\u53d6\u5740\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684 \u3002 \u4e00\u65e6\u5f15\u7528\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u88ab\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u5373 \u4e0d\u80fd\u5c06\u4e00\u4e2a\u5f15\u7528\u540d\u91cd\u65b0\u4f5c\u4e3a\u5176\u4ed6\u53d8\u91cf\u540d\u7684\u522b\u540d \u3002 \u4e0d\u80fd\u5efa\u7acb\u6570\u7ec4\u7684\u5f15\u7528\u3002 \u6307\u9488\u89e3\u51b3\u4e86\u6211\u4eec\u5728\u4f20\u9012\u53c2\u6570\u65f6\u590d\u5236\u5e26\u6765\u7684\u6548\u7387\u548c\u7a7a\u95f4\u6d88\u8017\u7b49\u95ee\u9898\u3002\u800c\u5f15\u7528\u76f8\u6bd4\u4e8e\u6307\u9488\u66f4\u52a0\u5b89\u5168\uff08\u907f\u514d\u5bf9\u5185\u5b58\u7684\u975e\u6cd5\u5f15\u7528\uff09\u3001\u53ef\u8bfb\u6027\u66f4\u9ad8\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u989d\u5916\u5206\u914d\u5185\u5b58\u5355\u5143\u3002 \u548c\u6307\u9488\u7c7b\u4f3c\uff0c int &a = b, c = d \u4e2d\uff0c a \u7684\u7c7b\u578b\u662f int & \uff0c\u800c c \u7684\u7c7b\u578b\u662f int \u3002 \u5f15\u7528\u5176\u5b9e\u5c31\u662f\u6307\u9488\u5305\u88c5\u4e86\u4e00\u4e0b\u3002 \u901a\u8fc7\u5f15\u7528\u53d6\u4e00\u4e2a\u522b\u540d\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u5f15\u7528\u7684\u76ee\u7684\u4e3b\u8981\u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u3002\u4f8b\u5982\uff1a void swap ( int & a , int & b ){ int temp = a ; a = b ; b = temp ; } int main (){ int var1 = 1 , var2 = 2 ; swap ( var1 , var2 ); cout << var1 << \" \" << var2 << endl ; return 0 ; } \u8f93\u51fa\u662f\uff1a 2 1 \u3002 \u5173\u4e8e\u5f15\u7528\u7684\u5176\u4ed6\u7528\u6cd5\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002","title":"1.1 \u5f15\u7528"},{"location":"cpp/cpp_for_contests/#12-vector","text":"#include <vector> vector \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u79cd\u81ea\u52a8\u6269\u5c55\u957f\u5ea6\u7684\u6570\u7ec4\u3002 \u6784\u9020 \uff1a \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 vector<int> v; \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u3001\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5747\u4e3a int \u7684 vector\uff0c\u5176\u540d\u5b57\u4e3a v \u3002\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\uff0c\u5305\u62ec\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u66ff\u6362\u8fd9\u91cc\u7684 int \u3002 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c vector<int> v = {1, 2, 3}; \u7684\u65b9\u5f0f\u521d\u59cb\u5316\u3002 \u540c\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 vector<int> v(n); \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5305\u542b n \u4e2a\u5143\u7d20\u7684 vector\u3002 \u53ef\u4ee5\u901a\u8fc7 vector<int> v(n, 1); \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u4e14\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u90fd\u4e3a 1 \u7684 vector\u3002 \u83b7\u53d6\u957f\u5ea6 \u3002\u53ef\u4ee5\u901a\u8fc7 v.size() \u83b7\u53d6 vector v \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5728\u672b\u5c3e\u63d2\u5165\u5143\u7d20 \u3002\u53ef\u4ee5\u901a\u8fc7 v.push_back(x) \u7684\u65b9\u5f0f\u5c06 x \u63d2\u5165\u5230 vector v \u7684\u672b\u5c3e\u3002\u8fd9\u91cc\u7684\u63d2\u5165\u662f\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u7684\uff0c\u800c\u4f7f\u7528 v.emplace_back(...) \u5219\u53ef\u4ee5\u5728 vector \u4e2d\u8fdb\u884c\u201c\u539f\u5730\u6784\u9020\u201d\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u6548\u7387\u66f4\u597d\uff0c\u5199\u8d77\u6765\u4e5f\u66f4\u7b80\u5355\u3002 \u8bbf\u95ee\uff08\u8bfb\u53d6 / \u4fee\u6539\uff09\u5143\u7d20 \u3002\u548c\u6570\u7ec4\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7 v[i] \u7684\u65b9\u5f0f\u8bbf\u95ee vector v \u7684\u7b2c i \u4e2a\u5143\u7d20\uff0c\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002\u6ce8\u610f\uff0c\u5f53 i >= v.size() \u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u53ef\u80fd\u53d1\u751f\u8fd0\u884c\u65f6\u9519\u8bef\u3002 \u904d\u5386 \u3002 C++11 \u9664\u4e86\u4f7f\u7528 for (int i = 0; i < v.size(); i++) sum += v[i]; \u7684\u65b9\u5f0f\u904d\u5386\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a for (auto a : v) sum += a; \u3002\u8fd9\u79cd\u5199\u6cd5\u53eb\u505a range-based for loop\u3002 C++11 \u8fd9\u91cc\u7684 auto \u4f1a\u81ea\u52a8\u63a8\u65ad\u51fa a \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f vector v \u4e2d\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u5b98\u65b9\u79f0\u547c\u662f Placeholder type specifiers\u3002\u5728\u505a LeetCode \u7684\u7edd\u5927\u591a\u6570\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 for (auto &a : v) \uff0c\u52a0\u4e0a\u4e00\u4e2a\u5f15\u7528\u3002\u52a0\u4e0a\u8fd9\u4e2a\u5f15\u7528\u540e\u5c31\u4e0d\u4f1a\u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u5faa\u73af\u90fd\u6784\u9020\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u5728\u904d\u5386\u4e8c\u7ef4 vector \u7684\u65f6\u5019\u5c24\u4e3a\u6709\u610f\u4e49\u3002\u5f53\u7136\u52a0\u4e0a\u5f15\u7528\u540e\u5bf9\u8fd9\u4e2a\u53d8\u91cf a \u505a\u7684\u6539\u52a8\u4f1a\u771f\u5b9e\u5730\u5f71\u54cd\u5230 vector v \u3002 \u9884\u7559\u5927\u5c0f \u53ef\u4ee5\u901a\u8fc7 v.reserve(n) \u6765\u5c06 vector \u7684 capacity\uff08\u800c\u975e size\uff09\u9884\u7559\u4e3a n \u3002\u5982\u679c\u7406\u89e3 vector \u7684\u5b9e\u73b0\u903b\u8f91\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u610f\u4e49\uff08\u53ef\u4ee5\u770b cppref \u91cc\u7684\u4f8b\u5b50\uff09\u3002\u5982\u679c\u4e0d\u7406\u89e3\u7684\u8bdd\u53ef\u4ee5\u6682\u65f6\u5f53\u505a\u6ca1\u770b\u89c1\u8fd9\u4e00\u6761\u3002","title":"1.2 vector"},{"location":"cpp/cpp_for_contests/#13-string","text":"#include <string> string \u662f C++ \u4e2d\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u3002\u5176\u5b9e\u73b0\u548c C \u4e2d\u7684\u5b57\u7b26\u6570\u7ec4\u4e00\u81f4\uff0c\u4e5f\u662f\u4ee5 '\\0' \u6807\u8bc6\u7ed3\u675f\u3002 \u6784\u9020 \u3002\u53ef\u4ee5\u901a\u8fc7 string s; \u6216\u8005 string s = \"123\"; \u7684\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u83b7\u53d6\u957f\u5ea6 \u3002\u53ef\u4ee5\u901a\u8fc7 s.length() \u6216\u8005 s.size() \u7684\u65b9\u5f0f\u83b7\u53d6\u5176\u957f\u5ea6\uff0c\u8be5\u957f\u5ea6\u4e0d\u542b\u672b\u5c3e\u7684 '\\0' \u3002 \u62fc\u63a5 \u3002\u53ef\u4ee5\u901a\u8fc7 s1 + s2 \u6216\u8005 s + 'a' \u7684\u65b9\u5f0f\u5c06\u5b57\u7b26\u4e32\u4e0e\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u5b57\u7b26\uff08\u5747\u53ef\u4ee5\u662f\u5b57\u9762\u91cf\uff09\u62fc\u63a5\u3002 \u8bbf\u95ee\u5b57\u7b26 \u3002\u548c\u6570\u7ec4\u3001vector \u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7 s[i] \u7684\u65b9\u5f0f\u8bbf\u95ee\u5b57\u7b26\u4e32\u7684\u7b2c i \u4e2a\u5b57\u7b26\u3002 \u904d\u5386 \u3002 C++11 \u7c7b\u4f3c vector\uff0c\u53ef\u4ee5\u901a\u8fc7 for (auto c : s) \u7684\u65b9\u5f0f\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u3002 \u6bd4\u8f83 \u3002\u53ef\u4ee5\u901a\u8fc7 == , != , > \u7b49\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002","title":"1.3 string"},{"location":"cpp/cpp_for_contests/#14-pair","text":"#include <utility> pair \u53ef\u4ee5\u5c06\u4e24\u4e2a\u4e0d\u5fc5\u76f8\u540c\u7684\u7c7b\u578b\u6512\u8d77\u6765\uff0c\u4f8b\u5982 pair<int, int> p1; \u6216\u8005 pair<int, string> p2; \u3002 \u53ef\u4ee5\u7528 pair<int, double> p{1, 1.3}; \u7684\u65b9\u5f0f\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 p = make_pair(0, -3.1) \u7684\u65b9\u5f0f\u8d4b\u503c\u3002pair \u4e4b\u95f4\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\u3002 \u53ef\u4ee5\u7528 p1.first \u3001 p1.second \u7684\u65b9\u5f0f\u8bbf\u95ee\u5176\u6210\u5458\u3002 pair \u9ed8\u8ba4\u7684\u6bd4\u8f83\u65b9\u6cd5\u662f\u5148\u6309\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u6bd4\u8f83\uff0c\u76f8\u540c\u518d\u6309\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u6bd4\u8f83\u3002","title":"1.4 pair"},{"location":"cpp/cpp_for_contests/#2-\u4e0d\u90a3\u4e48\u57fa\u7840","text":"Note \u540e\u9762\u7684\u90e8\u5206\u57fa\u672c\u662f\u60f3\u5230\u54ea\u5199\u5230\u54ea\uff0c\u6240\u4ee5\u4e0d\u5b8c\u5168\u6709\u903b\u8f91\u548c\u96be\u5ea6\u7684\u987a\u5e8f\uff09\uff09\uff09 \u7528 \u2606 \u6807\u660e\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u5e38\u7528\u7684\u5185\u5bb9\uff01","title":"2 \u4e0d\u90a3\u4e48\u57fa\u7840"},{"location":"cpp/cpp_for_contests/#21--sort","text":"#include <algorithm> sort \u7528\u4e8e\u5bf9\u6570\u7ec4\u6216 vector \u7b49\u53ef\u4ee5\u968f\u673a\u8bbf\u95ee\u4e14\u5143\u7d20\u53ef\u6bd4\u8f83\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6392\u5e8f\u3002\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \u3002 \u4f8b\u5982\uff1a int a [] = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( a , a + 6 ); \u6b64\u65f6 a \u4e2d\u7684\u503c\u4e3a -2 1 3 3 4 5\uff0c\u5373\u5347\u5e8f\u6392\u5217\u3002 \u8fd9\u91cc a \u548c a + 6 \u662f\u5de6\u95ed\u53f3\u5f00\u7684\u6392\u5e8f\u533a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c sort(a + 1, a + 4) \u7684\u65b9\u5f0f\u5bf9\u90e8\u5206\u8fdb\u884c\u6392\u5e8f\u3002 \u5bf9\u4e8e vector\uff0c\u4e5f\u53ef\u4ee5\u7c7b\u4f3c\u4f7f\u7528\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end ()); \u5982\u679c\u60f3\u8981\u964d\u5e8f\u600e\u4e48\u529e\u5462\uff1f\u65b9\u6cd5\u4e4b\u4e00\u662f\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), greater < int > ()); \u6b64\u65f6 v \u4e2d\u7684\u503c\u662f 5 4 3 3 1 -2\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u3002\u6bd4\u8f83\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u5143\u7d20\u7684\u5f15\u7528\uff0c\u8fd4\u56de\u4e00\u4e2a bool \u503c\u8868\u793a\u524d\u8005\u662f\u5426\u5e94\u5f53\u5728\u540e\u8005\u4e4b\u524d\uff1a bool cmp ( const int & a , const int & b ) { return a > b ; } vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), cmp ); \u6ce8\u610f\uff0c\u6bd4\u8f83\u51fd\u6570\u903b\u8f91\u4e0a\u76f8\u5f53\u4e8e a < b \u3002\u56e0\u6b64\u5f53\u4e24\u4e2a\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u6bd4\u8f83\u51fd\u6570\u603b\u662f\u5e94\u5f53\u8fd4\u56de false\u3002 C++11 \u4e5f\u53ef\u4ee5\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\uff08\u5176\u5b9e\u5c31\u662f\u533f\u540d\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u4e86\uff0c\u6709\u7f18\u518d\u804a XD\uff09\u7b80\u5316\u5199\u6cd5\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), []( const int & a , const int & b ) { return a > b ; }); \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u53ef\u4ee5\u9002\u7528\u66f4\u590d\u6742\u7684\u6392\u5e8f\uff0c\u4f8b\u5982\u9700\u8981\u6bd4\u8f83\u7684\u5143\u7d20\u672c\u8eab\u5e76\u6ca1\u6709\u5185\u7f6e\u7684\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\u3002\u4f8b\u5982\uff1a bool cmp ( const vector < int >& a , const vector < int >& b ) { return a [ 0 ] == b [ 0 ] ? a [ 1 ] < b [ 1 ] : a [ 0 ] < b [ 0 ]; } \u8fd9\u4e2a\u6bd4\u8f83\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e vector<vector<int>> \u7c7b\u578b\u7684\u6392\u5e8f\u3002 \u5e38\u7528\u7684\u6807\u51c6\u5e93\uff08\u5982 libgc++\uff09\u4e2d\u5bf9\u4e8e std::sort \u7684\u5b9e\u73b0\u4fdd\u8bc1\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \uff0c\u800c\u4e0d\u4f1a\u9000\u5316\u6210\u5feb\u6392\u7684 \\(O(n^2)\\) \u3002\u56e0\u4e3a\u5b83\u4f7f\u7528\u7684\u662f\u4e00\u79cd\u5feb\u6392\u3001\u5806\u6392\u4ee5\u53ca\u63d2\u5165\u6392\u5e8f\u7684\u7ed3\u5408\u4f53\u3002 \uff08\u8fd8\u6709\u66f4\u591a\u6bd4\u8f83\u5668\u7684\u5199\u6cd5\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u5c55\u5f00\u5566\uff09","title":"2.1 \u2606\u2606\u2606 sort"},{"location":"cpp/cpp_for_contests/#22--upper_bound--lower_bound--binary_search--equal_range","text":"#include <algorithm> \u7528\u4e8e\u6709\u5e8f\u7684\u6570\u7ec4\uff01 \u53ef\u4ee5\u50cf sort \u4e00\u6837\u6307\u5b9a\u6bd4\u8f83\u51fd\u6570\u3002 auto u = upper_bound(data.begin(), data.end(), i) \u8fd4\u56de\u7b2c\u4e00\u4e2a \u4e25\u683c\u5927\u4e8e i \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff08\u548c\u6307\u9488\u5dee\u4e0d\u591a\uff0c\u53ef\u4ee5\u7528 *u \u83b7\u53d6\u5176\u503c\uff09\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5373 data.end() \u3002 lower_bound \u8fd4\u56de\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e i \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\u8fd9\u91cc\u6f14\u793a\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4f8b\u5b50\uff08\u53ef\u4ee5\u770b\u5230\uff0c\u4f20\u5165\u7684\u5f85\u67e5\u627e\u53c2\u6570\u5e76\u4e0d\u4e00\u5b9a\u9700\u8981\u548c\u5bb9\u5668\u5185\u5143\u7d20\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u53ea\u8981\u548c\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u543b\u5408\u5373\u53ef\uff09\uff1a auto prc_info = lower_bound ( prices . begin (), prices . end (), i , []( const PriceInfo & info , double value ){ return info . price < value ; }); binary_search(v.begin(), v.end(), i) \u8fd4\u56de\u4e00\u4e2a bool\uff0c\u8868\u793a i \u662f\u5426\u5728 v \u4e2d\u3002 \u6ce8\u610f\uff1a\u8fd9 3 \u4e2a\u51fd\u6570\u5747\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u56e0\u6b64\u5982\u679c\u539f\u6570\u7ec4\u4e0d\u662f\u6709\u5e8f\u7684\uff0c\u7ed3\u679c\u5c31\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002\u590d\u6742\u5ea6\u5747\u4e3a \\(O(\\log n)\\)","title":"2.2 \u2606 upper_bound &amp; lower_bound &amp; binary_search &amp; equal_range"},{"location":"cpp/cpp_for_contests/#23-gcd--lcm-c17","text":"#include <numeric> \u7ecf\u5e38\u8bb0\u4e0d\u4f4f\u8f97\u8f6c\u76f8\u9664\u6cd5\u600e\u4e48\u5199\u2026\u2026\u8fd9\u4e0b\u4e0d\u7528\u8bb0\u4e86\uff01 cout << gcd(18, 12) << \" \" << lcm(18, 12) << endl; \uff0c\u8f93\u51fa\u4e3a 6 36 \u3002","title":"2.3 gcd &amp; lcm C++17"},{"location":"cpp/cpp_for_contests/#24-unique","text":"#include <algorithm> \u7528\u6765\u53bb\u9664\u8fde\u7eed\u7684\u91cd\u590d\u5143\u7d20\u3002\u4f8b\u5982 std::vector<int> v{1, 2, 1, 1, 3, 3, 3, 4, 5, 4}; , \u7ecf\u8fc7 auto last = std::unique(v.begin(), v.end()); \u540e v now holds {1 2 1 3 4 5 4 x x x} , where x is indeterminate\uff1b\u53ef\u4ee5\u7528 v.erase(last, v.end()); \u5220\u9664\u540e\u9762\u7684\u591a\u4f59\u4f4d\u7f6e\u3002 \u5f53\u7136\uff0csort \u540e unique \u5219\u53ef\u4ee5\u6392\u5e8f\u5e76\u5b8c\u5168\u53bb\u91cd\u3002","title":"2.4 unique"},{"location":"cpp/cpp_for_contests/#25-algorithm-\u5e93\u91cc\u5176\u4ed6\u770b\u8d77\u6765\u6709\u7528\u7684\u4e1c\u897f","text":"\uff08\u4e0b\u9762\u7684\u201c\u6570\u7ec4\u201d\u4e0d\u4ec5\u53ef\u4ee5\u662f\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4e00\u4e9b\u6ee1\u8db3\u76f8\u5173\u6761\u4ef6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e14\u6761\u4ef6\u53ef\u80fd\u5404\u4e0d\u76f8\u540c\uff1b\u5728\u6b64\u6682\u4e0d\u5c55\u5f00\uff09 C++17 \u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u548c sort \u4e00\u6837\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a std::max_element \uff0c\u4e5f\u6709 min https://en.cppreference.com/w/cpp/algorithm/max_element C++17 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\uff1a std::merge https://en.cppreference.com/w/cpp/algorithm/merge C++17 \u9006\u8f6c\u4e00\u4e2a\u6570\u7ec4\uff1a std::reverse https://en.cppreference.com/w/cpp/algorithm/reverse","title":"2.5 Algorithm \u5e93\u91cc\u5176\u4ed6\u770b\u8d77\u6765\u6709\u7528\u7684\u4e1c\u897f"},{"location":"cpp/cpp_for_contests/#26-\u5176\u4ed6","text":"\u5185\u7f6e\u7c7b\u578b\u7684\u6700\u5927 / \u6700\u5c0f\u503c\uff1a #include <limits> std::numeric_limits<int>::max() \u3001 std::numeric_limits<char>::min() \u4e4b\u7c7b\u7684 \u53ef\u4ee5\u7528 x & (x - 1) == 0 \u68c0\u9a8c x \u662f\u4e0d\u662f 2 \u7684\u6574\u6570\u6b21\u5e42 \u53ef\u4ee5\u7528 x & (-x) \u8ba1\u7b97 x \u6700\u5927\u7684 2 \u7684\u6574\u6570\u6b21\u5e42\u56e0\u5b50 (the greatest power of 2 that divides X) \u53ef\u4ee5\u7528 __builtin_popcount(x) \u8ba1\u7b97 int x \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\uff1b __builtin_popcountll \u53ef\u4ee5\u7528\u4e8e long long\u3002","title":"2.6 \u5176\u4ed6"},{"location":"cpp/cpp_for_contests/#3-\u6570\u636e\u7ed3\u6784\u4e4b\u7c7b\u7684\u4e1c\u897f","text":"Note \u8fd9\u90e8\u5206\u5176\u5b9e\u4e0d\u592a\u6e05\u695a\u8be5\u600e\u4e48\u5199QWQ\uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u5927\u6982\u63cf\u8ff0\u6bcf\u79cd\u6570\u636e\u7ed3\u6784\u662f\u5e72\u4ec0\u4e48\u7684\u4ee5\u53ca\u5b83\u7684\u7528\u6cd5\uff1b\u5173\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u76f8\u5173\u7684\u77e5\u8bc6\u6211\u5c3d\u91cf\u8d34\u4e0a\u94fe\u63a5~ \u5b83\u4eec\u90fd\u53ef\u4ee5\u901a\u8fc7 a.size() \u83b7\u53d6\u5143\u7d20\u4e2a\u6570\u3001 a.empty() \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff08\u8fd4\u56de bool\uff09\uff0c\u5c31\u4e0d\u5728\u6bcf\u4e2a\u91cc\u9762\u5199\u4e00\u904d\u4e86\uff01 \u672a\u7279\u6b8a\u8bf4\u660e\u7684\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u5747\u4e3a \\(O(1)\\) \u3002 \u4e0b\u9762\u5747\u4ee5\u5143\u7d20\u7c7b\u578b\u4e3a int \u4e3a\u4f8b\uff0c\u4f46\u662f\u8fd9\u4e2a\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u610f\u7c7b\u578b\uff0c\u6bd4\u5982 stack<map<string, Foo>> \u4e4b\u7c7b\u7684\u4e5f\u90fd\u53ef\u4ee5\uff01","title":"3 \u6570\u636e\u7ed3\u6784\u4e4b\u7c7b\u7684\u4e1c\u897f"},{"location":"cpp/cpp_for_contests/#31-stack--queue--priority_queue--container-adaptors","text":"Info \u8fd9\u4e09\u79cd\u6570\u636e\u7ed3\u6784\u662f\u4e0d\u80fd\u904d\u5386\u7684\u3002\u201c\u5982\u679c\u4f60\u9700\u8981\u904d\u5386\u5b83\u4eec\uff0c\u90a3\u4e48\u4f60\u5c31\u4e0d\u5e94\u5f53\u9009\u62e9\u5b83\u4eec\u3002\u201d","title":"3.1 stack &amp; queue &amp; priority_queue | Container adaptors"},{"location":"cpp/cpp_for_contests/#311--stack--queue","text":"\u6808 \u6808 \uff08stack\uff09\u662f\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa\uff08LIFO\uff09\u8868\uff0c\u9650\u5236\u4e86\u63d2\u5165\u548c\u5220\u9664\u53ea\u80fd\u5728\u8868\u7684\u672b\u7aef\uff08\u6210\u4e3a\u6808\u9876\uff0ctop\uff09\u8fdb\u884c\u3002\u5178\u578b\u7684\u64cd\u4f5c\u662f Push, Pop \u548c Top\uff08\u8bfb\u53d6\u6808\u9876\u5143\u7d20\u7684\u503c\uff09\u3002 #include <stack> \u6784\u9020\uff1a stack<int> s; \u538b\u6808\uff1a s.push(1) \u51fa\u6808\uff1a s.pop() \u8bbf\u95ee\u6808\u9876\uff1a s.top() \u961f\u5217 \u961f\u5217 \uff08queue\uff09\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u8868\u3002\u5165\u961f\uff08Enqueue\uff09\u5728\u961f\u5c3e\uff08rear\uff09\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u51fa\u961f\uff08Dequeue\uff09\u5219\u5220\u9664\u961f\u5934\uff08front\uff09\u7684\u4e00\u4e2a\u5143\u7d20\u3002 #include <queue> \u6784\u9020\uff1a queue<int> q; \u5165\u961f\uff1a q.push(2) \u51fa\u961f\uff1a q.pop() \u8bbf\u95ee\u961f\u9996 / \u961f\u5c3e\u5143\u7d20\uff1a q.front() , q.back() \uff08\u53e6\u5916\u8fd8\u6709 deque \uff0c\u53cc\u7aef\u961f\u5217\uff0c\u7701\u7565\uff09 See Also\uff1a - \u8868\u3001\u6808\u548c\u961f\u5217 | Lists, Stacks and Queues","title":"3.1.1 \u2606 stack &amp; queue"},{"location":"cpp/cpp_for_contests/#312--priority_queue","text":"\u4f18\u5148\u961f\u5217 \u4f18\u5148\u961f\u5217 \uff08priority queue\uff09\u662f\u59cb\u7ec8\u4fdd\u8bc1\u961f\u5934\u5143\u7d20\u662f\u961f\u5217\u4e2d\u6700\u5c0f\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u91cc\u7528\u5806\u5b9e\u73b0\u3002\u652f\u6301\u7684\u4e3b\u8981\u64cd\u4f5c\u6709\uff1a\u63d2\u5165\uff08\u5165\u961f\uff09\uff0c\u67e5\u8be2\u548c\u5220\u9664\u6700\u5c0f\u503c\uff08\u51fa\u961f\uff09\u3002 #include <queue> \u6784\u9020 priority_queue<int> q1 \uff1a\u961f\u9996\u59cb\u7ec8\u662f\u6700\u5c0f\u503c priority_queue<int, vector<int>, greater<int>> q2 \uff1a\u961f\u9996\u59cb\u7ec8\u662f\u6700\u5927\u503c \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a auto cmp = []( const int & a , const int & b ) { return a > b ;}; priority_queue < int , vector < int > , decltype ( cmp ) > q3 ( cmp ); \u8fd8\u53ef\u4ee5\u7528\u5df2\u6709\u7684\u6570\u7ec4\u521d\u59cb\u5316\u4f18\u5148\u961f\u5217\uff1a priority_queue<int> q1(v.begin(), v.end()); priority_queue<int, vector<int>, greater<int>> q2(v.begin(), v.end()); priority_queue<int, vector<int>, decltype(cmp)> q3(v.begin(), v.end(), cmp); \u8fd9\u6837\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\u662f \\(O(N)\\) \u7684\u3002 \u5165\u961f\uff1a q.push(2) \u51fa\u961f\uff1a q.pop() \u5165\u961f\u548c\u51fa\u961f\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684\u3002 \u8bbf\u95ee\u961f\u9996\uff08\u6700\u5c0f\uff09\u5143\u7d20\uff1a q.top() See Also\uff1a - \u4f18\u5148\u961f\u5217\u7684\u5b9e\u73b0\uff1a \u5806 | Heaps","title":"3.1.2 \u2606\u2606 priority_queue"},{"location":"cpp/cpp_for_contests/#32--set--map--multiset--multimap--associative-containers","text":"Note std::set \u662f\u552f\u4e00\u3001\u6709\u5e8f\u5143\u7d20\u7684\u96c6\u5408\uff0c\u8fd9\u91cc\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u3002 std::map \u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u952e\u552f\u4e00\u3001\u6709\u5e8f\uff0c\u8fd9\u91cc\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u3002 std::multiset \u548c std::multimap \u5206\u522b\u662f\u5b83\u4eec\u7684\u53ef\u91cd\u7248\u672c\uff0c\u5373\u952e\u4e0d\u552f\u4e00\u3002 \u8fd9\u56db\u79cd\u6570\u636e\u7ed3\u6784\u662f\u53ef\u4ee5\u904d\u5386\u7684\uff0c\u4e14\u904d\u5386\u65f6\u4e5f\u662f\u6709\u5e8f\u7684\u3002","title":"3.2 \u2606 set &amp; map &amp; multiset &amp; multimap | Associative containers"},{"location":"cpp/cpp_for_contests/#321-set--multiset","text":"#include <set> \u6784\u9020\uff1a set<int> s; \u6216 multiset<int> s; \u4e5f\u53ef\u4ee5\u7c7b\u4f3c priority_queue \u7528\u6570\u7ec4\u7b49\u6784\u9020\uff0c\u590d\u6742\u5ea6\u662f \\(O(N\\log N)\\) \u7684 \u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a auto cmp = [](int a, int b) { return ... }; std::set<int, decltype(cmp)> s(cmp); \u63d2\u5165\uff1a s.insert(3); \uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u5220\u9664\uff1a s.erase(2) \uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N + k)\\) \u7684\uff0c \\(k\\) \u662f\u627e\u5230\u7684\u4e2a\u6570 \u8ba1\u6570\uff1a s.count(3) \uff0c\u8fd4\u56de\u6709\u591a\u5c11\u4e2a\u5bf9\u5e94\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N + k)\\) \u7684\uff0c \\(k\\) \u662f\u627e\u5230\u7684\u4e2a\u6570 \u67e5\u627e\uff1a s.find(2) \uff0c\u8fd4\u56de\u4e00\u4e2a\u503c\u76f8\u7b49\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de s.end() \u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u4e5f\u6709 s.lower_bound(2) \u3001 s.upper_bound(3) \u51fd\u6570\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684","title":"3.2.1 set &amp; multiset"},{"location":"cpp/cpp_for_contests/#322-map","text":"#include <map> \u6784\u9020\uff1a map<int, string> s; \u9644\u6ce8\u540c set & multiset \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 s[1] = \"123\" \u7684\u65b9\u5f0f\u65b0\u5efa\u952e\u503c\u5bf9\u6216\u8005\u8986\u76d6\u5df2\u6709\u7684\uff0c\u65e0\u8bba key 1 \u4e4b\u524d\u662f\u5426\u5b58\u5728\u3002 \u4e0b\u9762\u4e24\u4e2a\u5e76\u4e0d\u5e38\u7528\uff1a \u63d2\u5165\uff1a s.insert({1, \"123\"}); \uff0c\u5982\u679c key 1 \u5df2\u7ecf\u5b58\u5728\u5219\u4e0d\u4f1a\u8986\u76d6\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u8bbf\u95ee\uff1a s.at(1) \uff0c\u5982\u679c key 1 \u5b58\u5728\u5219\u8fd4\u56de\u5bf9\u5e94 value \u7684\u5f15\u7528\uff0c\u5426\u5219\u629b\u51fa\u5f02\u5e38\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u5220\u9664\uff1a s.erase(2) \uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u8ba1\u6570\uff1a s.count(3) \uff0c\u8fd4\u56de\u6709\u591a\u5c11\u4e2a key \u76f8\u7b49\u7684\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u67e5\u627e\uff1a s.find(2) \uff0c\u8fd4\u56de key \u76f8\u7b49\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u8fd4\u56de s.end() \u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684 \u4e5f\u6709 s.lower_bound(2) \u3001 s.upper_bound(3) \u51fd\u6570\u3002\u590d\u6742\u5ea6\u662f \\(O(\\log N)\\) \u7684","title":"3.2.2 map"},{"location":"cpp/cpp_for_contests/#323-multimap","text":"#include <map> \u4e0d\u592a\u5e38\u7528\uff0c\u6682\u7565 See Also\uff1a - \u7ea2\u9ed1\u6811\uff1a \u5e73\u8861\u641c\u7d22\u6811 | Balanced Search Tree","title":"3.2.3 multimap"},{"location":"cpp/cpp_for_contests/#33--unordered_set--unordered_map--unordered-associative-containers","text":"Note std::unordered_set \u548c std::unordered_map \u5206\u522b\u662f std::set \u548c std::map \u7684\u65e0\u5e8f\u7248\u672c\uff0c\u5373\u952e\u4e0d\u7ecf\u8fc7\u6392\u5e8f\u3002\u8fd9\u91cc\u7528\u54c8\u5e0c\u5b9e\u73b0\u3002 \u8fd9\u4e24\u79cd\u6570\u636e\u7ed3\u6784\u4e5f\u662f\u53ef\u4ee5\u904d\u5386\u7684\u3002 #include <unordered_set> #include <unordered_map> \u6210\u5458\u51fd\u6570\u4e0e set \u548c map \u7c7b\u4f3c\uff0c\u4f46\u662f\u56e0\u4e3a\u65e0\u5e8f\u6240\u4ee5\u6ca1\u6709 lower_bound \u548c upper_bound \u3002 \u540c\u65f6\u7531\u4e8e\u662f\u4f7f\u7528\u54c8\u5e0c\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u63d2\u5165\u3001\u5220\u9664\u3001\u8bbf\u95ee\u3001\u67e5\u627e\u7684\u5e73\u5747\u590d\u6742\u5ea6\u5747\u4e3a \\(O(1)\\) \u3002\u56e0\u6b64\uff0c\u5728\u6ca1\u6709\u6392\u5e8f\u9700\u6c42\u65f6\u53ef\u4ee5\u9996\u9009\u8fd9\u4e24\u4e2a\u5bb9\u5668\u3002 See Also\uff1a - \u54c8\u5e0c\uff08\u4e4c\u4e4c\u6211\u6ca1\u6709\u7b14\u8bb0\uff09 \uff08\u4e5f\u6709 unordered_multiset \u548c unordered_multimap\uff0c\u4f46\u662f\u597d\u50cf\u4e0d\u600e\u4e48\u5e38\u7528\uff09","title":"3.3 \u2606\u2606 unordered_set &amp; unordered_map | Unordered associative containers"},{"location":"cpp/cpp_for_contests/#4-\u7ed3\u8bed","text":"\u4e8b\u5b9e\u4e0a\uff0c\u5728\u505a\u529b\u6263\u5468\u8d5b\u548c\u5404\u79cd\u7b14\u9762\u8bd5\u7684\u7b97\u6cd5\u9898\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u81ea\u5df1\u4f1a\u7528\u5230\u7684 C++ \u5c42\u9762\u4e0a\u80fd\u63d0\u4f9b\u7684\u5e2e\u52a9\u5927\u6982\u4e5f\u5c31\u4e0a\u9762\u8fd9\u4e9b\uff1b\u5176\u4e2d\u8fd8\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u662f\u53ef\u4ee5\u81ea\u5df1\u7b80\u5355\u5b9e\u73b0\u7684\u3002\u800c\u505a\u51fa\u9898\u76ee\u7684\u5173\u952e\u66f4\u591a\u8fd8\u662f\u9760\u7b97\u6cd5\u7684\u8bbe\u8ba1\u3002\u6211\u672c\u8eab\u4e5f\u6ca1\u6709\u505a\u8fc7\u591a\u5c11\u9898\uff0c\u76ee\u524d\u7684\u6c34\u5e73\u4e5f\u662f\u5728\u5c1d\u8bd5\u5728\u5468\u8d5b\u4e2d\u80fd\u7a33\u5b9a\u505a\u51fa\u4e09\u9898\uff0c\u611f\u89c9\u57fa\u7840\u7b97\u6cd5\u3001\u601d\u8def\u548c\u89c1\u8bc6\u65b9\u9762\u8fd8\u6709\u5f88\u591a\u6b20\u7f3a\u3002\u6574\u7406\u4e0a\u9762\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4e5f\u5e0c\u671b\u80fd\u7ed9\u81ea\u5df1\u548c\u8bfb\u8005\uff08\u5982\u679c\u6709\uff09\u5e26\u6765\u4e00\u70b9\u70b9\u5e2e\u52a9\uff01 \u4e5f\u6b22\u8fce\u5927\u5bb6\u4e92\u76f8\u4ea4\u6d41\u3001\u4e92\u76f8 push \u505a\u9898\u9884\u9632\u8001\u5e74\u75f4\u5446\uff0c\u540c\u65f6\u4e5f\u8bf7\u529b\u6240\u80fd\u53ca\u7684\u5927\u5c0f\u670b\u53cb\u4eec\u6765\u9c7c\u8086\u5468\u62a5\u5199\u5199\u4e1c\u897fQWQ\uff01\u611f\u8c22\u5927\u5bb6~ P.S. \u5982\u679c\u6709\u5176\u4ed6\u597d\u7528\u7684\u4e1c\u897f\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u5206\u4eab ~","title":"4 \u7ed3\u8bed"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/","text":"Abstract \u672c\u6587\u6240\u9700\u9884\u5907\u77e5\u8bc6\uff1a C / C++ \u57fa\u7840\uff0cC++ \u6a21\u677f\u57fa\u7840\uff1b \u5efa\u8bae\u9884\u5907\u77e5\u8bc6\uff1a \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u57fa\u7840 \u5728 \u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 \u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u7684\u5185\u5bb9\u5927\u591a\u6570\uff08\u9664\u4e86 1.1, 1.3 \u548c 2.5\uff09\u90fd\u5c5e\u4e8e STL (Standard Template Library)\u3002\u867d\u7136\u638c\u63e1\u4e00\u4e9b\u63a5\u53e3\u5c31\u8db3\u591f\u6211\u4eec\u7528\u5b83\u4eec\u6765\u505a\u7b97\u6cd5\u9898\uff0c\u4f46\u662f\u597d\u5947\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u80fd\u4e5f\u4f1a\u5bf9\u4e00\u4e9b\u5177\u4f53\u7684\u5b9e\u73b0\u611f\u5174\u8da3\u3002\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ece \u8bed\u8a00 \u5c42\u9762\uff08\u800c\u975e\u7b97\u6cd5\u5c42\u9762\uff09\u5bf9 STL \u7684\u8fd9\u90e8\u5206\u5b9e\u73b0\u5c55\u5f00\u4e00\u4e9b\u8ba8\u8bba\u548c\u4ecb\u7ecd\u3002 \u611f\u8c22 \u767d\u91d1\u732b\u732b \u3001 27rabbit \u5bf9\u672c\u6587\u7684\u5ba1\u6821\u548c\u5efa\u8bae\uff01 \u7531\u4e8e\u4f5c\u8005\u80fd\u529b\u6709\u9650\uff0c\u6587\u4e2d\u96be\u514d\u6709\u9519\u6f0f\u4e4b\u5904\u3002\u6073\u8bf7\u5927\u5bb6\u6279\u8bc4\u6307\u6b63QWQ Tips \u672c\u6587\u4e2d\u8fd9\u6837\u7684\u6bb5\u843d\u5c5e\u4e8e\u8865\u5145\u8bf4\u660e\uff0c\u8bfb\u8005\u53ef\u4ee5\u9009\u8bfb Info \u672c\u6587\u4e2d\u8fd9\u6837\u7684\u6bb5\u843d\u5c5e\u4e8e\u6574\u6d3b\uff0c\u8bfb\u8005\u53ef\u4ee5\u4e0d\u8bfb \u7531\u4e8e\u672c\u6587\u4ecb\u7ecd\u7684\u662f STL\uff0c\u56e0\u6b64\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u6211\u4eec\u9ed8\u8ba4 using namespace std; \u3002 STL \u7531 4 \u90e8\u5206\u7ec4\u6210\uff1a\u5bb9\u5668 (Containers)\u3001\u8fed\u4ee3\u5668 (Iterators)\u3001\u7b97\u6cd5 (Algorithms) \u548c\u51fd\u6570\u5bf9\u8c61 (Function objects)\u3002\u6211\u4eec\u5df2\u7ecf\u5bf9 vector, map \u7b49\u5404\u79cd\u5bb9\u5668\u6709\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u8ba4\u8bc6\uff0c\u540c\u65f6\u5bf9 sort, lower_bound \u7b49\u5404\u79cd\u7b97\u6cd5\u4e5f\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\u3002\u90a3\u4e48\uff0c \u8fed\u4ee3\u5668 \u548c \u51fd\u6570\u5bf9\u8c61 \u662f\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f 0 Quiz \u65f6\u95f4\uff01 \u00b6 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u629b\u51fa\u82e5\u5e72\u95ee\u9898\u4f9b\u5927\u5bb6\u601d\u8003\uff1b\u8fd9\u5176\u4e2d\u7684\u95ee\u9898\u751a\u81f3\u5305\u62ec\u6211\u5728\u9762\u8bd5\u4e2d\u9047\u5230\u7684\u539f\u9898\u5594\uff01\uff08\u4f60\u5982\u679c\u77e5\u9053\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u8fd9\u7bc7\u6587\u7ae0\u4e86 XD\uff09 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for (auto &a : c) \u7684\u65b9\u5f0f\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u3002\u8fd9\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u6211\u4eec\u77e5\u9053 map \u662f\u80fd\u591f\u7528\u4e0a\u8ff0\u65b9\u5f0f\u904d\u5386\u7684\u3002\u5bf9\u4e8e map<int, int> m; \uff0c\u6211\u4eec\u4f7f\u7528 sort(m.begin(), m.end()); \u53ef\u4ee5\u5417\uff1f sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f 1 Why \u8fed\u4ee3\u5668 \u00b6 \u6211\u4eec\u5148\u6765\u770b\u770b\u7b2c 1 \u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48 for (auto &a : c) \u53ef\u4ee5\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u5462\uff1f\u904d\u5386 vector \u7684\u65b9\u6cd5\u5176\u5b9e\u975e\u5e38\u5bb9\u6613\u7406\u89e3\uff0c\u7c7b\u4f3c\u4e8e for (int i = 0; i < c.size(); i++) \u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0cset \u662f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\uff0c\u7ea2\u9ed1\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff1b\u904d\u5386\u8fd9\u6837\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u548c\u904d\u5386\u4e00\u4e2a\u6570\u7ec4\u7684\u65b9\u6cd5\u80af\u5b9a\u662f\u4e0d\u4e00\u6837\u7684\u3002\u8fd9\u600e\u4e48\u529e\u5462\uff1f \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9e\u73b0\uff1a for (auto i = c.begin(); i != c.end(); c.go_to_next_node(i)) \uff1b\u5176\u4e2d c.begin() \u548c c.end() \u53ef\u4ee5\u662f\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5bb9\u5668\u91cc \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7684\u4f4d\u7f6e\uff0c\u5373\u6700\u5c0f\u548c\u6700\u5927\u7684\u5143\u7d20\uff1b\u800c c.go_to_next_node(i) \u5b9e\u73b0\u6839\u636e\u8fd9\u4e2a\u6307\u9488\u627e\u5230\u5176\u4e0b\u4e00\u4e2a\u5143\u7d20\uff08\u5b66\u8fc7\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5c0f\u670b\u53cb\u4eec\u5e94\u8be5\u80fd\u591f\u60f3\u5230\u8fd9\u4e2a\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1b\u4e0d\u77e5\u9053\u4e5f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u4eca\u5929\u7684\u91cd\u70b9\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e00\u4e2a set \u7684\u904d\u5386\u4e86\u3002 \u8fd9\u65f6\u56de\u5934\u770b\u770b\u6211\u4eec\u5bf9 vector \u7684\u904d\u5386\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4f3c\u4e4e vector \u4e5f\u80fd\u5199\u6210\u540e\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5373 for (auto i = c.begin(); i != c.end(); c.go_to_next_node(i)) \uff1a c.begin() \u548c c.end() \u4ecd\u7136\u5206\u522b\u6307\u5411\u5bb9\u5668\u91cc \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7684\u4f4d\u7f6e\uff0c\u800c c.go_to_next_node(i) \u5e72\u7684\u4e8b\u60c5\u53ea\u662f\u6307\u9488\u7684 ++ \u800c\u5df2\u3002 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u4e00\u5b9a\u80fd\u53d1\u73b0\uff0c\u8fd9\u79cd\u904d\u5386\u7684\u5173\u952e\u53ea\u6709 3 \u70b9\uff1a\u4ece\u54ea\u91cc\u5f00\u59cb\u3001\u5230\u54ea\u91cc\u7ed3\u675f\u3001\u600e\u4e48\u8d70\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\uff1b\u8fd9\u5b9e\u9645\u4e0a\u5c31\u5bf9\u5e94\u7740\u4e24\u4e2a\u6307\u9488\u4ee5\u53ca\u6211\u4eec\u719f\u6089\u7684\u6307\u9488\u7684 ++ \u8fd0\u7b97\u7b26\u3002\u806a\u660e\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u80fd\u5c31\u60f3\u5230\u4e86\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6837\u7684\u6307\u9488\u5305\u88c5\u6210\u4e00\u4e2a\u7c7b\uff0c\u5e76\u91cd\u8f7d\u5b83\u7684 ++ \u8fd0\u7b97\u7b26\uff08\u8fd9\u91cc\u6307\u524d\u7f6e\u7684 ++ \uff0c\u4e0b\u540c\uff09\uff0c\u8fd9\u6837\u4e0d\u540c\u7684\u5bb9\u5668\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u904d\u5386\u6216\u8005\u505a\u5176\u4ed6\u64cd\u4f5c\u4e86\uff01 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5c31\u662f \u8fed\u4ee3\u5668 (Iterator) \u89e3\u51b3\u7684\u95ee\u9898\u3002\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u5199\u7a0b\u5e8f\u7684\u76ee\u7684\u5c31\u662f \u5904\u7406\u3001\u67e5\u8be2\u3001\u4f7f\u7528\u6570\u636e \uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u6211\u4eec\u7684\u5de5\u5177\u3002 \u5728\u6982\u5ff5\u5c42\u9762\u4e0a \uff0c\u5404\u79cd\u5bb9\u5668\u6216\u8005\u6570\u636e\u7ed3\u6784\u7684\u610f\u4e49\u662f\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u6216\u8005\u6027\u8d28 \u5bb9\u7eb3 \u6570\u636e\uff0c\u4f46\u662f\u5b83\u672c\u8eab\u4e0d\u5177\u5907\u5904\u7406\u6570\u636e\u7684\u80fd\u529b\uff1b\u800c\u5404\u79cd\u7b97\u6cd5\u7684\u610f\u4e49\u662f\u6309\u4e00\u5b9a\u7684\u65b9\u6cd5 \u5904\u7406 \u6570\u636e\uff0c\u5b83\u672c\u8eab\u5e76\u4e0d\u6301\u6709\u4efb\u4f55\u6570\u636e\u3002\u800c\u8fed\u4ee3\u5668\u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u6865\u6881\u2014\u2014\u4e00\u4e2a\u5bb9\u5668\u53ef\u80fd\u662f\u4e00\u4e2a\u6570\u7ec4\u3001\u4e00\u68f5\u4e8c\u53c9\u6811\u3001\u4e00\u4e2a\u94fe\u8868\uff0c\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u53ef\u80fd\u7684\u6570\u636e\u7ed3\u6784\uff1b\u4e00\u79cd\u7b97\u6cd5\u9700\u8981\u5bf9\u5bb9\u5668\u505a\u904d\u5386\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u7684\u8bbf\u95ee\uff1b\u4f46\u662f\u904d\u5386\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\u80af\u5b9a\u662f\u4e0d\u540c\u7684\u2014\u2014\u8fed\u4ee3\u5668\u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u901a\u8fc7\u8fd0\u7b97\u7b26\u91cd\u8f7d\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\uff0c\u6765\u5411\u7b97\u6cd5\u9690\u85cf\u5bb9\u5668\u7684\u4e0d\u540c\u7ec6\u8282\uff1b\u7b97\u6cd5\u53ea\u9700\u8981\u4f7f\u7528 ++ \u5c31\u80fd\u83b7\u5f97\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7 * \u5c31\u80fd\u8bbf\u95ee\u5f53\u524d\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\uff0c\u5b83\u4e0d\u9700\u8981\u5173\u5fc3\u5230\u5e95\u662f\u5982\u4f55\u8bbf\u95ee\u7684\uff1b\u8fd9\u5176\u5b9e\u4e0a\u5c31\u662f\u6307\u9488\u7684\u62bd\u8c61\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0cSTL \u4fdd\u6301\u4e86\u5b83\u7684\u7b80\u6d01\u6027\uff0c\u63d0\u5347\u4e86\u4ee3\u7801\u7684\u590d\u7528\u3002 \u8865\u5145 1.1 \u4e3a\u4ec0\u4e48\u8bf4\u662f \u201c\u5728\u6982\u5ff5\u5c42\u9762\u4e0a\u201d \u5462\uff1f\u56e0\u4e3a\u5728\u5b9e\u9645\u7684\u5b9e\u73b0\u4e2d\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u6216\u8005\u6613\u7528\u6027\uff0c\u4e00\u4e9b\u5bb9\u5668\u4e5f\u5c06\u4e00\u4e9b\u7b97\u6cd5\u653e\u5230\u4e86\u81ea\u5df1\u7684\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u4f8b\u5982 map \u548c set \u7684 lower_bound \u7b49\u3002\u4f46\u662f\u4ece\u6982\u5ff5\u89d2\u5ea6\u4e0a\uff0c\u5bb9\u5668\u5c31\u4ec5\u4ec5\u662f\u4e2a\u5305\u88c5\u597d\u4e86\u7684\u6570\u636e\u7ed3\u6784\u800c\u5df2\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5176\u5b9e\u4e5f\u5c31\u77e5\u9053\u4e86 for (auto &a : c) \u662f\u5982\u4f55\u5b9e\u73b0\u7684\u4e86\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u6709\u8fed\u4ee3\u5668\u7684\u5bb9\u5668\uff08stack, queue, priority_queue \u5e76\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u56e0\u4e3a\u4f60\u4e0d\u5e94\u5f53\u5c1d\u8bd5\u53bb\u904d\u5386\u6216\u8005\u4ee5\u5176\u4ed6\u81ea\u7531\u7684\u5f62\u5f0f\u8bbf\u95ee\u8fd9\u4e9b\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff09\uff0c\u5b83\u7684\u6210\u5458\u51fd\u6570 begin() \u548c end() \u8fd4\u56de\u7684\u90fd\u662f\u67d0\u79cd\u8fed\u4ee3\u5668\uff1b\u8fd9\u4e9b\u8fed\u4ee3\u5668\u90fd\u91cd\u8f7d\u4e86 ++ \u8fd0\u7b97\u7b26\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5bb9\u5668\uff0c\u5b9e\u73b0 ++ \u8fd0\u7b97\u7b26\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u6574\u4e2a\u5bb9\u5668\u7684\u7ed3\u6784\uff1b\u4f8b\u5982\u5728\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u5fc5\u77e5\u9053\u6839\u8282\u70b9\u662f\u4ec0\u4e48\u3002\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8fd9\u6837\u5305\u542b\u6210\u5458\u51fd\u6570 begin() \u548c end() \uff0c\u4e14\u5176\u8fd4\u56de\u503c\u7c7b\u578b\u652f\u6301\u8fd0\u7b97\u7b26 ++ \u3001 * \u548c != \u7684\u7c7b\uff0c for (auto &a : c) {/* A */} \u7684\u5b9e\u73b0\u65b9\u6cd5\u5c31\u7c7b\u4f3c\u4e8e\uff1a for (auto it = c.begin(); it != c.end(); ++it) {auto &a = *it; /* A */} \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u5176\u5b9e\u548c\u6211\u4eec\u521a\u521a\u7684\u60f3\u6cd5\u975e\u5e38\u76f8\u4f3c\uff01 \u8865\u5145 1.2 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e std::vector<int> v; \uff0c v.begin() \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u53ef\u80fd\u662f __gnu_cxx::__normal_iterator<int*, std::vector<int>> \uff1b\u5bf9\u4e8e std::map<int, double> m; \uff0c m.begin() \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u53ef\u80fd\u662f std::_Rb_tree_iterator<std::pair<const int, double>> \u3002\u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u81ea\u5df1\u5728 https://godbolt.org/z/6s5x66rdG \u5c1d\u8bd5\uff08\u8fd9\u91cc\u4e5f\u5c55\u793a\u4e86\u4e00\u79cd\u67e5\u770b\u8868\u8fbe\u5f0f\u7c7b\u578b\u7684\u5c0f\u6280\u5de7\uff09\uff01 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ Insights \u6765\u67e5\u770b\uff1a https://cppinsights.io/s/cd95e24b \u6574\u6d3b 1.3 \u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u4f7f\u7528\u8fd9\u79cd range-based for loop\uff0c\u53ea\u9700\u8981\u7c7b\u201c\u5305\u542b\u6210\u5458\u51fd\u6570 begin() \u548c end() \uff0c\u4e14\u5176\u8fd4\u56de\u503c\u7c7b\u578b\u652f\u6301\u8fd0\u7b97\u7b26 ++ \u3001 * \u548c != \u201d\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801 XD\uff1a \u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u6765\u73a9\u4e00\u73a9\uff1a https://godbolt.org/z/813b9e9Pd \u8865\u5145 1.4 \u53e6\u5916\uff0c\u9664\u4e86 begin() \uff0c\u5bb9\u5668\u8fd8\u4f1a\u63d0\u4f9b cbegin() , rbegin() , crbegin() \u8fd9\u4e09\u79cd\u6210\u5458\u51fd\u6570\uff0c\u63d0\u4f9b\u4e0d\u540c\u7684\u8fed\u4ee3\u5668\uff1b\u4e5f\u6709\u5bf9\u5e94\u7684 end() \u7248\u672c\u3002\u8fd9\u91cc c \u662f\u6307 const\uff0c\u5373\u8fed\u4ee3\u5668\u6307\u5411\u7684\u53d8\u91cf\u662f\u53ea\u8bfb\u7684\uff1b r \u662f\u6307 reverse\uff0c\u5373\u8fd9\u79cd\u8fed\u4ee3\u5668\u662f\u9006\u5e8f\u7684\uff0c\u5373\uff1a 2 \u8fed\u4ee3\u5668\u7684\u5206\u7c7b \u00b6 \u6211\u4eec\u4e0b\u9762\u518d\u6765\u770b\u7b2c 2 \u4e2a\u95ee\u9898\uff1a\u5df2\u77e5 map \u53ef\u4ee5\u904d\u5386\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u662f\u6709\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u7684\uff1b\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 sort \u5bf9 map \u8fdb\u884c\u6392\u5e8f\u5417\uff1f \u4f17\u6240\u5468\u77e5\uff0csort \u7684\u5b9e\u73b0\u672c\u8d28\u4e0a\u662f\u5feb\u901f\u6392\u5e8f\uff08\u5b9e\u9645\u4e0a\u4e0d\u5b8c\u5168\u662f\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \uff09\uff1b\u800c\u5feb\u901f\u6392\u5e8f\u672c\u8eab\u662f\u9700\u8981 \u968f\u673a\u8bbf\u95ee \u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u7684\uff0c\u5373\u80fd\u591f\u4ee5 \\(O(1)\\) \u7684\u65f6\u95f4\u4f7f\u7528\u7c7b\u4f3c c[i] \u7684\u65b9\u5f0f\u8bbf\u95ee\u5230\u5bb9\u5668\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff1b\u540c\u65f6\u4e5f\u9700\u8981\u80fd\u591f\u4ee5 \\(O(1)\\) \u7684\u65f6\u95f4\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684 \u8ddd\u79bb \u3002\u4f46\u662f\uff0cmap \u672c\u8eab\u5e76\u4e0d\u80fd\u591f\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5927\u5bb6\u5c1d\u8bd5\u5199\u7528 sort \u5bf9 map \u6392\u5e8f\u7684\u4ee3\u7801\u5c31\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u62a5\u9519\uff1a \u5b83\u544a\u8bc9\u6211\u4eec\uff0c std::_Rb_tree_iterator<...> \u4e4b\u95f4\u7684 - \u8fd0\u7b97\u7b26\u5e76\u6ca1\u6709\u88ab\u5b9a\u4e49\uff1b\u5373 map \u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5e76\u4e0d\u652f\u6301\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u7684\u529f\u80fd\u3002 \u4e8b\u5b9e\u4e0a\uff0cC++ \u5bf9\u8fed\u4ee3\u5668\u4f5c\u4e86\u82e5\u5e72\u5206\u7c7b\uff08\u786e\u5207\u5730\u8bf4\uff0c\u662f \u5177\u540d\u8981\u6c42 named requirements \uff09\uff0c\u4e0d\u540c\u7684\u7b97\u6cd5\u4e5f\u5bf9\u6240\u9700\u7684\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\u505a\u4e86\u4e0d\u540c\u7684\u8981\u6c42\u3002\u6211\u4eec\u8f83\u4e3a\u901a\u4fd7\u5730\u6982\u62ec\u5404\u7c7b\u8fed\u4ee3\u5668\u6240\u652f\u6301\u7684\u529f\u80fd\uff08\u53ef\u80fd\u5b58\u5728\u4e0d\u591f\u5b8c\u6574\u548c\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u4f46\u662f\u7406\u89e3\u4e3a\u4e3b\uff09\uff1a Legacy Input Iterator - \u80fd\u591f\u7528\u6765\u6807\u8bc6\u3001 \u904d\u5386 \u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u80fd\u591f\u4ece\u6240\u6307\u7684\u5143\u7d20\u4e2d \u8bfb\u53d6 \u503c\u3002 \u6ce8\uff1a LegacyInputIterator \u53ea\u9700\u8981\u4fdd\u8bc1 \u5355\u8d9f \u7b97\u6cd5\u7684\u6709\u6548\u6027\uff1a\u4e00\u65e6\u4e00\u4e2a LegacyInputIterator it \u88ab ++ \u540e\uff0c\u5b83\u4e4b\u524d\u6240\u6307\u7684\u503c\u53ca\u5176\u6240\u6709\u62f7\u8d1d\u90fd\u4e0d\u518d\u9700\u8981\u4fdd\u8bc1\u6709\u6548\u6027 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b\u7684 It \u9700\u8981\u652f\u6301\uff1a ++it \uff08\u8fd4\u56de It & \uff09 *it \uff08\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u4e14\u80fd\u8f6c\u5316\u4e3a value_type \uff09 it1 != it2 \uff08\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a bool \uff0c\u4e14\u5982\u679c == \u6709\u5b9a\u4e49\uff0c\u4e0e !(it1 == it2) \u503c\u76f8\u540c\uff09 it->m \uff08\u7b49\u4ef7\u4e8e (*it).m \uff09 it++ \uff08\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a const It& \uff09 *it++ \uff08\u5373 *(it++) \uff0c\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a value_type \uff09 Legacy Forward Iterator - \u5728 LegacyInputIterator \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f\u652f\u6301 \u591a\u8d9f \u7b97\u6cd5\u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 LegacyInputIterator \u5982\u679c it1 == it2 \uff0c\u90a3\u4e48\u8981\u4e48\u5b83\u4eec\u90fd\u6ca1\u6709\u6307\u5411\u4e00\u4e2a\u6709\u6548\u7684\u5bf9\u8c61\uff08\u4f8b\u5982 nullptr \u6216\u8005\u7c7b\u4f3c c.end() \u7684\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u79f0\u5b83\u4eec\u662f \u4e0d\u53ef\u89e3\u5f15\u7528\u7684 undereferenceable \uff09\uff0c\u8981\u4e48\u5b83\u4eec\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c *it1 \u548c *it2 \u5f15\u7528\u540c\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48 it1 == it2 it \u88ab ++ \u540e\uff0c\u518d\u6b21\u8bfb\u53d6\u5176\u539f\u6765\u6307\u5411\u5bf9\u8c61\u7684\u503c\uff0c\u7ed3\u679c\u4e0d\u5e94\u53d1\u751f\u53d8\u5316 \u5982\u679c it1 == it2 \uff0c\u90a3\u4e48 ++it1 == ++it2 Legacy Bidirectional Iterator - \u5728 _LegacyForwardIterator _ \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f \u53cc\u5411\u79fb\u52a8 \u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 _LegacyForwardIterator _ \u652f\u6301 --it , it-- , *it-- \uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u524d\u8ff0 ++ \u76f8\u540c\uff0c\u4e14\uff1a --(++it) == it \u5982\u679c --it1 == --it2 \uff0c\u90a3\u4e48 it1 == it2 Legacy RandomAccess Iterator - \u5728 LegacyBidirectionalIterator \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f\u5728 \u5e38\u6570 \u65f6\u95f4\u5185\u79fb\u52a8\u4ece\u800c\u6307\u5411 \u4efb\u4e00 \u5143\u7d20\u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 LegacyBidirectionalIterator \u652f\u6301 it += n , it -= n , it + n , it - n , n + it , it[n] , it1 < it2 , it1 > it2 , it1 <= it2 , it1 >= it2 \uff08\u6bd4\u8f83\u8fd0\u7b97\u7b26\u9700\u8981\u5728\u81ea\u53cd\u3001\u4ea4\u6362\u3001\u4f20\u9012\u4e0b\u6709\u6b63\u786e\u8868\u73b0\uff09, it1 - it2 \uff08\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u7684\u8ddd\u79bb\uff09 \uff0c\u542b\u4e49\u7565\uff0c\u4f46\u590d\u6742\u5ea6\u987b\u662f \\(O(1)\\) \u7684 C++17 Legacy Contiguous Iterator - \u5728 LegacyRandomAccessIterator \u7684\u57fa\u7840\u4e0a\uff0c\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5728\u5185\u5b58\u91cc \u7269\u7406\u4e0a\u4e5f\u76f8\u90bb \u3002 \u6ce8\uff1a\u6307\u5411\u6570\u7ec4\u4e2d\u5143\u7d20\u7684 \u6307\u9488 \u6ee1\u8db3 LegacyContiguousIterator \u7684\u6240\u6709\u8981\u6c42\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u79cd Legacy Output Iterator \uff0c\u5b83\u548c LegacyInputIterator \u7c7b\u4f3c\uff0c\u9700\u8981\u80fd\u591f\u7528\u6765\u6807\u8bc6\u3001 \u904d\u5386 \u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u80fd\u591f\u5411\u6240\u6307\u7684\u5143\u7d20\u4e2d \u5199\u5165 \u503c\uff1b\u540c\u6837\u4e0d\u9700\u8981\u4fdd\u8bc1\u591a\u8d9f\u7b97\u6cd5\u7684\u6709\u6548\u6027\u3002 \u53ef\u4ee5\u770b\u5230\uff0c LegacyOutputIterator \u548c\u524d\u8ff0 5 \u4e2a\u5177\u540d\u8981\u6c42\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u79f0\u6ee1\u8db3\u524d\u8ff0 5 \u4e2a\u5177\u540d\u8981\u6c42\u4e2d\u67d0\u4e00\u4e2a\u7684\u540c\u65f6\u8fd8\u6ee1\u8db3 LegacyOutputIterator \u7684\u8fed\u4ee3\u5668\u4e3a mutable \u7684\u3002 \u8fd9\u5f20\u8868\u683c\u6982\u62ec\u4e86\u4e0a\u8ff0\u5185\u5bb9\uff1a \u53c8\u662f Quiz \u65f6\u95f4\uff01 \u00b6 \u90a3\u4e48\uff0c\u8bf7\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u7ed3\u5408\u5bf9\u5e94\u5bb9\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5199\u51fa\u5b83\u4eec\u63d0\u4f9b\u6ee1\u8db3\u4ec0\u4e48\u8981\u6c42\u7684\u8fed\u4ee3\u5668\uff01 \u56fe\u6ce8 * \u5bf9\u4e8e deque\uff0c\u4f8b\u5982\u6bcf\u4e2a\u5b9a\u957f\u6570\u7ec4\u957f\u5ea6\u4e3a 100\uff0c\u90a3\u4e48\u8bbf\u95ee q[514] \u5176\u5b9e\u5c31\u662f\u8bbf\u95ee a[5][14] \uff0c\u4e5f\u5c31\u662f\u7b2c 6 \u4e2a\u6570\u7ec4\u91cc\u7684\u7b2c 15 \u4e2a\u5143\u7d20\u3002 \\(\\dagger\\) \u4e0a\u8868\u4e2d Unordered Associative Containers \u7684\u5b9e\u73b0\u8003\u8651\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6709 \\(m = 10^6\\) \u4e2a bucket\uff0c\u4f46\u662f\u53ea\u6709 \\(n = 100\\) \u4e2a\u5143\u7d20\uff0c\u5982\u679c\u76f4\u63a5\u904d\u5386 bucket \u7684\u8bdd\u590d\u6742\u5ea6\u662f \\(O(m+n) >> O(n)\\) \u7684\uff1b\u56e0\u6b64\u5b9e\u73b0\u4e2d\u989d\u5916\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ef4\u62a4\u6240\u6709\u6709\u5143\u7d20\u7684 bucket \u5217\u8868\uff0c\u904d\u5386\u65f6\u6839\u636e\u8fd9\u4e2a\u5217\u8868\u53bb\u627e\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u5c31\u4ec5\u662f \\(O(n)\\) \u7684\u4e86\u3002 \u7b54\u6848\u6765\u54af\uff01 \u56fe\u6ce8 # \u7279\u522b\u5730\uff0c vector<bool> \u662f vector \u7684\u4e00\u4e2a\u7279\u5316\uff0c\u6807\u51c6\u5e0c\u671b\u5b9e\u73b0\u8005\u53ef\u4ee5\u8003\u8651\u7528\u66f4\u8282\u7701\u7a7a\u95f4\u7684\u65b9\u5f0f\u4fdd\u5b58 vector<bool> \uff0c\u4f46\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u662f implementation defined \u7684\uff08\u6807\u51c6\u4e0d\u6307\u660e\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4f46\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u8005\u9700\u8981\u7ed9\u51fa\u8bf4\u660e\uff09\uff1b\u56e0\u6b64 vector<bool> \u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3\u7684\u5177\u540d\u8981\u6c42\u4e5f\u662f implementation defined \u7684\u3002 \u56de\u987e\u6211\u4eec\u63d0\u5230\u7684\u7b97\u6cd5\uff0c sort \u9700\u8981\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyRandomAccessIterator \uff1b\u8fd9\u4e00\u9650\u5236\u7684\u5b9e\u73b0\u65b9\u5f0f\u5176\u5b9e\u5c31\u662f\uff0c sort \u7684\u5b9e\u73b0\u4e2d\u4f1a\u5305\u542b it1 - it2 \uff0c it + n \u4e4b\u7c7b\u7684\u8fd0\u7b97\uff0c\u5982\u679c\u4e0d\u652f\u6301\u8fd9\u4e9b\u8fd0\u7b97\u5c31\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002 \u540c\u65f6\uff0c lower_bound \u548c upper_bound \u53ea\u9700\u8981\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyForwardIterator \uff1b\u4f46\u662f\u5982\u679c\u8fd8\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff1b\u5426\u5219\u662f \\(O(n)\\) \u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e set , map , multiset \u548c multimap \uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u4e0d\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u4f46\u662f\u5b83\u4eec\u672c\u8eab\u7c7b\u5185\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684 lower_bound \u51fd\u6570\uff0c\u56e0\u6b64\u6b64\u65f6\u5e94\u8be5\u7528\u7c7b\u5185\u7684\u8fd9\u4e9b\u51fd\u6570\u3002 \u8865\u5145 2.1 \u8fd9\u79cd\u5728\u6ee1\u8db3\u548c\u4e0d\u6ee1\u8db3 _LegacyRandomAccessIterator _\u65f6\u6709\u4e0d\u540c\u590d\u6742\u5ea6\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\uff0c\u6bcf\u4e2a iterator It \u90fd\u9700\u8981\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 iterator_traits<It> \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a iterator_category \uff0c\u5b83\u7528\u6765\u6807\u8bc6\u8fd9\u4e2a\u8fed\u4ee3\u5668\u6ee1\u8db3\u54ea\u79cd\u8981\u6c42\u3002\u5bf9\u4e8e\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u7c7b\u578b\uff0c iterator_traits \u6709\u5bf9\u5e94\u7684\u7279\u5316\uff0c\u5176 iterator_category \u4e3a random_access_iterator_tag \u3002 \u5728 lower_bound \u4e2d\uff0c\u4f7f\u7528 it + n \u8fd9\u6837\u7684\u64cd\u4f5c\u53ef\u80fd\u662f\u901a\u8fc7 std::advance(it, n) \u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e2a\u51fd\u6570\u5bf9\u4e8e\u4e0d\u540c\u7684 iterator_traits \u6709\u4e0d\u540c\u7684\u91cd\u8f7d\uff1b\u5bf9\u4e8e\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\uff0c\u5c31\u4f1a\u901a\u8fc7 it + n \u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u800c\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5219\u901a\u8fc7\u5faa\u73af\u5b9e\u73b0\u3002 3 \u8fed\u4ee3\u5668\u4f55\u5fc5\u662f\u8fed\u4ee3\u5668 \u00b6 \u6211\u4eec\u6765\u770b\u7b2c 3 \u4e2a\u95ee\u9898\uff01 sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a a. \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f b. \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \u6211\u4eec\u5148\u6765\u8ba8\u8bba a \u95ee\u9898\u3002 \u524d\u4e00\u8282\u4e2d\u6211\u4eec\u8ba8\u8bba\u8fc7\uff0c sort \u8981\u6c42\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u8fd9\u4e00\u8981\u6c42\u662f\u56e0\u4e3a sort \u7684\u5b9e\u73b0\u4e2d\u4f1a\u5305\u542b\u7c7b\u4f3c end - begin , it + n , *it \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e5f\u8ba8\u8bba\u8fc7\u4e86\uff0c\u6ee1\u8db3 LegacyRandomAccessIterator \u7684\u8fed\u4ee3\u5668\u9700\u8981\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\uff1b\u800c\u540c\u65f6\uff0c\u6307\u9488\u7c7b\u578b\u4e5f\u652f\u6301\u8fd9\u6837\u7684\u64cd\u4f5c\u3002 \u548c \u6574\u6d3b 1.3 \u4e2d\u7684\u4f8b\u5b50\u7c7b\u4f3c\uff0c\u5176\u5b9e\u53ea\u8981\u6211\u4eec\u4f20\u5165\u7684\u7c7b\u578b\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u5982\u679c\u7c7b\u578b\u5e76\u4e0d\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5219\u4f1a\u7f16\u8bd1\u9519\u8bef\uff0c\u4f8b\u5982\u7b2c 2 \u8282\u5f00\u5934\u6f14\u793a\u7528 sort \u5bf9 map \u7684 begin \u548c end \u6392\u5e8f\u5176\u5b9e\u62a5\u7684\u9519\u5c31\u662f\u201c\u5e76\u6ca1\u6709\u8fd9\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684 - \u8fd0\u7b97\u201d\uff1a \u4e3a\u4e86\u8fdb\u4e00\u6b65\u89e3\u91ca\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u5c0f\u7684 demo\uff1a \uff08\u53ef\u4ee5\u5728 https://godbolt.org/z/Peh17Ye5o \u91cc\u73a9\u4e00\u4e0b\uff09 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u7684 demo \u7528\u5230\u4e86\u524d\u8ff0\u4e09\u79cd\u64cd\u4f5c\uff0c\u800c 15 \u548c 16 \u884c\u7528\u6307\u9488\u548c vector \u7684\u8fed\u4ee3\u5668\u8c03\u7528\u5b83\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\u901a\u8fc7\uff1b\u4f46\u662f 17 \u884c\u5c31\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff1a \u6240\u4ee5\u8bf4\uff0c sort \u65e2\u9002\u7528\u4e8e\u4f20\u7edf\u6570\u7ec4\uff0c\u4e5f\u9002\u7528\u4e8e vector \u7b49\u5bb9\u5668\u662f\u81ea\u7136\u7684\uff1a\u6307\u9488\u548c\u6ee1\u8db3 LegacyRandomAccessIterator \u7684\u8fed\u4ee3\u5668\u90fd\u652f\u6301 sort \u51fd\u6570\u91cc\u7528\u5230\u7684\u5404\u79cd\u8fd0\u7b97\uff0c\u56e0\u6b64\u81ea\u7136\u5c31\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u6c42 sort \u4f20\u5165\u7684\u7c7b\u578b\u6ee1\u8db3 LegacyRandomAccessIterator \u5e76\u4e0d\u662f\u4e00\u4e2a\u524d\u63d0\uff0c\u800c\u662f\u4e00\u4e2a \u7ed3\u679c \u2014\u2014 \u6211\u4eec\u628a sort \u4ee5\u53ca\u548c\u5b83\u7c7b\u4f3c\u7684\u51fd\u6570\uff0c\u5bf9\u4f20\u5165\u53c2\u6570\u7c7b\u578b\u201c\u80fd\u591f\u5728 \u5e38\u6570 \u65f6\u95f4\u5185\u79fb\u52a8\u4ece\u800c\u6307\u5411 \u4efb\u4e00 \u5143\u7d20\u7684\u51fd\u6570\u201d\u7684\u8981\u6c42\u8d77\u4e86\u4e2a\u540d\u5b57\uff0c\u53eb\u505a LegacyRandomAccessIterator \u3002\u800c\u8fd9\u79cd\u8981\u6c42\u5728\u8bed\u8a00\u4e2d\u7684\u4f53\u73b0\uff0c\u4e5f\u5e76\u4e0d\u662f\u4f7f\u7528\u4e13\u95e8\u7684 tag \u6765\u6807\u8bb0\u67d0\u4e2a\u8fed\u4ee3\u5668\u7b26\u5408\u4ec0\u4e48\u6837\u7684\u5177\u540d\u8981\u6c42\uff0c\u800c\u53ea\u662f\u4e0d\u7b26\u5408\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b\u81ea\u7136\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5bf9\u5e94\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u8981\u6c42\u6240\u8bf4\u660e\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 \u8865\u5145 3.1 \u8fd9\u5176\u5b9e\u5c31\u518d\u6b21\u5411\u6211\u4eec\u5c55\u73b0\u4e86 template \u6240\u652f\u6301\u7684\u6cdb\u578b\u7f16\u7a0b\u7684\u610f\u4e49\u2014\u2014\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5141\u8bb8\u6211\u4eec\u5199\u4e00\u4e2a\u652f\u6301\u67d0\u4e00\u7c7b\u578b\uff08\u57fa\u7c7b\uff09\u4ee5\u53ca\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u578b\u7684\u5176\u4ed6\u7c7b\u578b\uff08\u5b50\u7c7b\uff09\u7684\u51fd\u6570\uff1b\u800c\u6cdb\u578b\u7f16\u7a0b\u5219\u5141\u8bb8\u6211\u4eec\u5199\u4e00\u4e2a\u652f\u6301\u6ee1\u8db3\u67d0\u4e00\u6761\u4ef6\uff08\u62e5\u6709\u67d0\u4e9b\u7279\u5b9a\u6210\u5458\uff09\u7684\u6240\u6709\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7ee7\u627f\u548c\u591a\u6001\u6765\u5c06\u4e0d\u540c\u7684\u7c7b\u578b\u62bd\u8c61\u8d77\u6765\uff0c\u7528\u201c\u5b50\u7c7b\u5bf9\u8c61\u662f\u4e00\u4e2a\u7236\u7c7b\u5bf9\u8c61\u201d\u7684\u903b\u8f91\u6765\u5728\u9700\u8981\u65f6\u628a\u5b50\u7c7b\u5bf9\u8c61\u5f53\u505a\u7236\u7c7b\u5bf9\u8c61\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u548c\u91cd\u7528\u5ea6\uff1b\u800c\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7c7b\u4f3c\u4e0a\u6587\u4e2d sort \u7684\u65b9\u5f0f\uff0c\u5c06\u4e0d\u540c\u7c7b\u578b\u5171\u540c\u5177\u6709\u7684\u4e00\u4e9b\u51fd\u6570\u6216\u5b57\u6bb5\u4f5c\u4e3a\u8981\u6c42\u3002\u5373\uff0c\u9762\u5411\u5bf9\u8c61\u7684\u51fd\u6570\u6240\u63d0\u51fa\u7684\u8981\u6c42\u662f \"is\"\uff0c\u800c\u6cdb\u578b\u7f16\u7a0b\u7684\u51fd\u6570\u6240\u63d0\u51fa\u7684\u8981\u6c42\u662f \"has\"\u3002\u8fd9\u4e5f\u662f\u6cdb\u578b\u7f16\u7a0b\u76f8\u6bd4\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6765\u8bf4\u66f4\u52a0\u81ea\u7136\u4ee5\u53ca\u81ea\u7531\u4e4b\u5904\u3002 \u8865\u5145 3.2 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u53c8\u8981\u95ee\u4e86\u2014\u2014\u6cdb\u578b\u7f16\u7a0b\u7684\u903b\u8f91\u662f \"has\"\uff0c\u800c\u5728\u524d\u6587\u4e2d sort \u7684\u4f8b\u5b50\u91cc\uff0c\u5982\u679c\u5bf9\u5e94\u7c7b\u578b\u5e76\u4e0d \"has\" \u90a3\u4e9b\u8fd0\u7b97\u7b26\uff0c\u5c31\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5206\u5f00 \"has\" \u548c \"\u4e0d has\" \u4e24\u79cd\u60c5\u51b5\uff0c\u4f7f\u5b83\u4eec\u5206\u522b\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u91cd\u8f7d\uff0c\u600e\u4e48\u529e\u634f\uff1f\u8fd9\u65f6\u5c31\u9700\u8981\u4ecb\u7ecd\u4f1f\u5927\u7684 SFINAE (Substitution Fail Is Not An Error) \u6280\u672f\u4e86\u3002\u8fd9\u5e76\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\uff0c\u6211\u4eec\u4ee5\u540e\u6709\u673a\u4f1a\u7684\u8bdd\u53ef\u80fd\u4f1a\u5c55\u5f00\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u597d\u5947\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u4e00\u4e9b\u76f8\u5173\u7684\u8d44\u6599\uff1a https://en.cppreference.com/w/cpp/language/sfinae https://stackoverflow.com/questions/982808/c-sfinae-examples \u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba b \u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u76f8\u5bf9\u7b80\u5355\u3002 \u9996\u5148\u8ba8\u8bba\u6211\u4eec\u7ed9 sort \u4f20\u5165\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u6307\u9488\u7684\u60c5\u5f62\uff0c\u6211\u4eec\u91c7\u7528 \u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 \u4e2d\u7684\u4f8b\u5b50\uff1a bool cmp ( const int & a , const int & b ) { return a > b ; } vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), cmp ); \u5728 sort \u4e2d\uff0c\u6211\u4eec\u4f20\u5165\u7684 cmp \u88ab\u600e\u6837\u4f7f\u7528\u4e86\u5462\uff1f\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u6307\u9488 fp \u53ef\u4ee5\u901a\u8fc7 fp(args...) \u7684\u65b9\u5f0f\u76f4\u63a5\u8c03\u7528\uff1a \u90a3\u4e48\uff0c\u5176\u5b9e sort \u4e2d\u76f4\u63a5\u8c03\u7528 cmp(*it1, *it2) \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e24\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u4e86\uff01\u6240\u4ee5\uff0c sort \u7684\u51fd\u6570\u7b7e\u540d\u53ef\u4ee5\u662f\uff1a template < typename Iterator , typename CompFuncPtr > bool sort ( Iterator begin , Iterator end , CompFuncPtr cmp ) \u8fd9\u91cc\u7684\u6a21\u677f\u53c2\u6570 Iterator \u7528\u6765\u9002\u914d\u4e0d\u540c\u7684\u8fed\u4ee3\u5668\u7c7b\u578b\uff08\u5305\u62ec\u6307\u9488\uff09\uff1b\u800c CompFuncPtr \u7528\u6765\u9002\u914d\u4e0d\u540c\u7684\u6bd4\u8f83\u51fd\u6570\u6307\u9488\uff0c\u56e0\u4e3a\u6bd4\u8f83\u51fd\u6570\u6307\u9488\u7684\u7c7b\u578b\u56e0\u5176\u53c2\u6570\u7c7b\u578b\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u4e8b\u60c5\u8fd8\u6ca1\u7ed3\u675f\uff01\uff08\u8ba9\u6211\u4eec\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u8282\u2014\u2014\uff09 4 \u51fd\u6570\u53c8\u4f55\u5fc5\u662f\u51fd\u6570 \u00b6 \u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 \u4e2d\u7ed9\u51fa\u4e86 sort \u7684\u53e6\u4e00\u79cd\u4f7f\u7528\u793a\u4f8b\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), greater < int > ()); \u8fd9\u79cd\u5199\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u5347\u5e8f\u6392\u5217\u3002\u90a3\u4e48\u8fd9\u4e2a greater<int>() \u662f\u4ec0\u4e48\u5462\uff1f\u4e00\u79cd\u53ef\u80fd\u7684\u5b9e\u73b0\u957f\u8fd9\u6837\uff1a template < typename T > struct greater { bool operator ()( const T & lhs , const T & rhs ) { return lhs > rhs ; } }; \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c greater \u5176\u5b9e\u662f\u4e2a\u7ed3\u6784\u4f53\uff0c\u6216\u8005\u8bf4\u662f\u4e2a\u7c7b\uff1b\u5b83\u91cc\u9762\u6709\u4e00\u4e2a\u5bf9\u8fd0\u7b97\u7b26 () \u7684\u91cd\u8f7d\u3002 \u6807\u51c6 \u4e2d\u6307\u51fa\uff0c\u5982\u679c a \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48 a(b...) \u5176\u5b9e\u7b49\u540c\u4e8e (a).operator()(b...) \uff0c\u5176\u5b9e\u5c31\u662f\u5c06 b... \u4f5c\u4e3a\u53c2\u6570\u5217\u8868\uff0c\u8c03\u7528\u4e86 () \u8fd0\u7b97\u7b26\u3002\u6211\u4eec\u628a () \u8fd0\u7b97\u7b26\u79f0\u4e3a\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26 (function call operator)\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u8868\u793a\u51fd\u6570\u8c03\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a greater<T> \u7c7b\u7684\u5bf9\u8c61 cmp \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 cmp(a, b) \u6765\u8c03\u7528 (cmp).operator()(a, b) \uff0c\u4ece\u800c\u8fd4\u56de\u6bd4\u8f83\u7684\u7ed3\u679c\u3002 \u518d\u56de\u5230 sort(v.begin(), v.end(), greater<int>()); \u4e2d\u6765\u3002\u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u770b\u51fa\uff0c greater<int>() \u5176\u5b9e\u5c31\u662f\u8c03\u7528 greater<int> \u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6784\u9020\u4e86\u4e00\u4e2a greater<int> \u7c7b\u578b\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9 sort \u3002\u4e0d\u59a8\u8bbe\u5bf9\u5e94\u5f62\u53c2\u540d\u4e3a cmp \uff0c\u90a3\u4e48\u5728 sort \u4e2d\uff0c\u6211\u4eec\u5c31\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 cmp(a, b) \u6765\u8c03\u7528 greater<int> \u4e2d\u7684 operator () \u6765\u5b9e\u73b0\u6bd4\u8f83\u3002 \u6211\u4eec\u56de\u987e\u7b2c 3 \u8282\u4e2d\u5199\u51fa\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u7adf\u4ecd\u7136\u9002\u914d greater<int>() \u8fd9\u6837\u7684\u53c2\u6570\uff01 template < typename Iterator , typename CompFuncPtr > void sort ( Iterator begin , Iterator end , CompFuncPtr cmp ) \u8fd9\u91cc\u7684 CompFuncPtr \u73b0\u5728\u5e76\u4e0d\u662f\u4e00\u4e2a bool (*)(const T &, const T &) \u7684\u51fd\u6570\u6307\u9488\u4e86\uff0c\u800c\u662f greater<int> \u7c7b\u578b\uff0c\u800c cmp \u5219\u662f\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002\u5728 sort \u7684\u5b9e\u73b0\u4e2d\uff0c\u4ecd\u7136\u53ef\u4ee5\u50cf\u51fd\u6570\u6307\u9488\u4e00\u6837\u901a\u8fc7 cmp(a, b) \u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6bd4\u8f83\u3002\u5f53\u7136\uff0c CompFuncPtr \u8fd9\u4e2a\u540d\u5b57\u5c31\u4e0d\u592a\u59a5\u5f53\u4e86\uff0c\u56e0\u4e3a\u6bd4\u8f83\u5668\u4e0d\u4e00\u5b9a\u662f\u4e2a\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u540d\u4e3a Comparator \u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 sort(v.begin(), v.end()); \u6765\u5b9e\u73b0\u5347\u5e8f\u6392\u5e8f\u3002\u8fd9\u53c8\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff1f\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u91cd\u8f7d\u5373\u53ef\uff1a template < typename Iterator > void sort ( Iterator begin , Iterator end ) \u800c\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u7c7b\u4f3c sort(begin, end, less<decltype(*begin)>()); \u7684\u5199\u6cd5\uff0c\u5373\u4f7f\u7528 less<T>() \u6765\u4f5c\u4e3a\u6bd4\u8f83\u5668\u3002 \u8865\u5145 4.1 \u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\uff0c\u8fd9\u91cc\u5e76\u4e0d\u662f less<decltype(*begin)>() \u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u800c\u662f\u7c7b\u4f3c less<typename iterator_traits<Iterator>::value_type>() \u7684\u5199\u6cd5\u3002\u5373\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u5668\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 traits\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u8fed\u4ee3\u5668\u5bf9\u5e94\u7684\u503c\u7c7b\u578b\u3002\u672c\u6587\u5e76\u4e0d\u60f3\u5f15\u5165 traits \u7684\u6982\u5ff5\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u9605\u8d44\u6599\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u51fa\u7b2c 3 \u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff1a sort \u7684\u51fd\u6570\u7b7e\u540d\u53ef\u4ee5\u662f\uff1a template < typename Iterator > void sort ( Iterator begin , Iterator end ); template < typename Iterator , typename Comparator > bool sort ( Iterator begin , Iterator end , Comparator cmp ); \u8865\u5145 4.2 \u5b9e\u9645\u4e0a\uff0c\u67e5\u9605 \u6807\u51c6 \u53ef\u4ee5\u770b\u5230\uff0cC++17 \u8fd8\u5f15\u5165\u4e86\u4e24\u4e2a\u5305\u542b ExecutionPolicy \u7684\u7248\u672c\u3002\u8fd9\u4e2a\u548c\u672c\u6587\u7684\u4e3b\u9898\u65e0\u5173\uff08\u4e3b\u8981\u662f\u6211\u4e5f\u4e0d\u4f1a\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u884c\u7565\u8fc7\u3002 \u51fd\u6570\u5bf9\u8c61 (Function Object / Functor) \u00b6 \u5728\u8ba8\u8bba\u51fd\u6570\u5bf9\u8c61\u662f\u4ec0\u4e48\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0b\u4ec0\u4e48\u662f \u5bf9\u8c61 (object) \u3002\u5bf9\u8c61\u8981\u6709\u503c\u3001\u7c7b\u578b\u3001size\u3001\u751f\u547d\u5468\u671f\u7b49\u5c5e\u6027\uff0c\u63cf\u8ff0\u7684\u662f\u4e00\u5757\u5185\u5b58\u4e0a\u7684\u6570\u636e\u53ca\u5176\u542b\u4e49\u3002\u4e0b\u5217\u5e38\u89c1\u7684\u5b9e\u4f53\u4e0d\u662f\u5bf9\u8c61\uff1a struct / class\uff0c\u5305\u542b\u5176\u6a21\u677f\u53ca\u7279\u5316\uff0c\u5b83\u7528\u6765 \u63cf\u8ff0 \u4e00\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\u5b89\u6392\uff08\u867d\u7136\u5b83\u4eec\u53ef\u80fd\u5305\u542b\u865a\u51fd\u6570\u8868\uff09\uff1b struct / class \u7684\u975e static \u6210\u5458\u53d8\u91cf\uff1b function\uff0c\u5305\u542b\u5176\u6a21\u677f\u53ca\u7279\u5316\uff0c\u5b83\u662f\u4e00\u6bb5\u4ee3\u7801\uff1b reference\uff0c\u5b83\u53ea\u662f\u5df2\u6709\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u522b\u540d\uff0c\u7f16\u8bd1\u5668\u4e0d\u5fc5\u4e3a\u5b83\u4eec\u5206\u914d\u5185\u5b58\uff08\u56e0\u6b64\u4e0d\u5b58\u5728\u5f15\u7528\u6570\u7ec4\u3001\u5f15\u7528\u7684\u5f15\u7528\u548c\u6307\u5411\u5f15\u7528\u7684\u6307\u9488\uff09\uff1b\u7b49\u3002 \u4e0a\u8ff0\u5185\u5bb9\u66f4\u4e25\u8c28\u7684\u8868\u8ff0\u53c2\u89c1 https://en.cppreference.com/w/cpp/language/object \u3002 \u8bf7\u6ce8\u610f \uff1a\u4e0a\u8ff0\u201c\u5bf9\u8c61\u201d\u7684\u6982\u5ff5\u548c OOP \u4e2d\u201c\u5bf9\u8c61\u201d\u7684\u6982\u5ff5\u5e76\u4e0d\u4e00\u81f4\u3002\u5728 C++ \u7684\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\uff0c int \u548c int* \u662f\u5bf9\u8c61\u3002 \u4e0a\u9762\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e00\u4ef6\u4e8b\u2014\u2014\u51fd\u6570\u4e0d\u662f\u5bf9\u8c61\u3002\u4f46\u662f\uff0c\u5728\u4e0a\u8ff0\u5bf9\u95ee\u9898 3 \u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 2 \u79cd\u80fd\u591f\u88ab\u5f53\u6210\u51fd\u6570\u4f7f\u7528\u7684\u5bf9\u8c61\uff1a\u51fd\u6570\u6307\u9488\uff0c\u4ee5\u53ca\u91cd\u8f7d\u4e86 function call operator operator () \u7684\u7c7b\u7684\u5bf9\u8c61\u3002\u4e8b\u5b9e\u4e0a\uff0cC++ \u5c06\u4efb\u4f55\u5b9a\u4e49\u4e86 function call operator \u7684\u5bf9\u8c61\u7edf\u79f0\u4e3a \u51fd\u6570\u5bf9\u8c61 (Function Object) \u3002\u5177\u4f53\u6765\u8bf4\uff0c\u51fd\u6570\u5bf9\u8c61\u5305\u62ec\uff1a \u51fd\u6570\u6307\u9488\uff1b \u4efb\u4f55\u80fd\u591f\u8f6c\u5316\u5230\u51fd\u6570\u6307\u9488\u7684\u7c7b\u7684\u503c\uff08\u5982\u65e0\u72b6\u6001\uff0c\u5373\u6ca1\u6709\u6355\u83b7\u4efb\u4f55\u4e1c\u897f\u7684 lambda \u8868\u8fbe\u5f0f\uff09\uff1b \u4efb\u4f55\u91cd\u8f7d\u4e86 function call operator \u7684\u7c7b\u7684\u503c\uff08\u5982 lambda \u8868\u8fbe\u5f0f\uff09\u3002 \u8865\u5145 4.3 \u5f88\u591a\u4eba\u5c06\u51fd\u6570\u5bf9\u8c61\u79f0\u4e3a \u4eff\u51fd\u6570 (Functor) \uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u76f4\u81f3 C++20\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6807\u51c6\u4e2d \u4ece\u672a\u51fa\u73b0\u8fc7 \u3002\u6240\u4ee5\u8bf7\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u53e5 E(A...) \u65f6\uff0c E \u53ef\u4ee5\u662f\u51fd\u6570\u3001\u51fd\u6570\u5f15\u7528\u3001\u51fd\u6570\u5bf9\u8c61\uff0c\u6216\u8005\u5176\u4ed6\u503c\u4e3a\u51fd\u6570\u5f15\u7528\u6216\u51fd\u6570\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u7528\u6765\u8d4b\u503c\u6216\u8005\u4f5c\u4e3a\u53c2\u6570\u88ab\u4f20\u9012\u65f6\uff0c\u5982\u679c\u63a5\u6536\u65b9\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u4f1a\u53d1\u751f function-to-pointer \u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u88ab\u9690\u5f0f\u8f6c\u6362\u6210\u51fd\u6570\u6307\u9488\u3002\u56e0\u6b64\u5f53\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u88ab\u4f20\u9012\u65f6\uff0c\u63a5\u6536\u65b9\u8981\u4e48\u63a5\u6536\u5230\u4e00\u4e2a\u5f15\u7528\uff0c\u8981\u4e48\u63a5\u6536\u5230\u4e00\u4e2a\u6307\u9488\u3002 \u77e5\u9053\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u5f88\u591a\u79cd\u7ed9 sort \u4e4b\u7c7b\u7684\u51fd\u6570\u4f20\u9012\u51fd\u6570\u7684\u65b9\u5f0f\u4e86\uff01 \u8865\u5145 4.4 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u4f1a\u95ee\u4e86\u2014\u2014\u7b2c 15 \u884c\u4f20\u9012\u5f15\u7528\u4e3a\u4ec0\u4e48\u90a3\u4e48\u9ebb\u70e6\u5440\uff01\u5176\u5b9e\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u4e0d\u663e\u793a\u7ed9\u51fa\u6a21\u677f\u53c2\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u50cf 13 \u884c\u4e00\u6837\u88ab\u89e3\u91ca\u6210\u51fd\u6570\u6307\u9488\u800c\u4e0d\u662f\u51fd\u6570\u5f15\u7528\u3002\u8fd9\u662f\u56e0\u4e3a\u5e76\u4e0d\u5b58\u5728 funtion-to-reference \u7684\u9690\u5f0f\u8f6c\u6362\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u771f\u7684\u60f3\u8981\u8ba9\u5b83\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u90a3\u5c31\u53ea\u80fd\u663e\u5f0f\u5730\u5199\u51fa\u5176\u7c7b\u578b\uff1b\u5982\u679c\u5199 decltype(cmp1) \u7684\u8bdd\uff0c\u867d\u7136\u6a21\u677f\u53c2\u6570\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u4f20\u8fdb\u53bb\u7684\u5176\u5b9e\u8fd8\u662f\u4e2a\u51fd\u6570\u6307\u9488\u800c\u4e0d\u662f\u5f15\u7528\uff0c\u56e0\u4e3a\u51fd\u6570\u672c\u8eab\u4e0d\u662f\u5bf9\u8c61\uff0c\u6211\u4eec\u4e0d\u80fd\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f46\u662f\u5982\u679c\u5199 decltype(*cmp1) \u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u4f20\u8fdb\u53bb\u7684\u5c31\u662f\u4e00\u4e2a\u5f15\u7528\u4e86\u3002 \u5f53\u7136\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 bool (&)(const int &, const int &) \u3002 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u53c8\u4f1a\u95ee\u4e86\u2014\u2014\u4e3a\u4ec0\u4e48\u7b2c 15 \u884c\u4f20\u9012\u5f15\u7528\u5199 cmp1 \u800c\u4e0d\u662f *cmp1 \u5440\uff01\u5176\u5b9e\u5199 *cmp1 \u4e5f\u884c\uff0c\u4f46\u662f cmp1 \u66f4\u81ea\u7136\u3002 *cmp1 \u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\u89e3\u5f15\u7528\uff0c\u56e0\u6b64\u6b64\u65f6 cmp1 \u4f1a\u88ab\u9690\u5f0f\u8f6c\u6362\u6210\u51fd\u6570\u6307\u9488\uff0c\u89e3\u5f15\u7528\u4e4b\u540e\u5f97\u5230\u6307\u5411 cmp1 \u7684\u4e00\u4e2a\u5de6\u503c\uff1b\u4e5f\u5c31\u662f\u8bf4 *cmp1 \u548c cmp1 \u5176\u5b9e\u8fd8\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\u4e5f\u662f\u540c\u6837\u7684\u539f\u7406\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5199 *********cmp1 \uff0c\u5176\u5b9e\u5c31\u662f\u53cd\u590d\u89e6\u53d1 function-to-pointer \u548c\u89e3\u5f15\u7528\u3002\u4f8b\u5982\uff1a \u8865\u5145 4.5 \u51fd\u6570\u5bf9\u8c61\u9664\u4e86\u80fd\u591f\u7528\u6765\u5c06\u51fd\u6570\u5f53\u505a\u53c2\u6570\u4f20\u9012\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u6784\u9020\u95ed\u5305 (closure)\u3002\u95ed\u5305\u5728\u51fd\u6570\u4e4b\u5916\uff0c\u8fd8\u80fd\u591f\u901a\u8fc7\u6210\u5458\u53d8\u91cf\u4fdd\u5b58\u4e00\u4e9b\u72b6\u6001\uff1b\u4e14\u4e0d\u540c\u4e8e\u51fd\u6570\u5185\u90e8 static \u53d8\u91cf\u7684\u662f\uff0c\u62e5\u6709\u7edf\u4e00\u51fd\u6570\u4f53\u7684\u4e0d\u540c\u51fd\u6570\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u7684\u72b6\u6001\u3002\u8fd9\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u5e76\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002\u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u4ee5\u81ea\u884c\u8fdb\u4e00\u6b65\u63a2\u7d22\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5230\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u5566\uff01 \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f priority_queue \u662f\u4e00\u4e2a\u6a21\u677f\u7c7b\uff1b\u5b83\u548c sort \u7684\u6700\u5927\u533a\u522b\u662f\uff0c\u4f20\u5165\u7684\u6bd4\u8f83\u51fd\u6570\u9700\u8981\u4f5c\u4e3a\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u5b58\u5728\u5b9e\u4f8b\u5f53\u4e2d\u3002\u5173\u952e\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a template < class T , class Container = std :: vector < T > , class Compare = std :: less < typename Container :: value_type > > class priority_queue { public : priority_queue () : priority_queue ( Compare (), Container ()) { } explicit priority_queue ( const Compare & compare ) : priority_queue ( compare , Container ()) { } priority_queue ( const Compare & compare , Container && cont ); /* ... Many Other Constructors and Other Members ... */ } \u53ef\u4ee5\u770b\u5230\uff0cpriority_queue \u63a5\u6536 3 \u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5206\u522b\u89c4\u5b9a\u4e86\u5185\u90e8\u5143\u7d20\u7c7b\u578b\u3001\u5e95\u5c42\u5bb9\u5668\u7c7b\u578b\u548c\u6bd4\u8f83\u5668\uff1b\u5176\u4e2d\u5e95\u5c42\u5bb9\u5668\u7c7b\u578b\u9ed8\u8ba4\u4e3a std::vector<T> \uff0c\u800c\u6bd4\u8f83\u5668\u53ef\u4ee5\u8ba4\u4e3a\u9ed8\u8ba4\u4e3a std::less<T> \u3002 \u7b2c 9 \u884c\u7684\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6bd4\u8f83\u5668\u5bf9\u8c61\u548c\u4e00\u4e2a\u5bb9\u5668\u5bf9\u8c61\uff0c\u5b83\u4eec\u5c06\u4f1a\u4f5c\u4e3a\u6784\u9020\u51fa\u7684\u5b9e\u4f8b\u7684\u6210\u5458\u3002 \u5f53\u6211\u4eec\u5199\u7c7b\u4f3c priority_queue<int> pq; \u7684\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u663e\u5f0f\u6307\u5b9a T \u4e3a int \uff0c\u5176\u4ed6\u53c2\u6570\u4e3a\u9ed8\u8ba4\u503c\uff0c\u5e76\u8c03\u7528\u4e86\u7b2c 6 \u884c\u7684\u6784\u9020\u51fd\u6570\uff1b\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u8c03\u7528\u4e86 Container \u548c Compare \u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528\u7b2c 9 \u884c\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ece\u800c\u6784\u9020\u51fa\u4e86\u672c\u5b9e\u4f8b\u7684\u6bd4\u8f83\u5668\u5bf9\u8c61\u548c\u5bb9\u5668\u5bf9\u8c61\u3002 \u5f53\u6211\u4eec\u5199\u7c7b\u4f3c priority_queue<int, vector<int>, decltype(lambda)> pq(lambda); \u7684\u4ee3\u7801\u65f6\uff08 lambda \u662f\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff09\uff0c\u5176\u5b9e\u5c31\u662f\u663e\u5f0f\u5730\u8bf4\u660e\u4e86\u6a21\u677f\u53c2\u6570\uff0c\u5e76\u8c03\u7528\u7b2c 7 \u884c\u7684\u6784\u9020\u51fd\u6570\uff0c\u5c06\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u4f5c\u4e3a\u672c\u5b9e\u4f8b\u7684\u6bd4\u8f83\u5668\u5bf9\u8c61\u3002\u5bb9\u5668\u5bf9\u8c61\u4ecd\u7136\u662f\u8c03\u7528\u5bf9\u5e94\u6784\u9020\u51fd\u6570\u6784\u9020\u7684\u3002 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u7ed9 priority_queue \u7b49\u5bb9\u5668\u4f20\u6bd4\u8f83\u5668\u7684\u65b9\u5f0f\uff01 \u8865\u5145 4.6 \u4e0a\u56fe\u4e2d (4) \u7684\u5199\u6cd5\u4f1a\u62a5\u8fd9\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1a \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc _Compare \u5373 decltype(func) \u5373 bool (const int &, const int &) \u662f\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u3002 5 \u603b\u7ed3 \u00b6 \u6211\u4eec\u56de\u987e\u6587\u9996\u63d0\u51fa\u7684\u51e0\u4e2a\u95ee\u9898\uff0c\u5176\u5b9e\u5b83\u4eec\u5faa\u5e8f\u6e10\u8fdb\uff0c\u6784\u6210\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u8109\u7edc\u3002\u6211\u4eec\u6807\u6ce8\u51fa\u5b83\u4eec\u5206\u522b\u5f15\u51fa\u4e86\u4ec0\u4e48\u7279\u6027\uff0c\u5e2e\u52a9\u5927\u5bb6\u56de\u987e\u548c\u590d\u4e60\uff1a \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for (auto &a : c) \u7684\u65b9\u5f0f\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u3002\u8fd9\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \uff08\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff09 \u6211\u4eec\u77e5\u9053 map \u662f\u80fd\u591f\u7528\u4e0a\u8ff0\u65b9\u5f0f\u904d\u5386\u7684\u3002\u5bf9\u4e8e map<int, int> m; \uff0c\u6211\u4eec\u4f7f\u7528 sort(m.begin(), m.end()); \u53ef\u4ee5\u5417\uff1f \uff08\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\uff09 sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f \uff08\u4f60\u7684\u8fed\u4ee3\u5668\u4f55\u5fc5\u662f\u8fed\u4ee3\u5668\uff1f\u2014\u2014\u53ea\u8981\u5b83\u6709 ++ \u548c * \u4e4b\u7c7b\u7684\u57fa\u672c\u529f\u80fd\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u5f53\u6210\u8fed\u4ee3\u5668\u7528\uff09 \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \uff08\u5f15\u5165\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u5b9e\u73b0\uff09 \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f \uff08\u65e2\u7136\u8fed\u4ee3\u5668\u4e0d\u4e00\u5b9a\u662f\u8fed\u4ee3\u5668\uff0c\u90a3\u51fd\u6570\u4e00\u5b9a\u662f\u51fd\u6570\u5417\uff1f\u2014\u2014\u53ea\u8981\u5b83\u6709 () \uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u5f53\u6210\u51fd\u6570\u7528\uff09 References \u00b6 https://stackoverflow.com/questions/5606973/understanding-iterators-in-the-stl/5607206#5607206 https://en.cppreference.com/w/cpp/language/range-for#Explanation https://en.cppreference.com/w/cpp/named_req/Iterator https://stackoverflow.com/a/22444975/14430730 https://en.cppreference.com/w/cpp/utility/functional/greater https://github.com/llvm/llvm-project/blob/e7fc254875ca9e82b899d5354fae9b5b779ff485/libcxx/include/__algorithm/sort.h#L264 https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950 https://cppdepend.com/blog/?p=729 https://en.cppreference.com/w/cpp/language/functions https://en.cppreference.com/w/cpp/utility/functional http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf","title":"\u7406\u89e3 STL \u2014\u2014 \u8fed\u4ee3\u5668\u4e0e\u51fd\u6570\u5bf9\u8c61"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#0-quiz-\u65f6\u95f4","text":"\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u629b\u51fa\u82e5\u5e72\u95ee\u9898\u4f9b\u5927\u5bb6\u601d\u8003\uff1b\u8fd9\u5176\u4e2d\u7684\u95ee\u9898\u751a\u81f3\u5305\u62ec\u6211\u5728\u9762\u8bd5\u4e2d\u9047\u5230\u7684\u539f\u9898\u5594\uff01\uff08\u4f60\u5982\u679c\u77e5\u9053\u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4e0d\u7528\u770b\u8fd9\u7bc7\u6587\u7ae0\u4e86 XD\uff09 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for (auto &a : c) \u7684\u65b9\u5f0f\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u3002\u8fd9\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \u6211\u4eec\u77e5\u9053 map \u662f\u80fd\u591f\u7528\u4e0a\u8ff0\u65b9\u5f0f\u904d\u5386\u7684\u3002\u5bf9\u4e8e map<int, int> m; \uff0c\u6211\u4eec\u4f7f\u7528 sort(m.begin(), m.end()); \u53ef\u4ee5\u5417\uff1f sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f","title":"0 Quiz \u65f6\u95f4\uff01"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#1-why-\u8fed\u4ee3\u5668","text":"\u6211\u4eec\u5148\u6765\u770b\u770b\u7b2c 1 \u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48 for (auto &a : c) \u53ef\u4ee5\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u5462\uff1f\u904d\u5386 vector \u7684\u65b9\u6cd5\u5176\u5b9e\u975e\u5e38\u5bb9\u6613\u7406\u89e3\uff0c\u7c7b\u4f3c\u4e8e for (int i = 0; i < c.size(); i++) \u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0cset \u662f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\uff0c\u7ea2\u9ed1\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff1b\u904d\u5386\u8fd9\u6837\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u548c\u904d\u5386\u4e00\u4e2a\u6570\u7ec4\u7684\u65b9\u6cd5\u80af\u5b9a\u662f\u4e0d\u4e00\u6837\u7684\u3002\u8fd9\u600e\u4e48\u529e\u5462\uff1f \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9e\u73b0\uff1a for (auto i = c.begin(); i != c.end(); c.go_to_next_node(i)) \uff1b\u5176\u4e2d c.begin() \u548c c.end() \u53ef\u4ee5\u662f\u6307\u9488\uff0c\u5206\u522b\u6307\u5411\u5bb9\u5668\u91cc \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7684\u4f4d\u7f6e\uff0c\u5373\u6700\u5c0f\u548c\u6700\u5927\u7684\u5143\u7d20\uff1b\u800c c.go_to_next_node(i) \u5b9e\u73b0\u6839\u636e\u8fd9\u4e2a\u6307\u9488\u627e\u5230\u5176\u4e0b\u4e00\u4e2a\u5143\u7d20\uff08\u5b66\u8fc7\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5c0f\u670b\u53cb\u4eec\u5e94\u8be5\u80fd\u591f\u60f3\u5230\u8fd9\u4e2a\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1b\u4e0d\u77e5\u9053\u4e5f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u4eca\u5929\u7684\u91cd\u70b9\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e00\u4e2a set \u7684\u904d\u5386\u4e86\u3002 \u8fd9\u65f6\u56de\u5934\u770b\u770b\u6211\u4eec\u5bf9 vector \u7684\u904d\u5386\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u4f3c\u4e4e vector \u4e5f\u80fd\u5199\u6210\u540e\u9762\u8fd9\u79cd\u5f62\u5f0f\uff0c\u5373 for (auto i = c.begin(); i != c.end(); c.go_to_next_node(i)) \uff1a c.begin() \u548c c.end() \u4ecd\u7136\u5206\u522b\u6307\u5411\u5bb9\u5668\u91cc \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7684\u4f4d\u7f6e\uff0c\u800c c.go_to_next_node(i) \u5e72\u7684\u4e8b\u60c5\u53ea\u662f\u6307\u9488\u7684 ++ \u800c\u5df2\u3002 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u4e00\u5b9a\u80fd\u53d1\u73b0\uff0c\u8fd9\u79cd\u904d\u5386\u7684\u5173\u952e\u53ea\u6709 3 \u70b9\uff1a\u4ece\u54ea\u91cc\u5f00\u59cb\u3001\u5230\u54ea\u91cc\u7ed3\u675f\u3001\u600e\u4e48\u8d70\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\uff1b\u8fd9\u5b9e\u9645\u4e0a\u5c31\u5bf9\u5e94\u7740\u4e24\u4e2a\u6307\u9488\u4ee5\u53ca\u6211\u4eec\u719f\u6089\u7684\u6307\u9488\u7684 ++ \u8fd0\u7b97\u7b26\u3002\u806a\u660e\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u80fd\u5c31\u60f3\u5230\u4e86\uff1a\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u6837\u7684\u6307\u9488\u5305\u88c5\u6210\u4e00\u4e2a\u7c7b\uff0c\u5e76\u91cd\u8f7d\u5b83\u7684 ++ \u8fd0\u7b97\u7b26\uff08\u8fd9\u91cc\u6307\u524d\u7f6e\u7684 ++ \uff0c\u4e0b\u540c\uff09\uff0c\u8fd9\u6837\u4e0d\u540c\u7684\u5bb9\u5668\u5c31\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u904d\u5386\u6216\u8005\u505a\u5176\u4ed6\u64cd\u4f5c\u4e86\uff01 \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5c31\u662f \u8fed\u4ee3\u5668 (Iterator) \u89e3\u51b3\u7684\u95ee\u9898\u3002\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u5199\u7a0b\u5e8f\u7684\u76ee\u7684\u5c31\u662f \u5904\u7406\u3001\u67e5\u8be2\u3001\u4f7f\u7528\u6570\u636e \uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u6211\u4eec\u7684\u5de5\u5177\u3002 \u5728\u6982\u5ff5\u5c42\u9762\u4e0a \uff0c\u5404\u79cd\u5bb9\u5668\u6216\u8005\u6570\u636e\u7ed3\u6784\u7684\u610f\u4e49\u662f\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u6216\u8005\u6027\u8d28 \u5bb9\u7eb3 \u6570\u636e\uff0c\u4f46\u662f\u5b83\u672c\u8eab\u4e0d\u5177\u5907\u5904\u7406\u6570\u636e\u7684\u80fd\u529b\uff1b\u800c\u5404\u79cd\u7b97\u6cd5\u7684\u610f\u4e49\u662f\u6309\u4e00\u5b9a\u7684\u65b9\u6cd5 \u5904\u7406 \u6570\u636e\uff0c\u5b83\u672c\u8eab\u5e76\u4e0d\u6301\u6709\u4efb\u4f55\u6570\u636e\u3002\u800c\u8fed\u4ee3\u5668\u5c31\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u6865\u6881\u2014\u2014\u4e00\u4e2a\u5bb9\u5668\u53ef\u80fd\u662f\u4e00\u4e2a\u6570\u7ec4\u3001\u4e00\u68f5\u4e8c\u53c9\u6811\u3001\u4e00\u4e2a\u94fe\u8868\uff0c\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u53ef\u80fd\u7684\u6570\u636e\u7ed3\u6784\uff1b\u4e00\u79cd\u7b97\u6cd5\u9700\u8981\u5bf9\u5bb9\u5668\u505a\u904d\u5386\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u7684\u8bbf\u95ee\uff1b\u4f46\u662f\u904d\u5386\u4e00\u4e2a\u6570\u7ec4\u548c\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u65b9\u5f0f\u80af\u5b9a\u662f\u4e0d\u540c\u7684\u2014\u2014\u8fed\u4ee3\u5668\u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u901a\u8fc7\u8fd0\u7b97\u7b26\u91cd\u8f7d\u6216\u8005\u5176\u4ed6\u65b9\u5f0f\uff0c\u6765\u5411\u7b97\u6cd5\u9690\u85cf\u5bb9\u5668\u7684\u4e0d\u540c\u7ec6\u8282\uff1b\u7b97\u6cd5\u53ea\u9700\u8981\u4f7f\u7528 ++ \u5c31\u80fd\u83b7\u5f97\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7 * \u5c31\u80fd\u8bbf\u95ee\u5f53\u524d\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\uff0c\u5b83\u4e0d\u9700\u8981\u5173\u5fc3\u5230\u5e95\u662f\u5982\u4f55\u8bbf\u95ee\u7684\uff1b\u8fd9\u5176\u5b9e\u4e0a\u5c31\u662f\u6307\u9488\u7684\u62bd\u8c61\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0cSTL \u4fdd\u6301\u4e86\u5b83\u7684\u7b80\u6d01\u6027\uff0c\u63d0\u5347\u4e86\u4ee3\u7801\u7684\u590d\u7528\u3002 \u8865\u5145 1.1 \u4e3a\u4ec0\u4e48\u8bf4\u662f \u201c\u5728\u6982\u5ff5\u5c42\u9762\u4e0a\u201d \u5462\uff1f\u56e0\u4e3a\u5728\u5b9e\u9645\u7684\u5b9e\u73b0\u4e2d\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\u6216\u8005\u6613\u7528\u6027\uff0c\u4e00\u4e9b\u5bb9\u5668\u4e5f\u5c06\u4e00\u4e9b\u7b97\u6cd5\u653e\u5230\u4e86\u81ea\u5df1\u7684\u6210\u5458\u51fd\u6570\u4e2d\uff0c\u4f8b\u5982 map \u548c set \u7684 lower_bound \u7b49\u3002\u4f46\u662f\u4ece\u6982\u5ff5\u89d2\u5ea6\u4e0a\uff0c\u5bb9\u5668\u5c31\u4ec5\u4ec5\u662f\u4e2a\u5305\u88c5\u597d\u4e86\u7684\u6570\u636e\u7ed3\u6784\u800c\u5df2\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u5176\u5b9e\u4e5f\u5c31\u77e5\u9053\u4e86 for (auto &a : c) \u662f\u5982\u4f55\u5b9e\u73b0\u7684\u4e86\uff01\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u6709\u8fed\u4ee3\u5668\u7684\u5bb9\u5668\uff08stack, queue, priority_queue \u5e76\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u56e0\u4e3a\u4f60\u4e0d\u5e94\u5f53\u5c1d\u8bd5\u53bb\u904d\u5386\u6216\u8005\u4ee5\u5176\u4ed6\u81ea\u7531\u7684\u5f62\u5f0f\u8bbf\u95ee\u8fd9\u4e9b\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff09\uff0c\u5b83\u7684\u6210\u5458\u51fd\u6570 begin() \u548c end() \u8fd4\u56de\u7684\u90fd\u662f\u67d0\u79cd\u8fed\u4ee3\u5668\uff1b\u8fd9\u4e9b\u8fed\u4ee3\u5668\u90fd\u91cd\u8f7d\u4e86 ++ \u8fd0\u7b97\u7b26\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5bb9\u5668\uff0c\u5b9e\u73b0 ++ \u8fd0\u7b97\u7b26\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u6574\u4e2a\u5bb9\u5668\u7684\u7ed3\u6784\uff1b\u4f8b\u5982\u5728\u7ea2\u9ed1\u6811\u4e2d\u627e\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e0d\u5fc5\u77e5\u9053\u6839\u8282\u70b9\u662f\u4ec0\u4e48\u3002\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8fd9\u6837\u5305\u542b\u6210\u5458\u51fd\u6570 begin() \u548c end() \uff0c\u4e14\u5176\u8fd4\u56de\u503c\u7c7b\u578b\u652f\u6301\u8fd0\u7b97\u7b26 ++ \u3001 * \u548c != \u7684\u7c7b\uff0c for (auto &a : c) {/* A */} \u7684\u5b9e\u73b0\u65b9\u6cd5\u5c31\u7c7b\u4f3c\u4e8e\uff1a for (auto it = c.begin(); it != c.end(); ++it) {auto &a = *it; /* A */} \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u5176\u5b9e\u548c\u6211\u4eec\u521a\u521a\u7684\u60f3\u6cd5\u975e\u5e38\u76f8\u4f3c\uff01 \u8865\u5145 1.2 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e std::vector<int> v; \uff0c v.begin() \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u53ef\u80fd\u662f __gnu_cxx::__normal_iterator<int*, std::vector<int>> \uff1b\u5bf9\u4e8e std::map<int, double> m; \uff0c m.begin() \u7684\u8fd4\u56de\u503c\u7c7b\u578b\u53ef\u80fd\u662f std::_Rb_tree_iterator<std::pair<const int, double>> \u3002\u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u81ea\u5df1\u5728 https://godbolt.org/z/6s5x66rdG \u5c1d\u8bd5\uff08\u8fd9\u91cc\u4e5f\u5c55\u793a\u4e86\u4e00\u79cd\u67e5\u770b\u8868\u8fbe\u5f0f\u7c7b\u578b\u7684\u5c0f\u6280\u5de7\uff09\uff01 \u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ Insights \u6765\u67e5\u770b\uff1a https://cppinsights.io/s/cd95e24b \u6574\u6d3b 1.3 \u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u4f7f\u7528\u8fd9\u79cd range-based for loop\uff0c\u53ea\u9700\u8981\u7c7b\u201c\u5305\u542b\u6210\u5458\u51fd\u6570 begin() \u548c end() \uff0c\u4e14\u5176\u8fd4\u56de\u503c\u7c7b\u578b\u652f\u6301\u8fd0\u7b97\u7b26 ++ \u3001 * \u548c != \u201d\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u8fd9\u6837\u7684\u4ee3\u7801 XD\uff1a \u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u6765\u73a9\u4e00\u73a9\uff1a https://godbolt.org/z/813b9e9Pd \u8865\u5145 1.4 \u53e6\u5916\uff0c\u9664\u4e86 begin() \uff0c\u5bb9\u5668\u8fd8\u4f1a\u63d0\u4f9b cbegin() , rbegin() , crbegin() \u8fd9\u4e09\u79cd\u6210\u5458\u51fd\u6570\uff0c\u63d0\u4f9b\u4e0d\u540c\u7684\u8fed\u4ee3\u5668\uff1b\u4e5f\u6709\u5bf9\u5e94\u7684 end() \u7248\u672c\u3002\u8fd9\u91cc c \u662f\u6307 const\uff0c\u5373\u8fed\u4ee3\u5668\u6307\u5411\u7684\u53d8\u91cf\u662f\u53ea\u8bfb\u7684\uff1b r \u662f\u6307 reverse\uff0c\u5373\u8fd9\u79cd\u8fed\u4ee3\u5668\u662f\u9006\u5e8f\u7684\uff0c\u5373\uff1a","title":"1 Why \u8fed\u4ee3\u5668"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#2-\u8fed\u4ee3\u5668\u7684\u5206\u7c7b","text":"\u6211\u4eec\u4e0b\u9762\u518d\u6765\u770b\u7b2c 2 \u4e2a\u95ee\u9898\uff1a\u5df2\u77e5 map \u53ef\u4ee5\u904d\u5386\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u662f\u6709\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u7684\uff1b\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 sort \u5bf9 map \u8fdb\u884c\u6392\u5e8f\u5417\uff1f \u4f17\u6240\u5468\u77e5\uff0csort \u7684\u5b9e\u73b0\u672c\u8d28\u4e0a\u662f\u5feb\u901f\u6392\u5e8f\uff08\u5b9e\u9645\u4e0a\u4e0d\u5b8c\u5168\u662f\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \uff09\uff1b\u800c\u5feb\u901f\u6392\u5e8f\u672c\u8eab\u662f\u9700\u8981 \u968f\u673a\u8bbf\u95ee \u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u7684\uff0c\u5373\u80fd\u591f\u4ee5 \\(O(1)\\) \u7684\u65f6\u95f4\u4f7f\u7528\u7c7b\u4f3c c[i] \u7684\u65b9\u5f0f\u8bbf\u95ee\u5230\u5bb9\u5668\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff1b\u540c\u65f6\u4e5f\u9700\u8981\u80fd\u591f\u4ee5 \\(O(1)\\) \u7684\u65f6\u95f4\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684 \u8ddd\u79bb \u3002\u4f46\u662f\uff0cmap \u672c\u8eab\u5e76\u4e0d\u80fd\u591f\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5927\u5bb6\u5c1d\u8bd5\u5199\u7528 sort \u5bf9 map \u6392\u5e8f\u7684\u4ee3\u7801\u5c31\u4f1a\u53d1\u73b0\u8fd9\u6837\u7684\u62a5\u9519\uff1a \u5b83\u544a\u8bc9\u6211\u4eec\uff0c std::_Rb_tree_iterator<...> \u4e4b\u95f4\u7684 - \u8fd0\u7b97\u7b26\u5e76\u6ca1\u6709\u88ab\u5b9a\u4e49\uff1b\u5373 map \u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5e76\u4e0d\u652f\u6301\u8ba1\u7b97\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u8ddd\u79bb\u7684\u529f\u80fd\u3002 \u4e8b\u5b9e\u4e0a\uff0cC++ \u5bf9\u8fed\u4ee3\u5668\u4f5c\u4e86\u82e5\u5e72\u5206\u7c7b\uff08\u786e\u5207\u5730\u8bf4\uff0c\u662f \u5177\u540d\u8981\u6c42 named requirements \uff09\uff0c\u4e0d\u540c\u7684\u7b97\u6cd5\u4e5f\u5bf9\u6240\u9700\u7684\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\u505a\u4e86\u4e0d\u540c\u7684\u8981\u6c42\u3002\u6211\u4eec\u8f83\u4e3a\u901a\u4fd7\u5730\u6982\u62ec\u5404\u7c7b\u8fed\u4ee3\u5668\u6240\u652f\u6301\u7684\u529f\u80fd\uff08\u53ef\u80fd\u5b58\u5728\u4e0d\u591f\u5b8c\u6574\u548c\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u4f46\u662f\u7406\u89e3\u4e3a\u4e3b\uff09\uff1a Legacy Input Iterator - \u80fd\u591f\u7528\u6765\u6807\u8bc6\u3001 \u904d\u5386 \u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u80fd\u591f\u4ece\u6240\u6307\u7684\u5143\u7d20\u4e2d \u8bfb\u53d6 \u503c\u3002 \u6ce8\uff1a LegacyInputIterator \u53ea\u9700\u8981\u4fdd\u8bc1 \u5355\u8d9f \u7b97\u6cd5\u7684\u6709\u6548\u6027\uff1a\u4e00\u65e6\u4e00\u4e2a LegacyInputIterator it \u88ab ++ \u540e\uff0c\u5b83\u4e4b\u524d\u6240\u6307\u7684\u503c\u53ca\u5176\u6240\u6709\u62f7\u8d1d\u90fd\u4e0d\u518d\u9700\u8981\u4fdd\u8bc1\u6709\u6548\u6027 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b\u7684 It \u9700\u8981\u652f\u6301\uff1a ++it \uff08\u8fd4\u56de It & \uff09 *it \uff08\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u4e14\u80fd\u8f6c\u5316\u4e3a value_type \uff09 it1 != it2 \uff08\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a bool \uff0c\u4e14\u5982\u679c == \u6709\u5b9a\u4e49\uff0c\u4e0e !(it1 == it2) \u503c\u76f8\u540c\uff09 it->m \uff08\u7b49\u4ef7\u4e8e (*it).m \uff09 it++ \uff08\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a const It& \uff09 *it++ \uff08\u5373 *(it++) \uff0c\u8fd4\u56de\u503c\u80fd\u8f6c\u5316\u4e3a value_type \uff09 Legacy Forward Iterator - \u5728 LegacyInputIterator \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f\u652f\u6301 \u591a\u8d9f \u7b97\u6cd5\u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 LegacyInputIterator \u5982\u679c it1 == it2 \uff0c\u90a3\u4e48\u8981\u4e48\u5b83\u4eec\u90fd\u6ca1\u6709\u6307\u5411\u4e00\u4e2a\u6709\u6548\u7684\u5bf9\u8c61\uff08\u4f8b\u5982 nullptr \u6216\u8005\u7c7b\u4f3c c.end() \u7684\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u79f0\u5b83\u4eec\u662f \u4e0d\u53ef\u89e3\u5f15\u7528\u7684 undereferenceable \uff09\uff0c\u8981\u4e48\u5b83\u4eec\u6307\u5411\u7684\u662f\u540c\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c *it1 \u548c *it2 \u5f15\u7528\u540c\u4e00\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48 it1 == it2 it \u88ab ++ \u540e\uff0c\u518d\u6b21\u8bfb\u53d6\u5176\u539f\u6765\u6307\u5411\u5bf9\u8c61\u7684\u503c\uff0c\u7ed3\u679c\u4e0d\u5e94\u53d1\u751f\u53d8\u5316 \u5982\u679c it1 == it2 \uff0c\u90a3\u4e48 ++it1 == ++it2 Legacy Bidirectional Iterator - \u5728 _LegacyForwardIterator _ \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f \u53cc\u5411\u79fb\u52a8 \u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 _LegacyForwardIterator _ \u652f\u6301 --it , it-- , *it-- \uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u524d\u8ff0 ++ \u76f8\u540c\uff0c\u4e14\uff1a --(++it) == it \u5982\u679c --it1 == --it2 \uff0c\u90a3\u4e48 it1 == it2 Legacy RandomAccess Iterator - \u5728 LegacyBidirectionalIterator \u7684\u57fa\u7840\u4e0a\uff0c\u80fd\u591f\u5728 \u5e38\u6570 \u65f6\u95f4\u5185\u79fb\u52a8\u4ece\u800c\u6307\u5411 \u4efb\u4e00 \u5143\u7d20\u3002 \u5177\u4f53\u8981\u6c42 \u6ee1\u8db3\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b It \u9700\u8981\uff1a \u6ee1\u8db3 LegacyBidirectionalIterator \u652f\u6301 it += n , it -= n , it + n , it - n , n + it , it[n] , it1 < it2 , it1 > it2 , it1 <= it2 , it1 >= it2 \uff08\u6bd4\u8f83\u8fd0\u7b97\u7b26\u9700\u8981\u5728\u81ea\u53cd\u3001\u4ea4\u6362\u3001\u4f20\u9012\u4e0b\u6709\u6b63\u786e\u8868\u73b0\uff09, it1 - it2 \uff08\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u7684\u8ddd\u79bb\uff09 \uff0c\u542b\u4e49\u7565\uff0c\u4f46\u590d\u6742\u5ea6\u987b\u662f \\(O(1)\\) \u7684 C++17 Legacy Contiguous Iterator - \u5728 LegacyRandomAccessIterator \u7684\u57fa\u7840\u4e0a\uff0c\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5728\u5185\u5b58\u91cc \u7269\u7406\u4e0a\u4e5f\u76f8\u90bb \u3002 \u6ce8\uff1a\u6307\u5411\u6570\u7ec4\u4e2d\u5143\u7d20\u7684 \u6307\u9488 \u6ee1\u8db3 LegacyContiguousIterator \u7684\u6240\u6709\u8981\u6c42\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u79cd Legacy Output Iterator \uff0c\u5b83\u548c LegacyInputIterator \u7c7b\u4f3c\uff0c\u9700\u8981\u80fd\u591f\u7528\u6765\u6807\u8bc6\u3001 \u904d\u5386 \u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u80fd\u591f\u5411\u6240\u6307\u7684\u5143\u7d20\u4e2d \u5199\u5165 \u503c\uff1b\u540c\u6837\u4e0d\u9700\u8981\u4fdd\u8bc1\u591a\u8d9f\u7b97\u6cd5\u7684\u6709\u6548\u6027\u3002 \u53ef\u4ee5\u770b\u5230\uff0c LegacyOutputIterator \u548c\u524d\u8ff0 5 \u4e2a\u5177\u540d\u8981\u6c42\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u79f0\u6ee1\u8db3\u524d\u8ff0 5 \u4e2a\u5177\u540d\u8981\u6c42\u4e2d\u67d0\u4e00\u4e2a\u7684\u540c\u65f6\u8fd8\u6ee1\u8db3 LegacyOutputIterator \u7684\u8fed\u4ee3\u5668\u4e3a mutable \u7684\u3002 \u8fd9\u5f20\u8868\u683c\u6982\u62ec\u4e86\u4e0a\u8ff0\u5185\u5bb9\uff1a","title":"2 \u8fed\u4ee3\u5668\u7684\u5206\u7c7b"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#\u53c8\u662f-quiz-\u65f6\u95f4","text":"\u90a3\u4e48\uff0c\u8bf7\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u7ed3\u5408\u5bf9\u5e94\u5bb9\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5199\u51fa\u5b83\u4eec\u63d0\u4f9b\u6ee1\u8db3\u4ec0\u4e48\u8981\u6c42\u7684\u8fed\u4ee3\u5668\uff01 \u56fe\u6ce8 * \u5bf9\u4e8e deque\uff0c\u4f8b\u5982\u6bcf\u4e2a\u5b9a\u957f\u6570\u7ec4\u957f\u5ea6\u4e3a 100\uff0c\u90a3\u4e48\u8bbf\u95ee q[514] \u5176\u5b9e\u5c31\u662f\u8bbf\u95ee a[5][14] \uff0c\u4e5f\u5c31\u662f\u7b2c 6 \u4e2a\u6570\u7ec4\u91cc\u7684\u7b2c 15 \u4e2a\u5143\u7d20\u3002 \\(\\dagger\\) \u4e0a\u8868\u4e2d Unordered Associative Containers \u7684\u5b9e\u73b0\u8003\u8651\u4e86\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6709 \\(m = 10^6\\) \u4e2a bucket\uff0c\u4f46\u662f\u53ea\u6709 \\(n = 100\\) \u4e2a\u5143\u7d20\uff0c\u5982\u679c\u76f4\u63a5\u904d\u5386 bucket \u7684\u8bdd\u590d\u6742\u5ea6\u662f \\(O(m+n) >> O(n)\\) \u7684\uff1b\u56e0\u6b64\u5b9e\u73b0\u4e2d\u989d\u5916\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ef4\u62a4\u6240\u6709\u6709\u5143\u7d20\u7684 bucket \u5217\u8868\uff0c\u904d\u5386\u65f6\u6839\u636e\u8fd9\u4e2a\u5217\u8868\u53bb\u627e\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u5c31\u4ec5\u662f \\(O(n)\\) \u7684\u4e86\u3002 \u7b54\u6848\u6765\u54af\uff01 \u56fe\u6ce8 # \u7279\u522b\u5730\uff0c vector<bool> \u662f vector \u7684\u4e00\u4e2a\u7279\u5316\uff0c\u6807\u51c6\u5e0c\u671b\u5b9e\u73b0\u8005\u53ef\u4ee5\u8003\u8651\u7528\u66f4\u8282\u7701\u7a7a\u95f4\u7684\u65b9\u5f0f\u4fdd\u5b58 vector<bool> \uff0c\u4f46\u662f\u5177\u4f53\u5b9e\u73b0\u65b9\u6cd5\u662f implementation defined \u7684\uff08\u6807\u51c6\u4e0d\u6307\u660e\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4f46\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u8005\u9700\u8981\u7ed9\u51fa\u8bf4\u660e\uff09\uff1b\u56e0\u6b64 vector<bool> \u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3\u7684\u5177\u540d\u8981\u6c42\u4e5f\u662f implementation defined \u7684\u3002 \u56de\u987e\u6211\u4eec\u63d0\u5230\u7684\u7b97\u6cd5\uff0c sort \u9700\u8981\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyRandomAccessIterator \uff1b\u8fd9\u4e00\u9650\u5236\u7684\u5b9e\u73b0\u65b9\u5f0f\u5176\u5b9e\u5c31\u662f\uff0c sort \u7684\u5b9e\u73b0\u4e2d\u4f1a\u5305\u542b it1 - it2 \uff0c it + n \u4e4b\u7c7b\u7684\u8fd0\u7b97\uff0c\u5982\u679c\u4e0d\u652f\u6301\u8fd9\u4e9b\u8fd0\u7b97\u5c31\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u3002 \u540c\u65f6\uff0c lower_bound \u548c upper_bound \u53ea\u9700\u8981\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyForwardIterator \uff1b\u4f46\u662f\u5982\u679c\u8fd8\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff1b\u5426\u5219\u662f \\(O(n)\\) \u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e set , map , multiset \u548c multimap \uff0c\u5b83\u4eec\u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u4e0d\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u4f46\u662f\u5b83\u4eec\u672c\u8eab\u7c7b\u5185\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684 lower_bound \u51fd\u6570\uff0c\u56e0\u6b64\u6b64\u65f6\u5e94\u8be5\u7528\u7c7b\u5185\u7684\u8fd9\u4e9b\u51fd\u6570\u3002 \u8865\u5145 2.1 \u8fd9\u79cd\u5728\u6ee1\u8db3\u548c\u4e0d\u6ee1\u8db3 _LegacyRandomAccessIterator _\u65f6\u6709\u4e0d\u540c\u590d\u6742\u5ea6\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\uff0c\u6bcf\u4e2a iterator It \u90fd\u9700\u8981\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 iterator_traits<It> \uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a iterator_category \uff0c\u5b83\u7528\u6765\u6807\u8bc6\u8fd9\u4e2a\u8fed\u4ee3\u5668\u6ee1\u8db3\u54ea\u79cd\u8981\u6c42\u3002\u5bf9\u4e8e\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u7c7b\u578b\uff0c iterator_traits \u6709\u5bf9\u5e94\u7684\u7279\u5316\uff0c\u5176 iterator_category \u4e3a random_access_iterator_tag \u3002 \u5728 lower_bound \u4e2d\uff0c\u4f7f\u7528 it + n \u8fd9\u6837\u7684\u64cd\u4f5c\u53ef\u80fd\u662f\u901a\u8fc7 std::advance(it, n) \u7684\u65b9\u5f0f\u5b9e\u73b0\u7684\uff0c\u8fd9\u4e2a\u51fd\u6570\u5bf9\u4e8e\u4e0d\u540c\u7684 iterator_traits \u6709\u4e0d\u540c\u7684\u91cd\u8f7d\uff1b\u5bf9\u4e8e\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\uff0c\u5c31\u4f1a\u901a\u8fc7 it + n \u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u800c\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5219\u901a\u8fc7\u5faa\u73af\u5b9e\u73b0\u3002","title":"\u53c8\u662f Quiz \u65f6\u95f4\uff01"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#3-\u8fed\u4ee3\u5668\u4f55\u5fc5\u662f\u8fed\u4ee3\u5668","text":"\u6211\u4eec\u6765\u770b\u7b2c 3 \u4e2a\u95ee\u9898\uff01 sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a a. \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f b. \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \u6211\u4eec\u5148\u6765\u8ba8\u8bba a \u95ee\u9898\u3002 \u524d\u4e00\u8282\u4e2d\u6211\u4eec\u8ba8\u8bba\u8fc7\uff0c sort \u8981\u6c42\u4f20\u5165\u7684\u8fed\u4ee3\u5668\u6ee1\u8db3 LegacyRandomAccessIterator \uff0c\u8fd9\u4e00\u8981\u6c42\u662f\u56e0\u4e3a sort \u7684\u5b9e\u73b0\u4e2d\u4f1a\u5305\u542b\u7c7b\u4f3c end - begin , it + n , *it \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e5f\u8ba8\u8bba\u8fc7\u4e86\uff0c\u6ee1\u8db3 LegacyRandomAccessIterator \u7684\u8fed\u4ee3\u5668\u9700\u8981\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\uff1b\u800c\u540c\u65f6\uff0c\u6307\u9488\u7c7b\u578b\u4e5f\u652f\u6301\u8fd9\u6837\u7684\u64cd\u4f5c\u3002 \u548c \u6574\u6d3b 1.3 \u4e2d\u7684\u4f8b\u5b50\u7c7b\u4f3c\uff0c\u5176\u5b9e\u53ea\u8981\u6211\u4eec\u4f20\u5165\u7684\u7c7b\u578b\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u5982\u679c\u7c7b\u578b\u5e76\u4e0d\u652f\u6301\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u5219\u4f1a\u7f16\u8bd1\u9519\u8bef\uff0c\u4f8b\u5982\u7b2c 2 \u8282\u5f00\u5934\u6f14\u793a\u7528 sort \u5bf9 map \u7684 begin \u548c end \u6392\u5e8f\u5176\u5b9e\u62a5\u7684\u9519\u5c31\u662f\u201c\u5e76\u6ca1\u6709\u8fd9\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684 - \u8fd0\u7b97\u201d\uff1a \u4e3a\u4e86\u8fdb\u4e00\u6b65\u89e3\u91ca\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u5c0f\u7684 demo\uff1a \uff08\u53ef\u4ee5\u5728 https://godbolt.org/z/Peh17Ye5o \u91cc\u73a9\u4e00\u4e0b\uff09 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u7684 demo \u7528\u5230\u4e86\u524d\u8ff0\u4e09\u79cd\u64cd\u4f5c\uff0c\u800c 15 \u548c 16 \u884c\u7528\u6307\u9488\u548c vector \u7684\u8fed\u4ee3\u5668\u8c03\u7528\u5b83\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\u901a\u8fc7\uff1b\u4f46\u662f 17 \u884c\u5c31\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\uff1a \u6240\u4ee5\u8bf4\uff0c sort \u65e2\u9002\u7528\u4e8e\u4f20\u7edf\u6570\u7ec4\uff0c\u4e5f\u9002\u7528\u4e8e vector \u7b49\u5bb9\u5668\u662f\u81ea\u7136\u7684\uff1a\u6307\u9488\u548c\u6ee1\u8db3 LegacyRandomAccessIterator \u7684\u8fed\u4ee3\u5668\u90fd\u652f\u6301 sort \u51fd\u6570\u91cc\u7528\u5230\u7684\u5404\u79cd\u8fd0\u7b97\uff0c\u56e0\u6b64\u81ea\u7136\u5c31\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u6c42 sort \u4f20\u5165\u7684\u7c7b\u578b\u6ee1\u8db3 LegacyRandomAccessIterator \u5e76\u4e0d\u662f\u4e00\u4e2a\u524d\u63d0\uff0c\u800c\u662f\u4e00\u4e2a \u7ed3\u679c \u2014\u2014 \u6211\u4eec\u628a sort \u4ee5\u53ca\u548c\u5b83\u7c7b\u4f3c\u7684\u51fd\u6570\uff0c\u5bf9\u4f20\u5165\u53c2\u6570\u7c7b\u578b\u201c\u80fd\u591f\u5728 \u5e38\u6570 \u65f6\u95f4\u5185\u79fb\u52a8\u4ece\u800c\u6307\u5411 \u4efb\u4e00 \u5143\u7d20\u7684\u51fd\u6570\u201d\u7684\u8981\u6c42\u8d77\u4e86\u4e2a\u540d\u5b57\uff0c\u53eb\u505a LegacyRandomAccessIterator \u3002\u800c\u8fd9\u79cd\u8981\u6c42\u5728\u8bed\u8a00\u4e2d\u7684\u4f53\u73b0\uff0c\u4e5f\u5e76\u4e0d\u662f\u4f7f\u7528\u4e13\u95e8\u7684 tag \u6765\u6807\u8bb0\u67d0\u4e2a\u8fed\u4ee3\u5668\u7b26\u5408\u4ec0\u4e48\u6837\u7684\u5177\u540d\u8981\u6c42\uff0c\u800c\u53ea\u662f\u4e0d\u7b26\u5408\u8fd9\u79cd\u8981\u6c42\u7684\u7c7b\u578b\u81ea\u7136\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5bf9\u5e94\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u8981\u6c42\u6240\u8bf4\u660e\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 \u8865\u5145 3.1 \u8fd9\u5176\u5b9e\u5c31\u518d\u6b21\u5411\u6211\u4eec\u5c55\u73b0\u4e86 template \u6240\u652f\u6301\u7684\u6cdb\u578b\u7f16\u7a0b\u7684\u610f\u4e49\u2014\u2014\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5141\u8bb8\u6211\u4eec\u5199\u4e00\u4e2a\u652f\u6301\u67d0\u4e00\u7c7b\u578b\uff08\u57fa\u7c7b\uff09\u4ee5\u53ca\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u578b\u7684\u5176\u4ed6\u7c7b\u578b\uff08\u5b50\u7c7b\uff09\u7684\u51fd\u6570\uff1b\u800c\u6cdb\u578b\u7f16\u7a0b\u5219\u5141\u8bb8\u6211\u4eec\u5199\u4e00\u4e2a\u652f\u6301\u6ee1\u8db3\u67d0\u4e00\u6761\u4ef6\uff08\u62e5\u6709\u67d0\u4e9b\u7279\u5b9a\u6210\u5458\uff09\u7684\u6240\u6709\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7ee7\u627f\u548c\u591a\u6001\u6765\u5c06\u4e0d\u540c\u7684\u7c7b\u578b\u62bd\u8c61\u8d77\u6765\uff0c\u7528\u201c\u5b50\u7c7b\u5bf9\u8c61\u662f\u4e00\u4e2a\u7236\u7c7b\u5bf9\u8c61\u201d\u7684\u903b\u8f91\u6765\u5728\u9700\u8981\u65f6\u628a\u5b50\u7c7b\u5bf9\u8c61\u5f53\u505a\u7236\u7c7b\u5bf9\u8c61\u4f7f\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u548c\u91cd\u7528\u5ea6\uff1b\u800c\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7c7b\u4f3c\u4e0a\u6587\u4e2d sort \u7684\u65b9\u5f0f\uff0c\u5c06\u4e0d\u540c\u7c7b\u578b\u5171\u540c\u5177\u6709\u7684\u4e00\u4e9b\u51fd\u6570\u6216\u5b57\u6bb5\u4f5c\u4e3a\u8981\u6c42\u3002\u5373\uff0c\u9762\u5411\u5bf9\u8c61\u7684\u51fd\u6570\u6240\u63d0\u51fa\u7684\u8981\u6c42\u662f \"is\"\uff0c\u800c\u6cdb\u578b\u7f16\u7a0b\u7684\u51fd\u6570\u6240\u63d0\u51fa\u7684\u8981\u6c42\u662f \"has\"\u3002\u8fd9\u4e5f\u662f\u6cdb\u578b\u7f16\u7a0b\u76f8\u6bd4\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u6765\u8bf4\u66f4\u52a0\u81ea\u7136\u4ee5\u53ca\u81ea\u7531\u4e4b\u5904\u3002 \u8865\u5145 3.2 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u53c8\u8981\u95ee\u4e86\u2014\u2014\u6cdb\u578b\u7f16\u7a0b\u7684\u903b\u8f91\u662f \"has\"\uff0c\u800c\u5728\u524d\u6587\u4e2d sort \u7684\u4f8b\u5b50\u91cc\uff0c\u5982\u679c\u5bf9\u5e94\u7c7b\u578b\u5e76\u4e0d \"has\" \u90a3\u4e9b\u8fd0\u7b97\u7b26\uff0c\u5c31\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5206\u5f00 \"has\" \u548c \"\u4e0d has\" \u4e24\u79cd\u60c5\u51b5\uff0c\u4f7f\u5b83\u4eec\u5206\u522b\u8c03\u7528\u4e0d\u540c\u7684\u51fd\u6570\u91cd\u8f7d\uff0c\u600e\u4e48\u529e\u634f\uff1f\u8fd9\u65f6\u5c31\u9700\u8981\u4ecb\u7ecd\u4f1f\u5927\u7684 SFINAE (Substitution Fail Is Not An Error) \u6280\u672f\u4e86\u3002\u8fd9\u5e76\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\uff0c\u6211\u4eec\u4ee5\u540e\u6709\u673a\u4f1a\u7684\u8bdd\u53ef\u80fd\u4f1a\u5c55\u5f00\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u597d\u5947\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u4ee5\u81ea\u884c\u9605\u8bfb\u4e00\u4e9b\u76f8\u5173\u7684\u8d44\u6599\uff1a https://en.cppreference.com/w/cpp/language/sfinae https://stackoverflow.com/questions/982808/c-sfinae-examples \u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba b \u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u76f8\u5bf9\u7b80\u5355\u3002 \u9996\u5148\u8ba8\u8bba\u6211\u4eec\u7ed9 sort \u4f20\u5165\u7684\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u6307\u9488\u7684\u60c5\u5f62\uff0c\u6211\u4eec\u91c7\u7528 \u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 \u4e2d\u7684\u4f8b\u5b50\uff1a bool cmp ( const int & a , const int & b ) { return a > b ; } vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), cmp ); \u5728 sort \u4e2d\uff0c\u6211\u4eec\u4f20\u5165\u7684 cmp \u88ab\u600e\u6837\u4f7f\u7528\u4e86\u5462\uff1f\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u6307\u9488 fp \u53ef\u4ee5\u901a\u8fc7 fp(args...) \u7684\u65b9\u5f0f\u76f4\u63a5\u8c03\u7528\uff1a \u90a3\u4e48\uff0c\u5176\u5b9e sort \u4e2d\u76f4\u63a5\u8c03\u7528 cmp(*it1, *it2) \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u4e24\u4e2a\u5143\u7d20\u7684\u6bd4\u8f83\u4e86\uff01\u6240\u4ee5\uff0c sort \u7684\u51fd\u6570\u7b7e\u540d\u53ef\u4ee5\u662f\uff1a template < typename Iterator , typename CompFuncPtr > bool sort ( Iterator begin , Iterator end , CompFuncPtr cmp ) \u8fd9\u91cc\u7684\u6a21\u677f\u53c2\u6570 Iterator \u7528\u6765\u9002\u914d\u4e0d\u540c\u7684\u8fed\u4ee3\u5668\u7c7b\u578b\uff08\u5305\u62ec\u6307\u9488\uff09\uff1b\u800c CompFuncPtr \u7528\u6765\u9002\u914d\u4e0d\u540c\u7684\u6bd4\u8f83\u51fd\u6570\u6307\u9488\uff0c\u56e0\u4e3a\u6bd4\u8f83\u51fd\u6570\u6307\u9488\u7684\u7c7b\u578b\u56e0\u5176\u53c2\u6570\u7c7b\u578b\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u4e8b\u60c5\u8fd8\u6ca1\u7ed3\u675f\uff01\uff08\u8ba9\u6211\u4eec\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u8282\u2014\u2014\uff09","title":"3 \u8fed\u4ee3\u5668\u4f55\u5fc5\u662f\u8fed\u4ee3\u5668"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#4-\u51fd\u6570\u53c8\u4f55\u5fc5\u662f\u51fd\u6570","text":"\u5feb\u901f\u5165\u95e8 C++ \u5199\u9898\uff01 \u4e2d\u7ed9\u51fa\u4e86 sort \u7684\u53e6\u4e00\u79cd\u4f7f\u7528\u793a\u4f8b\uff1a vector < int > v = { 3 , 1 , 4 , -2 , 5 , 3 }; sort ( v . begin (), v . end (), greater < int > ()); \u8fd9\u79cd\u5199\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u5347\u5e8f\u6392\u5217\u3002\u90a3\u4e48\u8fd9\u4e2a greater<int>() \u662f\u4ec0\u4e48\u5462\uff1f\u4e00\u79cd\u53ef\u80fd\u7684\u5b9e\u73b0\u957f\u8fd9\u6837\uff1a template < typename T > struct greater { bool operator ()( const T & lhs , const T & rhs ) { return lhs > rhs ; } }; \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c greater \u5176\u5b9e\u662f\u4e2a\u7ed3\u6784\u4f53\uff0c\u6216\u8005\u8bf4\u662f\u4e2a\u7c7b\uff1b\u5b83\u91cc\u9762\u6709\u4e00\u4e2a\u5bf9\u8fd0\u7b97\u7b26 () \u7684\u91cd\u8f7d\u3002 \u6807\u51c6 \u4e2d\u6307\u51fa\uff0c\u5982\u679c a \u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48 a(b...) \u5176\u5b9e\u7b49\u540c\u4e8e (a).operator()(b...) \uff0c\u5176\u5b9e\u5c31\u662f\u5c06 b... \u4f5c\u4e3a\u53c2\u6570\u5217\u8868\uff0c\u8c03\u7528\u4e86 () \u8fd0\u7b97\u7b26\u3002\u6211\u4eec\u628a () \u8fd0\u7b97\u7b26\u79f0\u4e3a\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26 (function call operator)\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u4e2a\u8fd0\u7b97\u7b26\u8868\u793a\u51fd\u6570\u8c03\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a greater<T> \u7c7b\u7684\u5bf9\u8c61 cmp \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7 cmp(a, b) \u6765\u8c03\u7528 (cmp).operator()(a, b) \uff0c\u4ece\u800c\u8fd4\u56de\u6bd4\u8f83\u7684\u7ed3\u679c\u3002 \u518d\u56de\u5230 sort(v.begin(), v.end(), greater<int>()); \u4e2d\u6765\u3002\u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u4ee5\u770b\u51fa\uff0c greater<int>() \u5176\u5b9e\u5c31\u662f\u8c03\u7528 greater<int> \u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6784\u9020\u4e86\u4e00\u4e2a greater<int> \u7c7b\u578b\u7684\u5bf9\u8c61\u4f20\u9012\u7ed9 sort \u3002\u4e0d\u59a8\u8bbe\u5bf9\u5e94\u5f62\u53c2\u540d\u4e3a cmp \uff0c\u90a3\u4e48\u5728 sort \u4e2d\uff0c\u6211\u4eec\u5c31\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 cmp(a, b) \u6765\u8c03\u7528 greater<int> \u4e2d\u7684 operator () \u6765\u5b9e\u73b0\u6bd4\u8f83\u3002 \u6211\u4eec\u56de\u987e\u7b2c 3 \u8282\u4e2d\u5199\u51fa\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u7adf\u4ecd\u7136\u9002\u914d greater<int>() \u8fd9\u6837\u7684\u53c2\u6570\uff01 template < typename Iterator , typename CompFuncPtr > void sort ( Iterator begin , Iterator end , CompFuncPtr cmp ) \u8fd9\u91cc\u7684 CompFuncPtr \u73b0\u5728\u5e76\u4e0d\u662f\u4e00\u4e2a bool (*)(const T &, const T &) \u7684\u51fd\u6570\u6307\u9488\u4e86\uff0c\u800c\u662f greater<int> \u7c7b\u578b\uff0c\u800c cmp \u5219\u662f\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002\u5728 sort \u7684\u5b9e\u73b0\u4e2d\uff0c\u4ecd\u7136\u53ef\u4ee5\u50cf\u51fd\u6570\u6307\u9488\u4e00\u6837\u901a\u8fc7 cmp(a, b) \u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6bd4\u8f83\u3002\u5f53\u7136\uff0c CompFuncPtr \u8fd9\u4e2a\u540d\u5b57\u5c31\u4e0d\u592a\u59a5\u5f53\u4e86\uff0c\u56e0\u4e3a\u6bd4\u8f83\u5668\u4e0d\u4e00\u5b9a\u662f\u4e2a\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u540d\u4e3a Comparator \u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 sort(v.begin(), v.end()); \u6765\u5b9e\u73b0\u5347\u5e8f\u6392\u5e8f\u3002\u8fd9\u53c8\u662f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff1f\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u91cd\u8f7d\u5373\u53ef\uff1a template < typename Iterator > void sort ( Iterator begin , Iterator end ) \u800c\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u7c7b\u4f3c sort(begin, end, less<decltype(*begin)>()); \u7684\u5199\u6cd5\uff0c\u5373\u4f7f\u7528 less<T>() \u6765\u4f5c\u4e3a\u6bd4\u8f83\u5668\u3002 \u8865\u5145 4.1 \u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\uff0c\u8fd9\u91cc\u5e76\u4e0d\u662f less<decltype(*begin)>() \u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u800c\u662f\u7c7b\u4f3c less<typename iterator_traits<Iterator>::value_type>() \u7684\u5199\u6cd5\u3002\u5373\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u5668\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684 traits\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u8fed\u4ee3\u5668\u5bf9\u5e94\u7684\u503c\u7c7b\u578b\u3002\u672c\u6587\u5e76\u4e0d\u60f3\u5f15\u5165 traits \u7684\u6982\u5ff5\uff0c\u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u9605\u8d44\u6599\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u51fa\u7b2c 3 \u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff1a sort \u7684\u51fd\u6570\u7b7e\u540d\u53ef\u4ee5\u662f\uff1a template < typename Iterator > void sort ( Iterator begin , Iterator end ); template < typename Iterator , typename Comparator > bool sort ( Iterator begin , Iterator end , Comparator cmp ); \u8865\u5145 4.2 \u5b9e\u9645\u4e0a\uff0c\u67e5\u9605 \u6807\u51c6 \u53ef\u4ee5\u770b\u5230\uff0cC++17 \u8fd8\u5f15\u5165\u4e86\u4e24\u4e2a\u5305\u542b ExecutionPolicy \u7684\u7248\u672c\u3002\u8fd9\u4e2a\u548c\u672c\u6587\u7684\u4e3b\u9898\u65e0\u5173\uff08\u4e3b\u8981\u662f\u6211\u4e5f\u4e0d\u4f1a\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u884c\u7565\u8fc7\u3002","title":"4 \u51fd\u6570\u53c8\u4f55\u5fc5\u662f\u51fd\u6570"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#\u51fd\u6570\u5bf9\u8c61-function-object--functor","text":"\u5728\u8ba8\u8bba\u51fd\u6570\u5bf9\u8c61\u662f\u4ec0\u4e48\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u56de\u987e\u4e00\u4e0b\u4ec0\u4e48\u662f \u5bf9\u8c61 (object) \u3002\u5bf9\u8c61\u8981\u6709\u503c\u3001\u7c7b\u578b\u3001size\u3001\u751f\u547d\u5468\u671f\u7b49\u5c5e\u6027\uff0c\u63cf\u8ff0\u7684\u662f\u4e00\u5757\u5185\u5b58\u4e0a\u7684\u6570\u636e\u53ca\u5176\u542b\u4e49\u3002\u4e0b\u5217\u5e38\u89c1\u7684\u5b9e\u4f53\u4e0d\u662f\u5bf9\u8c61\uff1a struct / class\uff0c\u5305\u542b\u5176\u6a21\u677f\u53ca\u7279\u5316\uff0c\u5b83\u7528\u6765 \u63cf\u8ff0 \u4e00\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\u5b89\u6392\uff08\u867d\u7136\u5b83\u4eec\u53ef\u80fd\u5305\u542b\u865a\u51fd\u6570\u8868\uff09\uff1b struct / class \u7684\u975e static \u6210\u5458\u53d8\u91cf\uff1b function\uff0c\u5305\u542b\u5176\u6a21\u677f\u53ca\u7279\u5316\uff0c\u5b83\u662f\u4e00\u6bb5\u4ee3\u7801\uff1b reference\uff0c\u5b83\u53ea\u662f\u5df2\u6709\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u522b\u540d\uff0c\u7f16\u8bd1\u5668\u4e0d\u5fc5\u4e3a\u5b83\u4eec\u5206\u914d\u5185\u5b58\uff08\u56e0\u6b64\u4e0d\u5b58\u5728\u5f15\u7528\u6570\u7ec4\u3001\u5f15\u7528\u7684\u5f15\u7528\u548c\u6307\u5411\u5f15\u7528\u7684\u6307\u9488\uff09\uff1b\u7b49\u3002 \u4e0a\u8ff0\u5185\u5bb9\u66f4\u4e25\u8c28\u7684\u8868\u8ff0\u53c2\u89c1 https://en.cppreference.com/w/cpp/language/object \u3002 \u8bf7\u6ce8\u610f \uff1a\u4e0a\u8ff0\u201c\u5bf9\u8c61\u201d\u7684\u6982\u5ff5\u548c OOP \u4e2d\u201c\u5bf9\u8c61\u201d\u7684\u6982\u5ff5\u5e76\u4e0d\u4e00\u81f4\u3002\u5728 C++ \u7684\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\uff0c int \u548c int* \u662f\u5bf9\u8c61\u3002 \u4e0a\u9762\u7684\u5185\u5bb9\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e00\u4ef6\u4e8b\u2014\u2014\u51fd\u6570\u4e0d\u662f\u5bf9\u8c61\u3002\u4f46\u662f\uff0c\u5728\u4e0a\u8ff0\u5bf9\u95ee\u9898 3 \u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 2 \u79cd\u80fd\u591f\u88ab\u5f53\u6210\u51fd\u6570\u4f7f\u7528\u7684\u5bf9\u8c61\uff1a\u51fd\u6570\u6307\u9488\uff0c\u4ee5\u53ca\u91cd\u8f7d\u4e86 function call operator operator () \u7684\u7c7b\u7684\u5bf9\u8c61\u3002\u4e8b\u5b9e\u4e0a\uff0cC++ \u5c06\u4efb\u4f55\u5b9a\u4e49\u4e86 function call operator \u7684\u5bf9\u8c61\u7edf\u79f0\u4e3a \u51fd\u6570\u5bf9\u8c61 (Function Object) \u3002\u5177\u4f53\u6765\u8bf4\uff0c\u51fd\u6570\u5bf9\u8c61\u5305\u62ec\uff1a \u51fd\u6570\u6307\u9488\uff1b \u4efb\u4f55\u80fd\u591f\u8f6c\u5316\u5230\u51fd\u6570\u6307\u9488\u7684\u7c7b\u7684\u503c\uff08\u5982\u65e0\u72b6\u6001\uff0c\u5373\u6ca1\u6709\u6355\u83b7\u4efb\u4f55\u4e1c\u897f\u7684 lambda \u8868\u8fbe\u5f0f\uff09\uff1b \u4efb\u4f55\u91cd\u8f7d\u4e86 function call operator \u7684\u7c7b\u7684\u503c\uff08\u5982 lambda \u8868\u8fbe\u5f0f\uff09\u3002 \u8865\u5145 4.3 \u5f88\u591a\u4eba\u5c06\u51fd\u6570\u5bf9\u8c61\u79f0\u4e3a \u4eff\u51fd\u6570 (Functor) \uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u76f4\u81f3 C++20\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6807\u51c6\u4e2d \u4ece\u672a\u51fa\u73b0\u8fc7 \u3002\u6240\u4ee5\u8bf7\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u53e5 E(A...) \u65f6\uff0c E \u53ef\u4ee5\u662f\u51fd\u6570\u3001\u51fd\u6570\u5f15\u7528\u3001\u51fd\u6570\u5bf9\u8c61\uff0c\u6216\u8005\u5176\u4ed6\u503c\u4e3a\u51fd\u6570\u5f15\u7528\u6216\u51fd\u6570\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u7528\u6765\u8d4b\u503c\u6216\u8005\u4f5c\u4e3a\u53c2\u6570\u88ab\u4f20\u9012\u65f6\uff0c\u5982\u679c\u63a5\u6536\u65b9\u4e0d\u662f\u5f15\u7528\uff0c\u5219\u4f1a\u53d1\u751f function-to-pointer \u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u88ab\u9690\u5f0f\u8f6c\u6362\u6210\u51fd\u6570\u6307\u9488\u3002\u56e0\u6b64\u5f53\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u88ab\u4f20\u9012\u65f6\uff0c\u63a5\u6536\u65b9\u8981\u4e48\u63a5\u6536\u5230\u4e00\u4e2a\u5f15\u7528\uff0c\u8981\u4e48\u63a5\u6536\u5230\u4e00\u4e2a\u6307\u9488\u3002 \u77e5\u9053\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u5f88\u591a\u79cd\u7ed9 sort \u4e4b\u7c7b\u7684\u51fd\u6570\u4f20\u9012\u51fd\u6570\u7684\u65b9\u5f0f\u4e86\uff01 \u8865\u5145 4.4 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u4f1a\u95ee\u4e86\u2014\u2014\u7b2c 15 \u884c\u4f20\u9012\u5f15\u7528\u4e3a\u4ec0\u4e48\u90a3\u4e48\u9ebb\u70e6\u5440\uff01\u5176\u5b9e\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u4e0d\u663e\u793a\u7ed9\u51fa\u6a21\u677f\u53c2\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u50cf 13 \u884c\u4e00\u6837\u88ab\u89e3\u91ca\u6210\u51fd\u6570\u6307\u9488\u800c\u4e0d\u662f\u51fd\u6570\u5f15\u7528\u3002\u8fd9\u662f\u56e0\u4e3a\u5e76\u4e0d\u5b58\u5728 funtion-to-reference \u7684\u9690\u5f0f\u8f6c\u6362\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u771f\u7684\u60f3\u8981\u8ba9\u5b83\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u90a3\u5c31\u53ea\u80fd\u663e\u5f0f\u5730\u5199\u51fa\u5176\u7c7b\u578b\uff1b\u5982\u679c\u5199 decltype(cmp1) \u7684\u8bdd\uff0c\u867d\u7136\u6a21\u677f\u53c2\u6570\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u4f20\u8fdb\u53bb\u7684\u5176\u5b9e\u8fd8\u662f\u4e2a\u51fd\u6570\u6307\u9488\u800c\u4e0d\u662f\u5f15\u7528\uff0c\u56e0\u4e3a\u51fd\u6570\u672c\u8eab\u4e0d\u662f\u5bf9\u8c61\uff0c\u6211\u4eec\u4e0d\u80fd\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u4f46\u662f\u5982\u679c\u5199 decltype(*cmp1) \u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\uff0c\u6240\u4ee5\u4f20\u8fdb\u53bb\u7684\u5c31\u662f\u4e00\u4e2a\u5f15\u7528\u4e86\u3002 \u5f53\u7136\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 bool (&)(const int &, const int &) \u3002 \u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u53c8\u4f1a\u95ee\u4e86\u2014\u2014\u4e3a\u4ec0\u4e48\u7b2c 15 \u884c\u4f20\u9012\u5f15\u7528\u5199 cmp1 \u800c\u4e0d\u662f *cmp1 \u5440\uff01\u5176\u5b9e\u5199 *cmp1 \u4e5f\u884c\uff0c\u4f46\u662f cmp1 \u66f4\u81ea\u7136\u3002 *cmp1 \u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u663e\u7136\u6211\u4eec\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\u89e3\u5f15\u7528\uff0c\u56e0\u6b64\u6b64\u65f6 cmp1 \u4f1a\u88ab\u9690\u5f0f\u8f6c\u6362\u6210\u51fd\u6570\u6307\u9488\uff0c\u89e3\u5f15\u7528\u4e4b\u540e\u5f97\u5230\u6307\u5411 cmp1 \u7684\u4e00\u4e2a\u5de6\u503c\uff1b\u4e5f\u5c31\u662f\u8bf4 *cmp1 \u548c cmp1 \u5176\u5b9e\u8fd8\u662f\u4e00\u4e2a\u4e1c\u897f\u3002\u4e5f\u662f\u540c\u6837\u7684\u539f\u7406\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5199 *********cmp1 \uff0c\u5176\u5b9e\u5c31\u662f\u53cd\u590d\u89e6\u53d1 function-to-pointer \u548c\u89e3\u5f15\u7528\u3002\u4f8b\u5982\uff1a \u8865\u5145 4.5 \u51fd\u6570\u5bf9\u8c61\u9664\u4e86\u80fd\u591f\u7528\u6765\u5c06\u51fd\u6570\u5f53\u505a\u53c2\u6570\u4f20\u9012\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u6784\u9020\u95ed\u5305 (closure)\u3002\u95ed\u5305\u5728\u51fd\u6570\u4e4b\u5916\uff0c\u8fd8\u80fd\u591f\u901a\u8fc7\u6210\u5458\u53d8\u91cf\u4fdd\u5b58\u4e00\u4e9b\u72b6\u6001\uff1b\u4e14\u4e0d\u540c\u4e8e\u51fd\u6570\u5185\u90e8 static \u53d8\u91cf\u7684\u662f\uff0c\u62e5\u6709\u7edf\u4e00\u51fd\u6570\u4f53\u7684\u4e0d\u540c\u51fd\u6570\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u5b58\u4e0d\u540c\u7684\u72b6\u6001\u3002\u8fd9\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u4e0d\u540c\u5b9e\u4f8b\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u5e76\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002\u611f\u5174\u8da3\u7684\u5c0f\u670b\u53cb\u4eec\u53ef\u4ee5\u81ea\u884c\u8fdb\u4e00\u6b65\u63a2\u7d22\u3002 \u4e0b\u9762\u6211\u4eec\u6765\u5230\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u5566\uff01 \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f priority_queue \u662f\u4e00\u4e2a\u6a21\u677f\u7c7b\uff1b\u5b83\u548c sort \u7684\u6700\u5927\u533a\u522b\u662f\uff0c\u4f20\u5165\u7684\u6bd4\u8f83\u51fd\u6570\u9700\u8981\u4f5c\u4e3a\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u5b58\u5728\u5b9e\u4f8b\u5f53\u4e2d\u3002\u5173\u952e\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a template < class T , class Container = std :: vector < T > , class Compare = std :: less < typename Container :: value_type > > class priority_queue { public : priority_queue () : priority_queue ( Compare (), Container ()) { } explicit priority_queue ( const Compare & compare ) : priority_queue ( compare , Container ()) { } priority_queue ( const Compare & compare , Container && cont ); /* ... Many Other Constructors and Other Members ... */ } \u53ef\u4ee5\u770b\u5230\uff0cpriority_queue \u63a5\u6536 3 \u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5206\u522b\u89c4\u5b9a\u4e86\u5185\u90e8\u5143\u7d20\u7c7b\u578b\u3001\u5e95\u5c42\u5bb9\u5668\u7c7b\u578b\u548c\u6bd4\u8f83\u5668\uff1b\u5176\u4e2d\u5e95\u5c42\u5bb9\u5668\u7c7b\u578b\u9ed8\u8ba4\u4e3a std::vector<T> \uff0c\u800c\u6bd4\u8f83\u5668\u53ef\u4ee5\u8ba4\u4e3a\u9ed8\u8ba4\u4e3a std::less<T> \u3002 \u7b2c 9 \u884c\u7684\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6bd4\u8f83\u5668\u5bf9\u8c61\u548c\u4e00\u4e2a\u5bb9\u5668\u5bf9\u8c61\uff0c\u5b83\u4eec\u5c06\u4f1a\u4f5c\u4e3a\u6784\u9020\u51fa\u7684\u5b9e\u4f8b\u7684\u6210\u5458\u3002 \u5f53\u6211\u4eec\u5199\u7c7b\u4f3c priority_queue<int> pq; \u7684\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u663e\u5f0f\u6307\u5b9a T \u4e3a int \uff0c\u5176\u4ed6\u53c2\u6570\u4e3a\u9ed8\u8ba4\u503c\uff0c\u5e76\u8c03\u7528\u4e86\u7b2c 6 \u884c\u7684\u6784\u9020\u51fd\u6570\uff1b\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u8c03\u7528\u4e86 Container \u548c Compare \u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u8c03\u7528\u7b2c 9 \u884c\u7684\u6784\u9020\u51fd\u6570\uff0c\u4ece\u800c\u6784\u9020\u51fa\u4e86\u672c\u5b9e\u4f8b\u7684\u6bd4\u8f83\u5668\u5bf9\u8c61\u548c\u5bb9\u5668\u5bf9\u8c61\u3002 \u5f53\u6211\u4eec\u5199\u7c7b\u4f3c priority_queue<int, vector<int>, decltype(lambda)> pq(lambda); \u7684\u4ee3\u7801\u65f6\uff08 lambda \u662f\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff09\uff0c\u5176\u5b9e\u5c31\u662f\u663e\u5f0f\u5730\u8bf4\u660e\u4e86\u6a21\u677f\u53c2\u6570\uff0c\u5e76\u8c03\u7528\u7b2c 7 \u884c\u7684\u6784\u9020\u51fd\u6570\uff0c\u5c06\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5668\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u4f5c\u4e3a\u672c\u5b9e\u4f8b\u7684\u6bd4\u8f83\u5668\u5bf9\u8c61\u3002\u5bb9\u5668\u5bf9\u8c61\u4ecd\u7136\u662f\u8c03\u7528\u5bf9\u5e94\u6784\u9020\u51fd\u6570\u6784\u9020\u7684\u3002 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u6709\u5f88\u591a\u79cd\u7ed9 priority_queue \u7b49\u5bb9\u5668\u4f20\u6bd4\u8f83\u5668\u7684\u65b9\u5f0f\uff01 \u8865\u5145 4.6 \u4e0a\u56fe\u4e2d (4) \u7684\u5199\u6cd5\u4f1a\u62a5\u8fd9\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1a \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc _Compare \u5373 decltype(func) \u5373 bool (const int &, const int &) \u662f\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\uff0c\u6211\u4eec\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u3002","title":"\u51fd\u6570\u5bf9\u8c61 (Function Object / Functor)"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#5-\u603b\u7ed3","text":"\u6211\u4eec\u56de\u987e\u6587\u9996\u63d0\u51fa\u7684\u51e0\u4e2a\u95ee\u9898\uff0c\u5176\u5b9e\u5b83\u4eec\u5faa\u5e8f\u6e10\u8fdb\uff0c\u6784\u6210\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u8109\u7edc\u3002\u6211\u4eec\u6807\u6ce8\u51fa\u5b83\u4eec\u5206\u522b\u5f15\u51fa\u4e86\u4ec0\u4e48\u7279\u6027\uff0c\u5e2e\u52a9\u5927\u5bb6\u56de\u987e\u548c\u590d\u4e60\uff1a \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 for (auto &a : c) \u7684\u65b9\u5f0f\u904d\u5386\u8bf8\u5982 vector, set, unordered_set \u7b49\u7684\u5bb9\u5668\u3002\u8fd9\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f \uff08\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668\uff09 \u6211\u4eec\u77e5\u9053 map \u662f\u80fd\u591f\u7528\u4e0a\u8ff0\u65b9\u5f0f\u904d\u5386\u7684\u3002\u5bf9\u4e8e map<int, int> m; \uff0c\u6211\u4eec\u4f7f\u7528 sort(m.begin(), m.end()); \u53ef\u4ee5\u5417\uff1f \uff08\u8fed\u4ee3\u5668\u7684\u5206\u7c7b\uff09 sort \u7684\u51fd\u6570\u7b7e\u540d\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5373\uff0c template < -1- > std::sort( -2- ) \u7684 -1- \u548c -2- \u4e24\u5904\u662f\u4ec0\u4e48\uff1f\u5177\u4f53\u800c\u8a00\uff1a \u4e3a\u4ec0\u4e48\u5b83\u65e2\u80fd\u5bf9 vector \u8fd9\u6837\u7684\u5bb9\u5668\u8fdb\u884c\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u4f20\u7edf\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1f \uff08\u4f60\u7684\u8fed\u4ee3\u5668\u4f55\u5fc5\u662f\u8fed\u4ee3\u5668\uff1f\u2014\u2014\u53ea\u8981\u5b83\u6709 ++ \u548c * \u4e4b\u7c7b\u7684\u57fa\u672c\u529f\u80fd\uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u5f53\u6210\u8fed\u4ee3\u5668\u7528\uff09 \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1f\u5982\u4f55\u9002\u914d\u6709\u548c\u6ca1\u6709\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u4e24\u79cd\u60c5\u51b5\u7684\uff1f \uff08\u5f15\u5165\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u7684\u5b9e\u73b0\uff09 \u6709\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570 bool cmp(const int& a, const int& b) { return a > b; } \uff0c\u6211\u4eec\u53ef\u4ee5\u5199 sort(v.begin(), v.end(), cmp); \u6765\u7528 cmp \u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u7528 cmp \u4f5c\u4e3a priority_queue \u7b49\u5bb9\u5668\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f \uff08\u65e2\u7136\u8fed\u4ee3\u5668\u4e0d\u4e00\u5b9a\u662f\u8fed\u4ee3\u5668\uff0c\u90a3\u51fd\u6570\u4e00\u5b9a\u662f\u51fd\u6570\u5417\uff1f\u2014\u2014\u53ea\u8981\u5b83\u6709 () \uff0c\u5b83\u5c31\u53ef\u4ee5\u88ab\u5f53\u6210\u51fd\u6570\u7528\uff09","title":"5 \u603b\u7ed3"},{"location":"cpp/%E7%90%86%E8%A7%A3%20STL%20-%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1/#references","text":"https://stackoverflow.com/questions/5606973/understanding-iterators-in-the-stl/5607206#5607206 https://en.cppreference.com/w/cpp/language/range-for#Explanation https://en.cppreference.com/w/cpp/named_req/Iterator https://stackoverflow.com/a/22444975/14430730 https://en.cppreference.com/w/cpp/utility/functional/greater https://github.com/llvm/llvm-project/blob/e7fc254875ca9e82b899d5354fae9b5b779ff485/libcxx/include/__algorithm/sort.h#L264 https://github.com/gcc-mirror/gcc/blob/d9375e490072d1aae73a93949aa158fcd2a27018/libstdc%2B%2B-v3/include/bits/stl_algo.h#L1950 https://cppdepend.com/blog/?p=729 https://en.cppreference.com/w/cpp/language/functions https://en.cppreference.com/w/cpp/utility/functional http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf","title":"References"},{"location":"pl/","text":"Abstract \u7f16\u7a0b\u8bed\u8a00\u548c\u7f16\u8bd1\u4e5f\u8bb8\u662f\u6bd4\u8f83\u597d\u5947\u7684\u65b9\u5411\uff0c\u4f46\u662f\u786e\u5b9e\u6ca1\u6709\u5b66\u5f88\u591a\u76f8\u5173\u7684\u4e1c\u897f","title":"Index"},{"location":"pl/ppl_notes/1_Abstract_Syntax/","text":"1 Abstract Syntax | \u62bd\u8c61\u8bed\u6cd5 \u00b6 \u8bed\u6cd5 (syntax) \u89c4\u5b9a\u4e86\u5982\u4f55\u5c06\u5404\u79cd phrases(expr, commands / statements, decl, etc.) \u7ec4\u5408\u6210\u7a0b\u5e8f\u3002 \u8868\u5c42\u8bed\u6cd5\u6811 / \u5177\u4f53\u8bed\u6cd5\u6811 (surface syntax tree / concrete syntax tree): \u8868\u793a parse \u51fa\u7684\u7ed3\u679c\uff0c\u548c\u8bed\u6cd5\u89c4\u5219\u5bf9\u5e94\uff1b \u62bd\u8c61\u8bed\u6cd5\u6811 / \u7ed3\u6784\u8bed\u6cd5\u6811 (abstract syntax tree / structural syntax tree): \u6392\u9664\u4e86\u4e00\u4e9b\u65e0\u7528\u7684\u7ec4\u5206\uff0c\u4f8b\u5982 factor, term \u4e4b\u7c7b\u7684\u5185\u5bb9\uff1b\u8fd9\u4e9b\u5185\u5bb9\u53ea\u4e3a\u4e86 parse \u7684\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u5bf9 semantic \u5e2e\u52a9\u4e0d\u5927\u3002 1.1 Abstract Syntax Tree, AST | \u62bd\u8c61\u8bed\u6cd5\u6811 \u00b6 \u62bd\u8c61\u8bed\u6cd5\u6811\u662f\u4e00\u68f5\u6709\u5e8f\u6811\uff0c\u5176\u53f6\u5b50\u7ed3\u70b9\u4e3a \u53d8\u91cf (variable) \u6216\u8005\u6ca1\u6709 \u53c2\u6570 (argument) \u7684 \u8fd0\u7b97\u7b26(operator) \uff0c\u5176\u5185\u90e8\u8282\u70b9\u662f operators\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 variable \u548c operator \u4e0d\u80fd\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u76f8\u5173\u6982\u5ff5\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u68f5\u8bed\u6cd5\u6811\u91cc\uff0c\u8bf8\u5982\u300c\u51fd\u6570\u5b9a\u4e49\u300d( FUNCTION_DECL ) \u4e4b\u7c7b\u7684\u4e2d\u95f4\u8282\u70b9\u4e5f\u662f operator\uff1b\u800c\u300c\u6574\u578b\u300d( INTEGER ) \u4e4b\u7c7b\u7684\u53f6\u5b50\u7ed3\u70b9\u4e5f\u662f variable\u3002 \u53e6\u5916\uff0c\u4e25\u683c\u5730\u8bf4\uff0c\u4e0a\u9762\u8fd9\u5f20\u56fe\u5e76\u4e0d\u662f\u4e00\u68f5 AST (\u8fd9\u5f20\u56fe\u6765\u81ea\u6211\u7f16\u8bd1\u539f\u7406\u5927\u4f5c\u4e1a\u5bf9\u4e00\u4e2a\u4f8b\u7a0b\u751f\u6210\u7684\u8bed\u6cd5\u6811)\u3002\u9996\u5148\uff0c\u56fe\u4e2d\u4ecd\u7136\u4fdd\u7559\u4e86\u4e00\u4e9b\u5f62\u5982 STMT_LIST \u7684\u8282\u70b9\uff0c\u8fd9\u4e9b\u8282\u70b9\u4ecd\u5c5e\u4e8e concrete syntax \u7684\u8303\u7574\uff1b\u53e6\u5916\uff0c\u56fe\u4e2d\u7684 ID \u4e4b\u7c7b\u7684 variable \u6ce8\u660e\u4e86\u5176\u540d\u5b57\uff0c\u4f8b\u5982 ANS , GCD \u7b49\uff0c\u6240\u4ee5\u5b83\u6709\u6211\u4eec\u5728 1.2 \u4f1a\u8bb2\u5230\u7684 ABT \u7684\u6027\u8d28\u3002 AST \u6309\u8bed\u6cd5\u7684\u4e0d\u540c\u5f62\u5f0f\u5206\u4e3a\u4e0d\u540c\u7684 \u7c7b\u522b (sort) \uff0c\u8bb0\u4f5c \\(s\\) \u3002\u7c7b\u522b\u7684\u96c6\u5408\u8bb0\u4f5c \\(S\\) \u3002 Example \u4f8b\u5982\uff0c\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u533a\u5206 expression \u548c statement\uff0c\u8fd9\u5c31\u662f\u4e24\u4e2a\u4e0d\u540c\u7684 sort\uff0c\u5206\u522b\u8bb0\u4e3a \\(s_1\\) \u548c \\(s_2\\) \u3002 \u591a\u4e2a AST \u901a\u8fc7 operator \u8fdb\u884c\u7ec4\u5408\u3002\u6211\u4eec\u901a\u8fc7\u8fd0\u7b97\u7b26\u7684 \u5143\u6570 (arity) \u89c4\u5b9a\u8fd0\u7b97\u7b26\u7684 sort \\(s\\) \u53ca\u5176\u53c2\u6570\u7684\u6570\u76ee \\(n\\) \u548c sort \\(s_i\\) \uff0c\u8bb0\u4f5c \\((s_1, \\dots, s_n)s\\) \u3002 \u7528 \\(o\\) \u8868\u793a\u8fd0\u7b97\u7b26\uff0c\u5177\u6709 arity \\(\\alpha\\) \u7684\u8fd0\u7b97\u7b26\u7684\u96c6\u5408\u8bb0\u4f5c \\(O_\\alpha\\) \uff1b\u8bb0 \\(O = \\{O\\alpha\\}\\) \u4e3a\u4e00\u4e2a\u6309 arity \u7d22\u5f15\u7684\u3001\u7531\u4e92\u4e0d\u76f8\u4ea4\u7684 \\(O_\\alpha\\) \u6784\u6210\u7684\u96c6\u65cf\u3002 Example \u627f\u4e0a\u4f8b\uff0c\u5047\u8bbe \\(s_1\\) \u4e2d\u5b58\u5728\u8fd0\u7b97\u7b26 plus , times \u548c num \uff0c\u5b83\u4eec\u7684\u7ed3\u6784\u5206\u522b\u7c7b\u4f3c\u4e8e plus(expr1; expr2) , times(expr1; expr2) \u548c num[n] ( \u5176\u4e2d \\(n\\in \\mathbb{N}\\) )\uff1b \\(s_2\\) \u4e2d\u5b58\u5728\u8fd0\u7b97\u7b26 if \uff0c\u5b83\u7684\u7ed3\u6784\u7c7b\u4f3c\u4e8e if (expr) then stmt1 else stmt2 \u3002\u90a3\u4e48 plus \u548c times \u7684 arity \u5747\u8bb0\u4f5c \\((s_1, s_1)s_1\\) \uff0c\u800c num \u7684 arity \u8bb0\u4f5c \\((\\mathbb{N})s_1\\) \uff0c if \u7684 arity \u8bb0\u4f5c \\((s_1, s_2, s_2)s_2\\) \u3002 Variables \u7528 \\(x\\) \u6765\u8868\u793a\uff1bsort \\(s\\) \u4e0a\u7684\u53d8\u91cf\u96c6\u5408\u8bb0\u4e3a \\(X_s\\) \uff1bsort \u96c6\u5408 \\(S\\) \u4e0a\u7684 \u53d8\u91cf\u65cf \u5b9a\u4e49\u4e3a \\(X = \\{X_s\\}_{s \\in S}\\) \u3002 \u53d8\u91cf\u662f\u67d0\u4e2a\u9886\u57df\u5185\u7684\u672a\u77e5\u7684\u5bf9\u8c61\uff0c\u7528\u7279\u5b9a\u5bf9\u8c61 \u4ee3\u6362 (substitution) \u67d0\u4e2a\u8868\u8fbe\u4e2d\u7684\u5168\u90e8\u540c\u4e2a\u53d8\u91cf\uff0c\u5219\u53d8\u91cf\u6210\u4e3a\u5df2\u77e5\u3002 \u53d8\u91cf\u662f\u4e00\u4e2a\u672a\u77e5\u7684\u5bf9\u8c61\u6216\u8005\u5360\u4f4d\u7b26\uff0c\u5176\u542b\u4e49\u7531\u4ee3\u6362\u8d4b\u4e88\u3002 Example \u627f\u4e0a\u4f8b\uff0c \\(2 + (3 \\times x)\\) \u53ef\u4ee5\u8868\u8fbe\u4e3a plus(num[2]; times(num[3]; x)) \u3002\u8fd9\u91cc \\(x\\) \u662f\u4e00\u4e2a\u53d8\u91cf\u3002 \u7531\u4e8e num[4] \u4e5f\u662f \\(s_1\\) \u7c7b\u578b\u7684 AST\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u5b83 \u4ee3\u6362 \u4e0a\u9762 AST \u4e2d\u7684 \\(x\\) \uff0c\u5f97\u5230 plus(num[2]; times(num[3]; num[4])) \u3002 \u540c\u65f6\uff0c\u7531\u4e8e plus(num[1]; num[2]) \u4e5f\u662f \\(s_1\\) \u7c7b\u578b\u7684 AST\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528\u5b83\u4ee3\u6362\u4e0a\u9762 AST \u4e2d\u7684 \\(x\\) \uff0c\u5f97\u5230 plus(num[2]; times(num[3]; plus(num[1]; num[2]))) \u3002 \u7ed9\u5b9a\u4e00\u4e2a sort \u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a operator \u96c6\u65cf \\(O\\) \uff0cvariable \u96c6\u65cf \\(X = \\{X_s\\}_{s \\in S}\\) \u5b9a\u4e49\u540c\u524d\u3002\u90a3\u4e48\uff1a \u5f53 \\(X\\) \u4e0a\u4e0b\u6587\u65e0\u5173 (context-free) \u65f6\uff0c\u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48\u79f0 \\(x\\) \u7684\u7c7b\u522b\u4e3a \\(s\\) \uff1b \u5982\u679c\u5bf9\u4e8e\u4efb\u610f \\(s\\in S\\) \u90fd\u6709 \\(x \\not \\in X_s\\) \uff0c\u90a3\u4e48\u79f0 \\(x\\) \u5bf9 \\(X\\) \u662f \u65b0 \u7684 ( \\(x\\) is fresh to \\(X\\) )\uff1b \u5982\u679c \\(x\\) is fresh to \\(X\\) \uff0c\u4e14 \\(s\\) \u662f\u4e00\u4e2a sort\uff0c\u90a3\u4e48\u79f0 \\(X, x\\) \u662f\u901a\u8fc7\u589e\u52a0 \\(x\\) \u5230 \\(X_s\\) \u6240\u5f97\u7684\u53d8\u91cf\u96c6\u65cf\uff1b \u5982\u679c \\(s\\) \u7531\u4e0a\u4e0b\u6587\u51b3\u5b9a\u800c\u4e0d\u662f\u663e\u5f0f\u58f0\u660e\u65f6\uff0c\u8fd9\u4e2a\u8bb0\u6cd5\u662f\u6709\u6b67\u4e49 (ambiguous) \u7684\u3002 Error \u4e0a\u9762\u8fd9\u6bb5\u8fd8\u6ca1\u770b\u61c2\uff0c\u4e4b\u540e\u56de\u6765\u8865 \u6211\u4eec\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa AST \u7684\u5b9a\u4e49\u3002AST \u7684\u65cf \\(A[X] = \\{A[X]_s\\}_{s\\in S}\\) \u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6700\u5c0f\u65cf\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in A[X]_s\\) \u3002\u5373\uff0c\u4e00\u4e2a\u7c7b\u522b\u662f \\(s\\) \u7684\u53d8\u91cf\u662f\u4e00\u68f5\u7c7b\u522b\u4e3a \\(s\\) \u7684 AST\uff1b \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((s_1, \\dots, s_n)s\\) \uff0c\u4e14 \\(a_1 \\in A[X]_{s_1}, \\dots, a_n \\in A[X]_{s_n}\\) \uff0c\u90a3\u4e48 \\(o(a_1;\\dots ;a_n) \\in A[X]_s\\) \u3002\u5373\uff0c\u7528\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7ec4\u5408 AST\u3002 Structural Induction | \u7ed3\u6784\u5f52\u7eb3\u6cd5 \u6839\u636e\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c\u7531\u4e8e AST \u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8bc1\u660e\u6240\u6709 AST \\(a\\) \u90fd\u5177\u6709\u6027\u8d28 \\(P(a)\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u6240\u6709\u751f\u6210 \\(a\\) \u7684\u65b9\u5f0f\uff0c\u90fd\u8bc1\u660e\uff1a\u300c\u5982\u679c\u5176\u5b50 AST \u90fd\u5177\u6709\u8be5\u6027\u8d28\uff0c\u90a3\u4e48\u751f\u6210\u7684 \\(a\\) \u4e5f\u5177\u6709\u8be5\u6027\u8d28\u300d\u5373\u53ef\u3002\u5373\u8bc1\u660e\uff1a \u5982\u679c \\(x\\in X_s\\) \uff0c\u5219 \\(P_s(x)\\) \uff1b \u5982\u679c \\((s_1, \\dots, s_n)s\\) \uff0c\u4e14 \\(P_{s_1}(a_1), \\dots, P_{s_n}(a_n)\\) \u90fd\u6210\u7acb\uff0c\u90a3\u4e48 \\(P_s(o(a_1;\\dots ;a_n))\\) \u4e5f\u6210\u7acb \u5373\u53ef\u3002 \u6211\u4eec\u8fdb\u4e00\u6b65\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa\u53d8\u91cf\u4ee3\u6362\u7684\u5b9a\u4e49\u3002\u5982\u679c \\(a\\in A[X, x]_s, b\\in A[X]_s\\) \uff0c\u5219\u7528 \\(b\\) \u4ee3\u6362 \\(a\\) \u4e2d\u6240\u6709 \\(x\\) \u5f97\u5230\u7684\u7ed3\u679c\u662f \\([b / x]a\\in A[X]_s\\) \uff0c\u5b9a\u4e49\u4e3a\uff1a \\([b / x]x = b\\) \\([b / x]y = y\\) \\([b / x]o(a_1; \\dots; a_n) = o([b / x]a_1; \\dots; [b / x]a_n)\\) \u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c \\(a\\in A[X, x]_s\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f \\(b\\in A[X]\\) \u90fd\u5b58\u5728\u552f\u4e00\u7684 \\(c\\in A[X]\\) \u6ee1\u8db3 \\([b / x]a = c\\) \u3002 \u8bc1\u660e (\u8bfe\u5802\u4e0a\u300c\u8ba9\u5927\u5bb6\u56de\u53bb\u601d\u8003\u300d) \u5bf9 \\(a\\) \u4f7f\u7528\u7ed3\u6784\u5f52\u7eb3\u6cd5\uff1a \u5982\u679c \\(a = x\\) \uff0c\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\u6709 \\(c = b\\) \uff1b \u5982\u679c \\(a = y \\neq x\\) \uff0c\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\u6709 \\(c = y\\) \uff1b \u5982\u679c \\(a = o(a_1; \\dots; a_n)\\) \uff0c\u6839\u636e\u5f52\u7eb3\u5047\u8bbe\uff0c\u6709\u552f\u4e00\u7684 \\(c_1, \\dots, c_n\\) \u6ee1\u8db3 \\(c_1 = [b / x]a_1, \\dots, c_n = [b / x]a_n\\) \uff0c\u56e0\u6b64 \\(c = o(c_1; \\dots; c_n)\\) \u3002 1.2 Abstract Binding Tree, ABT | \u62bd\u8c61\u7ed1\u5b9a\u6811 \u00b6 \u300e\u5982\u679c\u4f60\u53bb\u7f51\u4e0a\u641c\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\u9664\u4e86\u8fd9\u672c\u4e66\u4ee5\u5916\u6ca1\u6709\u4eba\u8bf4 ABT \u8fd9\u4e2a\u6982\u5ff5\u3002\u300f \u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f let x be expr1 in expr2 \uff0c\u8868\u793a\u5f15\u5165\u4e00\u4e2a\u53d8\u91cf x \uff0c\u7528\u4e8e\u5728\u8868\u8fbe\u5f0f expr2 \u4e2d\u8868\u793a expr1 \u3002 \u53d8\u91cf x \u53d7 let \u8868\u8fbe\u5f0f\u7684\u7ea6\u675f\uff0c\u53ea\u7528\u5728 expr2 \u4e2d\u3002\u5728 expr1 \u4e2d\u5982\u679c\u6709\u4efb\u4f55 x \u90fd\u53ea\u662f\u78b0\u5de7\u540d\u5b57\u76f8\u540c\u7684\u4e0d\u540c\u53d8\u91cf\uff1b\u8fd9\u6709\u4e9b\u7c7b\u4f3c\u4e8e \\((\\lambda\\ expr1. expr2)\\ x\\) \u3002\u4e0e \\(\\lambda\\) \u6f14\u7b97\u4e00\u6837\uff0c\u7ea6\u675f\u53d8\u91cf\u53ef\u4ee5\u6362\u540d\u3002 Example \u4f8b\u5982 let x be num[7] in plus(x; x) \u5c31\u53ef\u4ee5\u5f97\u5230 plus(num[7]; num[7]) \u3002\u7c7b\u4f3c\u4e8e \\((\\lambda\\ x.x + x)\\ 7 = 7 + 7\\) \u3002 \u800c\u5bf9\u4e8e let x be times(x; x) in plus(x; x) \uff0c\u5c31\u7c7b\u4f3c\u4e8e \\((\\lambda\\ x.x + x)\\ (x * x) = x * x + x * x\\) \u3002\u6839\u636e \\(\\lambda\\) \u6f14\u7b97\u7684\u76f8\u5173\u77e5\u8bc6\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u91cc times \u4e2d\u7684 x \u548c plus \u4e2d\u7684 x \u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u3002 \u5bb9\u6613\u7406\u89e3\uff0c let y be times(x; x) in plus(y; y) \u4e0e\u4e0a\u5f0f\u8868\u8fbe\u7684\u542b\u4e49\u4e00\u81f4\uff1b\u5373\u7ea6\u675f\u53d8\u91cf\u53ef\u4ee5\u6362\u540d\u3002 \u6211\u4eec\u7528 \\(x_1, \\dots, x_k.a\\) \u7684\u5f62\u5f0f\u8868\u793a\u5c06\u53d8\u91cf\u5e8f\u5217 \\(x_1, \\dots, x_k\\) \u7ed1\u5b9a (bind) \u5230\u8fd0\u7b97\u7b26 \\(a\\) \u7684\u53c2\u6570\u4e0a\uff0c\u4ece\u800c\u5c06\u4ee5 \\(a\\) \u4e3a\u6839\u7684 AST \u6cdb\u5316\u4e3a\u4e00\u68f5 \u62bd\u8c61\u7ed1\u5b9a\u6811 (Abstract Binding Tree, ABT) \u3002 \\(x_1, \\dots, x_k.a\\) \u79f0\u4e3a \u62bd\u8c61\u5b50 (abstractor) \uff1b\u8fd9\u8868\u793a\u53d8\u91cf\u5e8f\u5217 \\(x_1, \\dots, x_k\\) \u5728 ABT \\(a\\) \u4e2d\u662f\u7ea6\u675f\u7684 (bound)\u3002\u5728 \\(k = 0\\) \u65f6\uff0c \\(.a\\) \u53ef\u4ee5\u7b80\u5199\u4e3a \\(a\\) \u3002\u901a\u5e38\u6211\u4eec\u5c06 \\(x_1, \\dots, x_k\\) \u8bb0\u4e3a \\(\\vec{x}\\) \uff0c\u4ece\u800c\u7528 \\(\\vec{x}.a\\) \u8868\u793a \\(x_1, \\dots, x_k.a\\) \u3002 \u8fd9\u79cd\u7ed1\u5b9a\u51b3\u5b9a\u4e86 \\(\\vec{x}\\) \u7684 \u4f5c\u7528\u57df (scope) \u662f ABT \\(a\\) \u3002 \u524d\u9762\u7684 let x be expr1 in expr2 \u5c31\u662f let(expr1; x.expr2) \u3002\u8fd9\u4e2a\u5f62\u5f0f\u8868\u793a x \u5728 expr2 \u4e2d\u662f\u7ea6\u675f\u7684\uff0c\u6216\u8005\u8bf4 x \u7684\u4f5c\u7528\u57df\u662f expr2 \u3002 Example \u524d\u4f8b\u4e2d let x be num[7] in plus(x; x) \u8868\u793a\u4e3a let(num[7]; x.plus(x; x)) \uff1b let x be times(x; x) in plus(x; x) \u53ef\u4ee5\u8868\u793a\u4e3a let(times(x; x); x.plus(x; x)) \u3002\u540e\u8005\u8868\u793a\u7684 ABT \u5f62\u5982\uff1a \u7ed1\u5b9a\u4f7f\u5f97 operator \u7684 arity \u5f97\u5230\u4e86\u6cdb\u5316\u3002\u5143\u6570\u5f62\u5982 \\((s_1, \\dots, s_n)s\\) \uff0c\u800c \u6cdb\u5316\u5143\u6570 (generalized arity) \u5f62\u5982 \\((v_1, \\dots, v_n)s\\) \uff1b\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(v\\) \u79f0\u4e3a\u4e00\u4e2a \u4ef7 (valence) \uff0c\u5177\u6709 \\(s_1, \\dots, s_k.s\\) \u5373 \\(\\vec{s}.s\\) \u7684\u5f62\u5f0f\uff0c\u6307\u5b9a\u4e86\u53c2\u6570\u7684\u7c7b\u522b\u4ee5\u53ca\u6240\u7ed1\u5b9a\u7684\u53d8\u91cf\u7684\u6570\u91cf\u548c\u7c7b\u522b\u3002 \u6211\u4eec\u79f0\u53d8\u91cf\u5e8f\u5217 \\(\\vec{x}\\) \u5c5e\u4e8e \\(\\vec{s}\\) \uff0c\u5982\u679c\u5b83\u4eec\u6709\u76f8\u540c\u7684\u957f\u5ea6 \\(k\\) \uff0c\u4e14\u5bf9\u6bcf\u4e00\u4e2a \\(1 \\le i \\le k\\) \u90fd\u6709 \\(x_i\\) \u7684\u7c7b\u522b\u662f \\(s_i\\) \u3002 Example \u524d\u4f8b\u4e2d let \u8fd0\u7b97\u7b26\u7684\u5143\u6570\uff08\u6cdb\u5316\u5143\u6570\uff0c\u4f46\u300c\u6cdb\u5316\u300d\u6839\u636e\u4e0a\u4e0b\u6587\u53ef\u4ee5\u63a8\u65ad\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b80\u79f0\u4e3a\u5143\u6570\uff0c\u540e\u540c\uff09\u4e3a \\((s_1, s_1.s_1)s_1\\) \u3002\u8fd9\u8868\u793a let \u8fd0\u7b97\u7b26\u7684\u7c7b\u522b\u662f \\(s_1\\) \uff08\u5373\u8868\u8fbe\u5f0f\uff0c\u53c2\u89c1 1.1 \u4f8b\u5b50\u4e2d\u7684\u5b9a\u4e49\uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e0d\u7ed1\u5b9a\u4efb\u4f55\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u542b\u6709\u4e00\u4e2a\u7ea6\u675f\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\uff0c\u7ea6\u675f\u53d8\u91cf\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa ABT \u7684\u5b9a\u4e49\u3002ABT \u7684\u65cf \\(B[X]\\) \u7684\u5b9a\u4e49\u4e0e AST \u7684\u65cf \\(A[X]\\) \u7684\u5b9a\u4e49\u7c7b\u4f3c\uff0c\u4f46\u662f \\(X\\) \u5728\u8fdb\u5165\u62bd\u8c61\u5b50\u7684\u4f5c\u7528\u57df\u65f6\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u6211\u4eec\u5c1d\u8bd5\u8fd9\u6837\u5b9a\u4e49 ABT\uff1aABT \u7684\u65cf \\(B[X] = \\{B[X]_s\\}_{s\\in S}\\) \u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6700\u5c0f\u65cf\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in B[X]_s\\) \u3002\u5373\uff0c\u4e00\u4e2a\u7c7b\u522b\u662f \\(s\\) \u7684\u53d8\u91cf\u662f\u4e00\u68f5\u7c7b\u522b\u4e3a \\(s\\) \u7684 ABT\uff1b \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((\\vec{s_1}.s_1, \\dots, \\vec{s_n}.s_n)s\\) \uff0c\u4e14 \\(a_1 \\in B[X, \\vec{x_1}]_{s_1}, \\dots, a_n \\in B[X, \\vec{x_n}]_{s_n}\\) \uff0c\u90a3\u4e48 \\(o(\\vec{x_1}.a_1;\\dots ;\\vec{x_n}.a_n) \\in B[X]_s\\) \u3002\u5373\uff0c\u7528\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7ec4\u5408 ABT\u3002 \u8fd9\u79cd\u5b9a\u4e49\u7684\u95ee\u9898\u662f\uff0c\u5f62\u5982 let(expr1; x.let(expr2; x.expr3)) \u7684 ABT \u662f ill-formed \u7684\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u7ed1\u5b9a\u5c06 \\(x\\) \u6dfb\u52a0\u5230 \\(X\\) \u5f97\u5230 \\(x.X\\) \uff0c\u8fd9\u4f7f\u5f97\u7b2c\u4e8c\u4e2a\u7ed1\u5b9a\u4e0d\u80fd\u518d\u5c06 \\(x\\) \u6dfb\u52a0\u5230 \\(X.x\\) \u4e2d\uff0c\u56e0\u4e3a \\(x\\) \u5bf9\u4e8e \\(X.x\\) \u6765\u8bf4\u4e0d\u662f\u65b0\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u79cd\u5b9a\u4e49\u6ca1\u6709\u6b63\u786e\u89e3\u91ca\u7ea6\u675f\u53d8\u91cf\u7684\u6362\u540d \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 fresh renaming \u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u800c\u8a00\uff0c\u7ed9\u5b9a\u53d8\u91cf\u65cf \\(X\\) \uff0c \\(\\vec{x}\\) \u7684 fresh renaming \u5b9a\u4e49\u4e3a\u4e00\u4e2a \\(\\vec{x}\\) \u5230 \\(\\vec{x}'\\) \u7684\u4e00\u4e2a\u53cc\u5c04 \\(\\rho : \\vec{x} \\leftrightarrow \\vec{x}'\\) \uff0c\u5176\u4e2d \\(\\vec{x}'\\) \u5bf9\u4e8e \\(X\\) \u800c\u8a00\u662f\u65b0\u7684\u3002\u6211\u4eec\u7528 \\(\\hat\\rho (a)\\) \u8868\u793a\u5c06 \\(a\\) \u4e2d\u7684\u6bcf\u4e2a \\(x_i\\) \u7684\u51fa\u73b0\u66ff\u6362\u4e3a \\(\\rho(x_i)\\) \u540e\u7684\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u7ed9\u51fa ABT \u7684\u65cf \\(B[X] = \\{B[X]_s\\}_{s\\in S}\\) \u7684\u6b63\u786e\u5b9a\u4e49\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in B[X]_s\\) \u3002 \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((\\vec{s_1}.s_1, \\dots, \\vec{s_n}.s_n)s\\) \uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a \\(1 \\le i \\le n\\) \u548c\u5bf9\u5e94\u7684 fresh renaming \\(\\rho_i : \\vec{x}_i \\leftrightarrow \\vec{x}_i'\\) \uff0c\u90fd\u6709 \\(\\hat\\rho_i(a_i) \\in B[X, \\vec{x_i}']\\) \uff0c\u90a3\u4e48 \\(o(\\vec{x_1}.a_1;\\dots ;\\vec{x_n}.a_n) \\in B[X]_s\\) \u3002 \u5b9a\u4e49\u8fd9\u79cd\u610f\u4e49\u4e0b\u7684\u7ed3\u6784\u5f52\u7eb3\u6cd5\uff1a structural induction modulo fresh renaming \u3002\uff08\u6ca1\u8bb2\uff0c\u4e14\u61d2\u5f97\u770b\uff09 \u5b9a\u4e49 \\(\\alpha\\) -\u7b49\u4ef7 ( \\(\\alpha\\) -equivalence)\u3002\uff08\u8bb2\u4e86\uff0c\u4f46\u61d2\u5f97\u770b\uff09 ABT \u6839\u636e\u662f\u5426 \\(\\alpha\\) -\u7b49\u4ef7\u5224\u5b9a\u662f\u5426\u76f8\u540c\u3002 \u5b9a\u4e49 ABT \u4e0a\u7684\u4ee3\u6362\u3002\uff08\u4e5f\u8bb2\u4e86\uff0c\u4e5f\u61d2\u5f97\u770b\uff09","title":"1 \u62bd\u8c61\u8bed\u6cd5"},{"location":"pl/ppl_notes/1_Abstract_Syntax/#1-abstract-syntax--\u62bd\u8c61\u8bed\u6cd5","text":"\u8bed\u6cd5 (syntax) \u89c4\u5b9a\u4e86\u5982\u4f55\u5c06\u5404\u79cd phrases(expr, commands / statements, decl, etc.) \u7ec4\u5408\u6210\u7a0b\u5e8f\u3002 \u8868\u5c42\u8bed\u6cd5\u6811 / \u5177\u4f53\u8bed\u6cd5\u6811 (surface syntax tree / concrete syntax tree): \u8868\u793a parse \u51fa\u7684\u7ed3\u679c\uff0c\u548c\u8bed\u6cd5\u89c4\u5219\u5bf9\u5e94\uff1b \u62bd\u8c61\u8bed\u6cd5\u6811 / \u7ed3\u6784\u8bed\u6cd5\u6811 (abstract syntax tree / structural syntax tree): \u6392\u9664\u4e86\u4e00\u4e9b\u65e0\u7528\u7684\u7ec4\u5206\uff0c\u4f8b\u5982 factor, term \u4e4b\u7c7b\u7684\u5185\u5bb9\uff1b\u8fd9\u4e9b\u5185\u5bb9\u53ea\u4e3a\u4e86 parse \u7684\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u5bf9 semantic \u5e2e\u52a9\u4e0d\u5927\u3002","title":"1 Abstract Syntax | \u62bd\u8c61\u8bed\u6cd5"},{"location":"pl/ppl_notes/1_Abstract_Syntax/#11-abstract-syntax-tree-ast--\u62bd\u8c61\u8bed\u6cd5\u6811","text":"\u62bd\u8c61\u8bed\u6cd5\u6811\u662f\u4e00\u68f5\u6709\u5e8f\u6811\uff0c\u5176\u53f6\u5b50\u7ed3\u70b9\u4e3a \u53d8\u91cf (variable) \u6216\u8005\u6ca1\u6709 \u53c2\u6570 (argument) \u7684 \u8fd0\u7b97\u7b26(operator) \uff0c\u5176\u5185\u90e8\u8282\u70b9\u662f operators\u3002 Note \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684 variable \u548c operator \u4e0d\u80fd\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u76f8\u5173\u6982\u5ff5\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u8fd9\u68f5\u8bed\u6cd5\u6811\u91cc\uff0c\u8bf8\u5982\u300c\u51fd\u6570\u5b9a\u4e49\u300d( FUNCTION_DECL ) \u4e4b\u7c7b\u7684\u4e2d\u95f4\u8282\u70b9\u4e5f\u662f operator\uff1b\u800c\u300c\u6574\u578b\u300d( INTEGER ) \u4e4b\u7c7b\u7684\u53f6\u5b50\u7ed3\u70b9\u4e5f\u662f variable\u3002 \u53e6\u5916\uff0c\u4e25\u683c\u5730\u8bf4\uff0c\u4e0a\u9762\u8fd9\u5f20\u56fe\u5e76\u4e0d\u662f\u4e00\u68f5 AST (\u8fd9\u5f20\u56fe\u6765\u81ea\u6211\u7f16\u8bd1\u539f\u7406\u5927\u4f5c\u4e1a\u5bf9\u4e00\u4e2a\u4f8b\u7a0b\u751f\u6210\u7684\u8bed\u6cd5\u6811)\u3002\u9996\u5148\uff0c\u56fe\u4e2d\u4ecd\u7136\u4fdd\u7559\u4e86\u4e00\u4e9b\u5f62\u5982 STMT_LIST \u7684\u8282\u70b9\uff0c\u8fd9\u4e9b\u8282\u70b9\u4ecd\u5c5e\u4e8e concrete syntax \u7684\u8303\u7574\uff1b\u53e6\u5916\uff0c\u56fe\u4e2d\u7684 ID \u4e4b\u7c7b\u7684 variable \u6ce8\u660e\u4e86\u5176\u540d\u5b57\uff0c\u4f8b\u5982 ANS , GCD \u7b49\uff0c\u6240\u4ee5\u5b83\u6709\u6211\u4eec\u5728 1.2 \u4f1a\u8bb2\u5230\u7684 ABT \u7684\u6027\u8d28\u3002 AST \u6309\u8bed\u6cd5\u7684\u4e0d\u540c\u5f62\u5f0f\u5206\u4e3a\u4e0d\u540c\u7684 \u7c7b\u522b (sort) \uff0c\u8bb0\u4f5c \\(s\\) \u3002\u7c7b\u522b\u7684\u96c6\u5408\u8bb0\u4f5c \\(S\\) \u3002 Example \u4f8b\u5982\uff0c\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u533a\u5206 expression \u548c statement\uff0c\u8fd9\u5c31\u662f\u4e24\u4e2a\u4e0d\u540c\u7684 sort\uff0c\u5206\u522b\u8bb0\u4e3a \\(s_1\\) \u548c \\(s_2\\) \u3002 \u591a\u4e2a AST \u901a\u8fc7 operator \u8fdb\u884c\u7ec4\u5408\u3002\u6211\u4eec\u901a\u8fc7\u8fd0\u7b97\u7b26\u7684 \u5143\u6570 (arity) \u89c4\u5b9a\u8fd0\u7b97\u7b26\u7684 sort \\(s\\) \u53ca\u5176\u53c2\u6570\u7684\u6570\u76ee \\(n\\) \u548c sort \\(s_i\\) \uff0c\u8bb0\u4f5c \\((s_1, \\dots, s_n)s\\) \u3002 \u7528 \\(o\\) \u8868\u793a\u8fd0\u7b97\u7b26\uff0c\u5177\u6709 arity \\(\\alpha\\) \u7684\u8fd0\u7b97\u7b26\u7684\u96c6\u5408\u8bb0\u4f5c \\(O_\\alpha\\) \uff1b\u8bb0 \\(O = \\{O\\alpha\\}\\) \u4e3a\u4e00\u4e2a\u6309 arity \u7d22\u5f15\u7684\u3001\u7531\u4e92\u4e0d\u76f8\u4ea4\u7684 \\(O_\\alpha\\) \u6784\u6210\u7684\u96c6\u65cf\u3002 Example \u627f\u4e0a\u4f8b\uff0c\u5047\u8bbe \\(s_1\\) \u4e2d\u5b58\u5728\u8fd0\u7b97\u7b26 plus , times \u548c num \uff0c\u5b83\u4eec\u7684\u7ed3\u6784\u5206\u522b\u7c7b\u4f3c\u4e8e plus(expr1; expr2) , times(expr1; expr2) \u548c num[n] ( \u5176\u4e2d \\(n\\in \\mathbb{N}\\) )\uff1b \\(s_2\\) \u4e2d\u5b58\u5728\u8fd0\u7b97\u7b26 if \uff0c\u5b83\u7684\u7ed3\u6784\u7c7b\u4f3c\u4e8e if (expr) then stmt1 else stmt2 \u3002\u90a3\u4e48 plus \u548c times \u7684 arity \u5747\u8bb0\u4f5c \\((s_1, s_1)s_1\\) \uff0c\u800c num \u7684 arity \u8bb0\u4f5c \\((\\mathbb{N})s_1\\) \uff0c if \u7684 arity \u8bb0\u4f5c \\((s_1, s_2, s_2)s_2\\) \u3002 Variables \u7528 \\(x\\) \u6765\u8868\u793a\uff1bsort \\(s\\) \u4e0a\u7684\u53d8\u91cf\u96c6\u5408\u8bb0\u4e3a \\(X_s\\) \uff1bsort \u96c6\u5408 \\(S\\) \u4e0a\u7684 \u53d8\u91cf\u65cf \u5b9a\u4e49\u4e3a \\(X = \\{X_s\\}_{s \\in S}\\) \u3002 \u53d8\u91cf\u662f\u67d0\u4e2a\u9886\u57df\u5185\u7684\u672a\u77e5\u7684\u5bf9\u8c61\uff0c\u7528\u7279\u5b9a\u5bf9\u8c61 \u4ee3\u6362 (substitution) \u67d0\u4e2a\u8868\u8fbe\u4e2d\u7684\u5168\u90e8\u540c\u4e2a\u53d8\u91cf\uff0c\u5219\u53d8\u91cf\u6210\u4e3a\u5df2\u77e5\u3002 \u53d8\u91cf\u662f\u4e00\u4e2a\u672a\u77e5\u7684\u5bf9\u8c61\u6216\u8005\u5360\u4f4d\u7b26\uff0c\u5176\u542b\u4e49\u7531\u4ee3\u6362\u8d4b\u4e88\u3002 Example \u627f\u4e0a\u4f8b\uff0c \\(2 + (3 \\times x)\\) \u53ef\u4ee5\u8868\u8fbe\u4e3a plus(num[2]; times(num[3]; x)) \u3002\u8fd9\u91cc \\(x\\) \u662f\u4e00\u4e2a\u53d8\u91cf\u3002 \u7531\u4e8e num[4] \u4e5f\u662f \\(s_1\\) \u7c7b\u578b\u7684 AST\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u5b83 \u4ee3\u6362 \u4e0a\u9762 AST \u4e2d\u7684 \\(x\\) \uff0c\u5f97\u5230 plus(num[2]; times(num[3]; num[4])) \u3002 \u540c\u65f6\uff0c\u7531\u4e8e plus(num[1]; num[2]) \u4e5f\u662f \\(s_1\\) \u7c7b\u578b\u7684 AST\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528\u5b83\u4ee3\u6362\u4e0a\u9762 AST \u4e2d\u7684 \\(x\\) \uff0c\u5f97\u5230 plus(num[2]; times(num[3]; plus(num[1]; num[2]))) \u3002 \u7ed9\u5b9a\u4e00\u4e2a sort \u96c6\u5408 \\(S\\) \u548c\u4e00\u4e2a operator \u96c6\u65cf \\(O\\) \uff0cvariable \u96c6\u65cf \\(X = \\{X_s\\}_{s \\in S}\\) \u5b9a\u4e49\u540c\u524d\u3002\u90a3\u4e48\uff1a \u5f53 \\(X\\) \u4e0a\u4e0b\u6587\u65e0\u5173 (context-free) \u65f6\uff0c\u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48\u79f0 \\(x\\) \u7684\u7c7b\u522b\u4e3a \\(s\\) \uff1b \u5982\u679c\u5bf9\u4e8e\u4efb\u610f \\(s\\in S\\) \u90fd\u6709 \\(x \\not \\in X_s\\) \uff0c\u90a3\u4e48\u79f0 \\(x\\) \u5bf9 \\(X\\) \u662f \u65b0 \u7684 ( \\(x\\) is fresh to \\(X\\) )\uff1b \u5982\u679c \\(x\\) is fresh to \\(X\\) \uff0c\u4e14 \\(s\\) \u662f\u4e00\u4e2a sort\uff0c\u90a3\u4e48\u79f0 \\(X, x\\) \u662f\u901a\u8fc7\u589e\u52a0 \\(x\\) \u5230 \\(X_s\\) \u6240\u5f97\u7684\u53d8\u91cf\u96c6\u65cf\uff1b \u5982\u679c \\(s\\) \u7531\u4e0a\u4e0b\u6587\u51b3\u5b9a\u800c\u4e0d\u662f\u663e\u5f0f\u58f0\u660e\u65f6\uff0c\u8fd9\u4e2a\u8bb0\u6cd5\u662f\u6709\u6b67\u4e49 (ambiguous) \u7684\u3002 Error \u4e0a\u9762\u8fd9\u6bb5\u8fd8\u6ca1\u770b\u61c2\uff0c\u4e4b\u540e\u56de\u6765\u8865 \u6211\u4eec\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa AST \u7684\u5b9a\u4e49\u3002AST \u7684\u65cf \\(A[X] = \\{A[X]_s\\}_{s\\in S}\\) \u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6700\u5c0f\u65cf\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in A[X]_s\\) \u3002\u5373\uff0c\u4e00\u4e2a\u7c7b\u522b\u662f \\(s\\) \u7684\u53d8\u91cf\u662f\u4e00\u68f5\u7c7b\u522b\u4e3a \\(s\\) \u7684 AST\uff1b \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((s_1, \\dots, s_n)s\\) \uff0c\u4e14 \\(a_1 \\in A[X]_{s_1}, \\dots, a_n \\in A[X]_{s_n}\\) \uff0c\u90a3\u4e48 \\(o(a_1;\\dots ;a_n) \\in A[X]_s\\) \u3002\u5373\uff0c\u7528\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7ec4\u5408 AST\u3002 Structural Induction | \u7ed3\u6784\u5f52\u7eb3\u6cd5 \u6839\u636e\u4e0a\u9762\u7684\u5b9a\u4e49\uff0c\u7531\u4e8e AST \u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8bc1\u660e\u6240\u6709 AST \\(a\\) \u90fd\u5177\u6709\u6027\u8d28 \\(P(a)\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u6240\u6709\u751f\u6210 \\(a\\) \u7684\u65b9\u5f0f\uff0c\u90fd\u8bc1\u660e\uff1a\u300c\u5982\u679c\u5176\u5b50 AST \u90fd\u5177\u6709\u8be5\u6027\u8d28\uff0c\u90a3\u4e48\u751f\u6210\u7684 \\(a\\) \u4e5f\u5177\u6709\u8be5\u6027\u8d28\u300d\u5373\u53ef\u3002\u5373\u8bc1\u660e\uff1a \u5982\u679c \\(x\\in X_s\\) \uff0c\u5219 \\(P_s(x)\\) \uff1b \u5982\u679c \\((s_1, \\dots, s_n)s\\) \uff0c\u4e14 \\(P_{s_1}(a_1), \\dots, P_{s_n}(a_n)\\) \u90fd\u6210\u7acb\uff0c\u90a3\u4e48 \\(P_s(o(a_1;\\dots ;a_n))\\) \u4e5f\u6210\u7acb \u5373\u53ef\u3002 \u6211\u4eec\u8fdb\u4e00\u6b65\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa\u53d8\u91cf\u4ee3\u6362\u7684\u5b9a\u4e49\u3002\u5982\u679c \\(a\\in A[X, x]_s, b\\in A[X]_s\\) \uff0c\u5219\u7528 \\(b\\) \u4ee3\u6362 \\(a\\) \u4e2d\u6240\u6709 \\(x\\) \u5f97\u5230\u7684\u7ed3\u679c\u662f \\([b / x]a\\in A[X]_s\\) \uff0c\u5b9a\u4e49\u4e3a\uff1a \\([b / x]x = b\\) \\([b / x]y = y\\) \\([b / x]o(a_1; \\dots; a_n) = o([b / x]a_1; \\dots; [b / x]a_n)\\) \u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c \\(a\\in A[X, x]_s\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f \\(b\\in A[X]\\) \u90fd\u5b58\u5728\u552f\u4e00\u7684 \\(c\\in A[X]\\) \u6ee1\u8db3 \\([b / x]a = c\\) \u3002 \u8bc1\u660e (\u8bfe\u5802\u4e0a\u300c\u8ba9\u5927\u5bb6\u56de\u53bb\u601d\u8003\u300d) \u5bf9 \\(a\\) \u4f7f\u7528\u7ed3\u6784\u5f52\u7eb3\u6cd5\uff1a \u5982\u679c \\(a = x\\) \uff0c\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\u6709 \\(c = b\\) \uff1b \u5982\u679c \\(a = y \\neq x\\) \uff0c\u90a3\u4e48\u6839\u636e\u5b9a\u4e49\u6709 \\(c = y\\) \uff1b \u5982\u679c \\(a = o(a_1; \\dots; a_n)\\) \uff0c\u6839\u636e\u5f52\u7eb3\u5047\u8bbe\uff0c\u6709\u552f\u4e00\u7684 \\(c_1, \\dots, c_n\\) \u6ee1\u8db3 \\(c_1 = [b / x]a_1, \\dots, c_n = [b / x]a_n\\) \uff0c\u56e0\u6b64 \\(c = o(c_1; \\dots; c_n)\\) \u3002","title":"1.1 Abstract Syntax Tree, AST | \u62bd\u8c61\u8bed\u6cd5\u6811"},{"location":"pl/ppl_notes/1_Abstract_Syntax/#12-abstract-binding-tree-abt--\u62bd\u8c61\u7ed1\u5b9a\u6811","text":"\u300e\u5982\u679c\u4f60\u53bb\u7f51\u4e0a\u641c\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\u9664\u4e86\u8fd9\u672c\u4e66\u4ee5\u5916\u6ca1\u6709\u4eba\u8bf4 ABT \u8fd9\u4e2a\u6982\u5ff5\u3002\u300f \u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f let x be expr1 in expr2 \uff0c\u8868\u793a\u5f15\u5165\u4e00\u4e2a\u53d8\u91cf x \uff0c\u7528\u4e8e\u5728\u8868\u8fbe\u5f0f expr2 \u4e2d\u8868\u793a expr1 \u3002 \u53d8\u91cf x \u53d7 let \u8868\u8fbe\u5f0f\u7684\u7ea6\u675f\uff0c\u53ea\u7528\u5728 expr2 \u4e2d\u3002\u5728 expr1 \u4e2d\u5982\u679c\u6709\u4efb\u4f55 x \u90fd\u53ea\u662f\u78b0\u5de7\u540d\u5b57\u76f8\u540c\u7684\u4e0d\u540c\u53d8\u91cf\uff1b\u8fd9\u6709\u4e9b\u7c7b\u4f3c\u4e8e \\((\\lambda\\ expr1. expr2)\\ x\\) \u3002\u4e0e \\(\\lambda\\) \u6f14\u7b97\u4e00\u6837\uff0c\u7ea6\u675f\u53d8\u91cf\u53ef\u4ee5\u6362\u540d\u3002 Example \u4f8b\u5982 let x be num[7] in plus(x; x) \u5c31\u53ef\u4ee5\u5f97\u5230 plus(num[7]; num[7]) \u3002\u7c7b\u4f3c\u4e8e \\((\\lambda\\ x.x + x)\\ 7 = 7 + 7\\) \u3002 \u800c\u5bf9\u4e8e let x be times(x; x) in plus(x; x) \uff0c\u5c31\u7c7b\u4f3c\u4e8e \\((\\lambda\\ x.x + x)\\ (x * x) = x * x + x * x\\) \u3002\u6839\u636e \\(\\lambda\\) \u6f14\u7b97\u7684\u76f8\u5173\u77e5\u8bc6\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u91cc times \u4e2d\u7684 x \u548c plus \u4e2d\u7684 x \u5e76\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u3002 \u5bb9\u6613\u7406\u89e3\uff0c let y be times(x; x) in plus(y; y) \u4e0e\u4e0a\u5f0f\u8868\u8fbe\u7684\u542b\u4e49\u4e00\u81f4\uff1b\u5373\u7ea6\u675f\u53d8\u91cf\u53ef\u4ee5\u6362\u540d\u3002 \u6211\u4eec\u7528 \\(x_1, \\dots, x_k.a\\) \u7684\u5f62\u5f0f\u8868\u793a\u5c06\u53d8\u91cf\u5e8f\u5217 \\(x_1, \\dots, x_k\\) \u7ed1\u5b9a (bind) \u5230\u8fd0\u7b97\u7b26 \\(a\\) \u7684\u53c2\u6570\u4e0a\uff0c\u4ece\u800c\u5c06\u4ee5 \\(a\\) \u4e3a\u6839\u7684 AST \u6cdb\u5316\u4e3a\u4e00\u68f5 \u62bd\u8c61\u7ed1\u5b9a\u6811 (Abstract Binding Tree, ABT) \u3002 \\(x_1, \\dots, x_k.a\\) \u79f0\u4e3a \u62bd\u8c61\u5b50 (abstractor) \uff1b\u8fd9\u8868\u793a\u53d8\u91cf\u5e8f\u5217 \\(x_1, \\dots, x_k\\) \u5728 ABT \\(a\\) \u4e2d\u662f\u7ea6\u675f\u7684 (bound)\u3002\u5728 \\(k = 0\\) \u65f6\uff0c \\(.a\\) \u53ef\u4ee5\u7b80\u5199\u4e3a \\(a\\) \u3002\u901a\u5e38\u6211\u4eec\u5c06 \\(x_1, \\dots, x_k\\) \u8bb0\u4e3a \\(\\vec{x}\\) \uff0c\u4ece\u800c\u7528 \\(\\vec{x}.a\\) \u8868\u793a \\(x_1, \\dots, x_k.a\\) \u3002 \u8fd9\u79cd\u7ed1\u5b9a\u51b3\u5b9a\u4e86 \\(\\vec{x}\\) \u7684 \u4f5c\u7528\u57df (scope) \u662f ABT \\(a\\) \u3002 \u524d\u9762\u7684 let x be expr1 in expr2 \u5c31\u662f let(expr1; x.expr2) \u3002\u8fd9\u4e2a\u5f62\u5f0f\u8868\u793a x \u5728 expr2 \u4e2d\u662f\u7ea6\u675f\u7684\uff0c\u6216\u8005\u8bf4 x \u7684\u4f5c\u7528\u57df\u662f expr2 \u3002 Example \u524d\u4f8b\u4e2d let x be num[7] in plus(x; x) \u8868\u793a\u4e3a let(num[7]; x.plus(x; x)) \uff1b let x be times(x; x) in plus(x; x) \u53ef\u4ee5\u8868\u793a\u4e3a let(times(x; x); x.plus(x; x)) \u3002\u540e\u8005\u8868\u793a\u7684 ABT \u5f62\u5982\uff1a \u7ed1\u5b9a\u4f7f\u5f97 operator \u7684 arity \u5f97\u5230\u4e86\u6cdb\u5316\u3002\u5143\u6570\u5f62\u5982 \\((s_1, \\dots, s_n)s\\) \uff0c\u800c \u6cdb\u5316\u5143\u6570 (generalized arity) \u5f62\u5982 \\((v_1, \\dots, v_n)s\\) \uff1b\u5176\u4e2d\u6bcf\u4e00\u4e2a \\(v\\) \u79f0\u4e3a\u4e00\u4e2a \u4ef7 (valence) \uff0c\u5177\u6709 \\(s_1, \\dots, s_k.s\\) \u5373 \\(\\vec{s}.s\\) \u7684\u5f62\u5f0f\uff0c\u6307\u5b9a\u4e86\u53c2\u6570\u7684\u7c7b\u522b\u4ee5\u53ca\u6240\u7ed1\u5b9a\u7684\u53d8\u91cf\u7684\u6570\u91cf\u548c\u7c7b\u522b\u3002 \u6211\u4eec\u79f0\u53d8\u91cf\u5e8f\u5217 \\(\\vec{x}\\) \u5c5e\u4e8e \\(\\vec{s}\\) \uff0c\u5982\u679c\u5b83\u4eec\u6709\u76f8\u540c\u7684\u957f\u5ea6 \\(k\\) \uff0c\u4e14\u5bf9\u6bcf\u4e00\u4e2a \\(1 \\le i \\le k\\) \u90fd\u6709 \\(x_i\\) \u7684\u7c7b\u522b\u662f \\(s_i\\) \u3002 Example \u524d\u4f8b\u4e2d let \u8fd0\u7b97\u7b26\u7684\u5143\u6570\uff08\u6cdb\u5316\u5143\u6570\uff0c\u4f46\u300c\u6cdb\u5316\u300d\u6839\u636e\u4e0a\u4e0b\u6587\u53ef\u4ee5\u63a8\u65ad\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b80\u79f0\u4e3a\u5143\u6570\uff0c\u540e\u540c\uff09\u4e3a \\((s_1, s_1.s_1)s_1\\) \u3002\u8fd9\u8868\u793a let \u8fd0\u7b97\u7b26\u7684\u7c7b\u522b\u662f \\(s_1\\) \uff08\u5373\u8868\u8fbe\u5f0f\uff0c\u53c2\u89c1 1.1 \u4f8b\u5b50\u4e2d\u7684\u5b9a\u4e49\uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e0d\u7ed1\u5b9a\u4efb\u4f55\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u542b\u6709\u4e00\u4e2a\u7ea6\u675f\u53d8\u91cf\u7684\u8868\u8fbe\u5f0f\uff0c\u7ea6\u675f\u53d8\u91cf\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u5f62\u5f0f\u5316\u5730\u7ed9\u51fa ABT \u7684\u5b9a\u4e49\u3002ABT \u7684\u65cf \\(B[X]\\) \u7684\u5b9a\u4e49\u4e0e AST \u7684\u65cf \\(A[X]\\) \u7684\u5b9a\u4e49\u7c7b\u4f3c\uff0c\u4f46\u662f \\(X\\) \u5728\u8fdb\u5165\u62bd\u8c61\u5b50\u7684\u4f5c\u7528\u57df\u65f6\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u6211\u4eec\u5c1d\u8bd5\u8fd9\u6837\u5b9a\u4e49 ABT\uff1aABT \u7684\u65cf \\(B[X] = \\{B[X]_s\\}_{s\\in S}\\) \u662f\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6700\u5c0f\u65cf\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in B[X]_s\\) \u3002\u5373\uff0c\u4e00\u4e2a\u7c7b\u522b\u662f \\(s\\) \u7684\u53d8\u91cf\u662f\u4e00\u68f5\u7c7b\u522b\u4e3a \\(s\\) \u7684 ABT\uff1b \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((\\vec{s_1}.s_1, \\dots, \\vec{s_n}.s_n)s\\) \uff0c\u4e14 \\(a_1 \\in B[X, \\vec{x_1}]_{s_1}, \\dots, a_n \\in B[X, \\vec{x_n}]_{s_n}\\) \uff0c\u90a3\u4e48 \\(o(\\vec{x_1}.a_1;\\dots ;\\vec{x_n}.a_n) \\in B[X]_s\\) \u3002\u5373\uff0c\u7528\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7ec4\u5408 ABT\u3002 \u8fd9\u79cd\u5b9a\u4e49\u7684\u95ee\u9898\u662f\uff0c\u5f62\u5982 let(expr1; x.let(expr2; x.expr3)) \u7684 ABT \u662f ill-formed \u7684\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u7ed1\u5b9a\u5c06 \\(x\\) \u6dfb\u52a0\u5230 \\(X\\) \u5f97\u5230 \\(x.X\\) \uff0c\u8fd9\u4f7f\u5f97\u7b2c\u4e8c\u4e2a\u7ed1\u5b9a\u4e0d\u80fd\u518d\u5c06 \\(x\\) \u6dfb\u52a0\u5230 \\(X.x\\) \u4e2d\uff0c\u56e0\u4e3a \\(x\\) \u5bf9\u4e8e \\(X.x\\) \u6765\u8bf4\u4e0d\u662f\u65b0\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c \u8fd9\u79cd\u5b9a\u4e49\u6ca1\u6709\u6b63\u786e\u89e3\u91ca\u7ea6\u675f\u53d8\u91cf\u7684\u6362\u540d \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 fresh renaming \u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u800c\u8a00\uff0c\u7ed9\u5b9a\u53d8\u91cf\u65cf \\(X\\) \uff0c \\(\\vec{x}\\) \u7684 fresh renaming \u5b9a\u4e49\u4e3a\u4e00\u4e2a \\(\\vec{x}\\) \u5230 \\(\\vec{x}'\\) \u7684\u4e00\u4e2a\u53cc\u5c04 \\(\\rho : \\vec{x} \\leftrightarrow \\vec{x}'\\) \uff0c\u5176\u4e2d \\(\\vec{x}'\\) \u5bf9\u4e8e \\(X\\) \u800c\u8a00\u662f\u65b0\u7684\u3002\u6211\u4eec\u7528 \\(\\hat\\rho (a)\\) \u8868\u793a\u5c06 \\(a\\) \u4e2d\u7684\u6bcf\u4e2a \\(x_i\\) \u7684\u51fa\u73b0\u66ff\u6362\u4e3a \\(\\rho(x_i)\\) \u540e\u7684\u7ed3\u679c\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u7ed9\u51fa ABT \u7684\u65cf \\(B[X] = \\{B[X]_s\\}_{s\\in S}\\) \u7684\u6b63\u786e\u5b9a\u4e49\uff1a \u5982\u679c \\(x \\in X_s\\) \uff0c\u90a3\u4e48 \\(x\\in B[X]_s\\) \u3002 \u5982\u679c \\(o\\) \u7684\u5143\u6570\u4e3a \\((\\vec{s_1}.s_1, \\dots, \\vec{s_n}.s_n)s\\) \uff0c\u4e14\u5bf9\u4e8e\u6bcf\u4e2a \\(1 \\le i \\le n\\) \u548c\u5bf9\u5e94\u7684 fresh renaming \\(\\rho_i : \\vec{x}_i \\leftrightarrow \\vec{x}_i'\\) \uff0c\u90fd\u6709 \\(\\hat\\rho_i(a_i) \\in B[X, \\vec{x_i}']\\) \uff0c\u90a3\u4e48 \\(o(\\vec{x_1}.a_1;\\dots ;\\vec{x_n}.a_n) \\in B[X]_s\\) \u3002 \u5b9a\u4e49\u8fd9\u79cd\u610f\u4e49\u4e0b\u7684\u7ed3\u6784\u5f52\u7eb3\u6cd5\uff1a structural induction modulo fresh renaming \u3002\uff08\u6ca1\u8bb2\uff0c\u4e14\u61d2\u5f97\u770b\uff09 \u5b9a\u4e49 \\(\\alpha\\) -\u7b49\u4ef7 ( \\(\\alpha\\) -equivalence)\u3002\uff08\u8bb2\u4e86\uff0c\u4f46\u61d2\u5f97\u770b\uff09 ABT \u6839\u636e\u662f\u5426 \\(\\alpha\\) -\u7b49\u4ef7\u5224\u5b9a\u662f\u5426\u76f8\u540c\u3002 \u5b9a\u4e49 ABT \u4e0a\u7684\u4ee3\u6362\u3002\uff08\u4e5f\u8bb2\u4e86\uff0c\u4e5f\u61d2\u5f97\u770b\uff09","title":"1.2 Abstract Binding Tree, ABT | \u62bd\u8c61\u7ed1\u5b9a\u6811"},{"location":"pl/ppl_notes/2_Inductive_Definition/","text":"2 Inductive Definition | \u5f52\u7eb3\u5b9a\u4e49 \u00b6 2.1 Judgments | \u5224\u65ad \u00b6 \u5224\u65ad (judgment) \u662f\u5173\u4e8e\u67d0\u79cd\u7c7b\u522b\u7684\u4e00\u68f5\u6216\u8005\u591a\u68f5 ABT \u7684\u9648\u8ff0\uff0c\u8868\u660e\u4e00\u68f5\u6216\u591a\u68f5 ABT \u6709\u67d0\u79cd\u6027\u8d28\u6216\u8005\u5f7c\u6b64\u4e4b\u95f4\u6709\u67d0\u79cd\u8054\u7cfb\u3002 \u4e00\u4e9b judgment \\(n \\text{ nat}\\) ( \\(n\\) \u662f\u4e00\u4e2a\u81ea\u7136\u6570 ) \\(n_1 + n_2 = n\\) \\(\\tau \\text{ type}\\) ( \\(\\tau\\) \u662f\u4e00\u4e2a\u7c7b\u578b ) \\(e : \\tau\\) ( \u8868\u8fbe\u5f0f \\(e\\) \u5177\u6709 \\(\\tau\\) \u7c7b\u578b ) \\(e \\Downarrow v\\) ( \u8868\u8fbe\u5f0f \\(e\\) \u7684\u503c\u4e3a \\(v\\) ) \u8fd9\u4e9b\u300c\u6027\u8d28\u6216\u8054\u7cfb\u300d\u672c\u8eab\u79f0\u4e3a \u5224\u65ad\u5f62\u5f0f (judgment form) \uff0c\u800c\u300c\u4e00\u4e2a\u6216\u591a\u4e2a ABT \u5177\u6709\u8fd9\u79cd\u6027\u8d28\u6216\u8054\u7cfb\u300d\u79f0\u4e3a\u5224\u65ad\u5f62\u5f0f\u7684 \u5b9e\u4f8b (instance) \u3002 \u5224\u65ad\u5f62\u5f0f\u4e5f\u79f0\u4e3a \u8c13\u8bcd (predicate) \uff0c\u800c\u6784\u6210\u5b9e\u4f8b\u7684 ABT \u79f0\u4e3a\u5b9e\u4f8b\u7684 \u4e3b\u8bed / \u4e3b\u8bcd (subject) \u3002 \u6211\u4eec\u5c06\u5224\u65ad\u300cABT \\(a\\) \u5177\u6709 \\(J\\) \u6027\u8d28\u300d\u8bb0\u4e3a \\(a\\ J\\) \u6216\u8005 \\(J\\ a\\) \uff1b\u76f8\u5e94\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5224\u65ad\u5f62\u5f0f \\(J\\) \u8bb0\u4e3a \\(-\\ J\\) \u6216\u8005 \\(J\\ -\\) \uff0c\u5176\u4e2d \\(-\\) \u4ee3\u8868 \\(J\\) \u7f3a\u5c11\u7684\u53c2\u6570\uff0c\u4ece\u800c\u5f3a\u8c03\u5224\u65ad\u7684\u4e3b\u8bed\u3002 2.2 Rules | \u89c4\u5219 \u00b6 \u89c4\u5219 (rule) \u89c4\u5b9a\u4e00\u4e2a judgment \u6709\u6548\u7684\u5145\u8981\u6761\u4ef6\u3002\u56e0\u800c\u5b8c\u5168\u51b3\u5b9a\u4e86\u8fd9\u4e2a judgment \u7684\u542b\u4e49\u3002 \u4e00\u4e2a judgment form \u7684 \u5f52\u7eb3\u5b9a\u4e49 (inductive definition) \u7531\u4e00\u7ec4\u5f62\u5982 \\(\\cfrac{J_1\\cdots J_k}{J}\\) \u7684 rules \u7ec4\u6210\uff0c\u8868\u660e\u5f53 \u524d\u63d0 (premise) \\(J_1, \\cdots, J_k\\) \u90fd\u6210\u7acb\u65f6\uff0c\u8db3\u4ee5\u8ba9 \u7ed3\u8bba (conclusion) \\(J\\) \u6210\u7acb\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u6210\u7acb\u3002 \u5982\u679c\u4e00\u4e2a\u89c4\u5219\u6ca1\u6709\u4efb\u4f55\u524d\u63d0\uff0c\u5373 \\(k = 0\\) \uff0c\u5219\u79f0\u8be5\u89c4\u5219\u4e3a \u516c\u7406 (axiom) \uff0c\u5426\u5219\u79f0\u4e3a \u6b63\u5e38\u89c4\u5219 (proper rule) \u3002 \u6211\u4eec\u65e9\u4e0a\u53bb\u98df\u5802\uff0c\u53ef\u80fd\u4f1a\u60f3\u300c\u5982\u679c\u6709\u6cb9\u6761\uff0c\u6211\u5c31\u5403\u6cb9\u6761\uff1b\u5982\u679c\u6709\u62cc\u9762\uff0c\u6211\u5c31\u5403\u62cc\u9762\u300d\uff1b\u4f46\u662f\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u7ed9\u5224\u65ad\u4e2d\u52a0\u4e0a\u300c\u5426\u5219\u300d\uff0c\u53d8\u6210\uff1a\u300c\u5982\u679c\u6709\u6cb9\u6761\uff0c\u6211\u5c31\u5403\u6cb9\u6761\uff1b\u5426\u5219\uff0c\u5982\u679c\u6709\u62cc\u9762\uff0c\u6211\u5c31\u5403\u62cc\u9762\u300d\uff1b\u9664\u975e\u4f5c\u4e3a\u4e00\u4e2a \"default\" \u6761\u6b3e\u65f6\u624d\u4f1a\u7528\u300c\u5426\u5219\u300d\u3002\u4f46\u662f\u6211\u4eec\u5728\u7f16\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u66f4\u52a0\u9891\u7e41\u5730\u4f7f\u7528 \"else\"\u3002 Example Judgment form \u300c \\(- \\text{ nat}\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{zero nat}}\\] \\[\\frac{a \\text{ nat}}{\\text{succ}(a)\\text{ nat}}\\] \u7c7b\u4f3c\u5730\uff0c\u5224\u5b9a\u4e24\u4e2a\u81ea\u7136\u6570\u76f8\u540c\u7684 judgment form \u300c \\(- \\text{ is } -\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{zero is zero}}\\] \\[\\frac{a \\text{ is } b}{\\text{succ}(a)\\text{ is succ}(b)}\\] \u5b9a\u4e49\u4e8c\u53c9\u6811\u7684 judgment form \u300c \\(- \\text{ tree}\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{empty tree}}\\] \\[\\frac{a_1\\text{ tree }a_2\\text{ tree}}{\\text{node}(a_1; a_2)\\text{ tree}}\\] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u6709\u9650\u6570\u91cf\u7684 \u89c4\u5219\u6a21\u5f0f (rule scheme) \uff0c\u6307\u5b9a\u4e86\u65e0\u9650\u7684\u89c4\u5219\u65cf\u3002 \u4e00\u7ec4\u89c4\u5219\u88ab\u770b\u4f5c\u80fd\u591f\u5b9a\u4e49\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f\u3002 A collection of rules is considered to define the strongest judgment form that is closed under these rules. \u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219 (closed under these rules)\u300d\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u8db3\u4ee5\u8bc1\u660e\u4e00\u4e2a\u5224\u65ad\u7684\u6709\u6548\u6027\u3002\u5373\uff0c\u5982\u679c\u5229\u7528\u7ed9\u5b9a\u7684\u89c4\u5219\u80fd\u591f\u5f97\u5230\u5224\u65ad \\(J\\) \uff0c\u5219 \\(J\\) \u4e00\u5b9a\u6210\u7acb\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u89c4\u5219 \u63a8\u5bfc (derive) \u51fa \\(J\\) \u6765\u8bc1\u660e \\(J\\) \u6210\u7acb\u3002 \u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f (the strongest judgment form that is closed under these rules)\u300d\u8bf4\u660e\u6240\u6709\u7684\u89c4\u5219\u90fd\u662f\u5fc5\u8981\u7684\u3002\u5373\uff0c\u53ea\u6709\u901a\u8fc7\u8fd9\u4e9b\u89c4\u5219\u5f97\u51fa \\(J\\) \u65f6\uff0c \\(J\\) \u624d\u6210\u7acb\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u89c4\u5219\u5f52\u7eb3 (rule induction) \u6765\u8bc1\u660e \\(J\\) \u6210\u7acb\u3002 \u5728\u4e0b\u9762\u4e24\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u300c\u63a8\u5bfc\u300d\u548c\u300c\u89c4\u5219\u5f52\u7eb3\u300d\u7684\u7ec6\u8282\u3002 2.3 Derivations | \u63a8\u5bfc \u00b6 \u4e00\u4e2a judgment \u7684\u63a8\u5bfc\u8fc7\u7a0b\u662f\u89c4\u5219\u7684\u6709\u9650\u7ec4\u5408\uff0c\u4ece\u516c\u7406\u5f00\u59cb\uff0c\u4ee5\u5224\u65ad\u7ed3\u675f\u3002 \u4f8b\u5982\uff0c \\(\\text{node(node(empty; empty); empty) tree}\\) \u7684\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a \\[\\cfrac{\\cfrac{\\cfrac{}{\\text{empty tree}}\\quad \\cfrac{}{\\text{empty tree}}}{\\text{node(empty; empty) tree}}\\quad \\cfrac{}{\\text{empty tree}}}{\\text{node(node(empty; empty); empty) tree}}\\] \u8981\u8bf4\u660e\u4e00\u4e2a judgment \u662f \u53ef\u63a8\u5bfc\u7684 (derivable) \uff0c\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u63a8\u5bfc\u8fc7\u7a0b\u3002 \u4ece\u516c\u7406\u5f00\u59cb\u7684\u63a8\u5bfc\u79f0\u4e3a \u524d\u5411\u8fde\u63a5 (forwarding chainning) \u6216 \u81ea\u5e95\u5411\u4e0a\u6784\u9020 (bottom-up construction) \u3002\u5b83\u7c7b\u4f3c BFS\uff0c\u7ef4\u62a4\u4e00\u4e2a\u53ef\u63a8\u5bfc\u7684\u5224\u65ad\u96c6\uff0c\u5e76\u6269\u5c55\u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u76ee\u6807\u5224\u65ad\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\u65f6\u7ec8\u6b62\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u4f46\u662f\u5b83\u5728\u7b97\u6cd5\u4e0a\u901a\u5e38\u65e0\u6cd5\u51b3\u5b9a\u4f55\u65f6\u7ec8\u6b62\u63a8\u5bfc\u5e76\u5f97\u51fa\u76ee\u6807\u5224\u65ad\u4e0d\u53ef\u63a8\u5bfc\u7684\u7ed3\u8bba\u3002 \u4ece\u7ed3\u8bba\u5f00\u59cb\u7684\u63a8\u5bfc\u79f0\u4e3a \u53cd\u5411\u94fe\u63a5 (backwarding chainning) \u6216 \u81ea\u9876\u5411\u4e0b\u6784\u9020 (top-down construction) \u3002\u5b83\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u521a\u5f00\u59cb\u53ea\u6709\u76ee\u6807\u5224\u65ad\uff0c\u6bcf\u6b21\u4ece\u961f\u5934\u53d6\u51fa\u4e00\u6761\u5224\u65ad\uff0c\u5e76\u5c06\u5176\u6240\u6709\u524d\u63d0\u52a0\u5165\u961f\u5217\u3002\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u8fbe\u5230\u4e86\u6240\u6709\u76ee\u6807\u3002\u4f46\u540c\u6837\u7684\uff0c\u53cd\u5411\u94fe\u63a5\u4e5f\u6ca1\u6709\u901a\u7528\u7684\u7b97\u6cd5\u6765\u5224\u5b9a\u5f53\u524d\u76ee\u6807\u662f\u5426\u53ef\u63a8\u5bfc\u3002 2.4 Rule Induction | \u89c4\u5219\u5f52\u7eb3 \u00b6 \u6211\u4eec\u8bf4\uff0c\u300c \u4e00\u7ec4\u89c4\u5219\u88ab\u770b\u4f5c\u80fd\u591f\u5b9a\u4e49\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f \u300d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7ed9\u5b9a\u4e00\u7ec4\u89c4\u5219\uff0c\u5b83\u5b9a\u4e49\u7684\u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f\u300d\u662f \\(J\\) \uff1b\u800c\u6211\u4eec\u8bc1\u660e\u4e86\u53e6\u4e00\u4e2a\u5224\u65ad\u5f62\u5f0f \\(P\\) \u4e5f\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\uff0c\u90a3\u4e48\u7531\u4e8e \\(J\\) \u662f\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u5224\u65ad\u5f62\u5f0f\u4e2d\u6700\u5f3a\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bc1\u660e\u300c\u53ea\u8981 \\(a\\ J\\) \u53ef\u63a8\u5bfc\uff0c\u90a3\u4e48 \\(a\\ P\\) \u6210\u7acb\u300d\u3002\u8fd9\u5c31\u662f \u89c4\u5219\u5f52\u7eb3 (rule induction) \u7684\u539f\u7406\u3002 \u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u8981\u8bc1\u660e\u5f53 \u5f52\u7eb3\u5047\u8bbe (inductive hypotheses) \\(P(a_1), \\cdots, P(a_n)\\) \u6210\u7acb\u65f6 \u5f52\u7eb3\u7ed3\u8bba (inductive conclusion) \\(P(a)\\) \u6210\u7acb\uff0c\u5219\u9700\u8981\u8bc1\u660e\u6027\u8d28 \\(P\\) \u5c01\u95ed\u4e8e\u89c4\u5219 \\(\\cfrac{a_1\\ J\\cdots a_k\\ J}{a\\ J}\\) \u3002 \u4f8b\u5982\uff0c\u8981\u8bc1\u660e\u5f53 \\(a\\text{ nat}\\) \u65f6 \\(P(a)\\) \u6210\u7acb\uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall a,\\ P(a) \\to P(\\text{succ}(a))\\) \u5f15\u7406 2.1 \u5f15\u7406 2.1 \u8981\u8bc1\u660e\u5f53 \\(a\\text{ nat}\\) \u65f6 \\(P(a)\\) \u6210\u7acb\uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall a,\\ P(a) \\land a\\text{ nat} \\to P(\\text{succ}(a))\\) Proof . \u5b9a\u4e49 \\(Q(a) = P(a) \\land a\\text{ nat}\\) \uff0c\u663e\u7136 \\(Q(a)\\to P(a)\\) \u3002 \u5f15\u7406 2.2 \u5f15\u7406 2.2 \u5982\u679c \\(\\text{succ}(a) \\text{ nat}\\) \u6210\u7acb\uff0c\u90a3\u4e48 \\(a\\text{ nat}\\) \u6210\u7acb\u3002 Proof . \u5373\u8bc1\u660e\uff0c \\(\\forall a,b,\\ (b = \\text{succ}(a) \\land b\\text{ nat}) \\to a\\text{ nat}\\) \u3002 \\[\\begin{array}{rl} \\\\ &\\forall a,b,\\ (b = \\text{succ}(a) \\land b\\text{ nat}) \\to a\\text{ nat}\\\\ \\Leftrightarrow & \\forall a,b,\\ b = \\text{succ}(a) \\to (b\\text{ nat} \\to a\\text{ nat})\\\\ \\Leftrightarrow & \\forall a,b,\\ b\\text{ nat} \\to (b = \\text{succ}(a) \\to a\\text{ nat})\\\\ \\Leftrightarrow & \\forall b,\\ b\\text{ nat} \\to (\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat})\\\\ \\end{array} \\] \u8bb0 \\(P(b) = (\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat})\\) \uff0c\u6211\u4eec\u8981\u8bc1\u660e\u5f53 \\(b\\text{ nat}\\) \u65f6 \\(P(b)\\) \u6210\u7acb\u3002 Tips \u8fd9\u662f\u8fd9\u91cc\u7684\u6280\u5de7\u6240\u5728\uff0c\u5373\u5f53\u8981\u8bc1\u7684\u5f62\u5f0f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u89c4\u5219\u5f52\u7eb3\u65f6\uff0c\u501f\u7528\u65b0\u7684\u53d8\u91cf\u6765\u6784\u9020\u89c4\u5219\u5f52\u7eb3\u7684\u5f62\u5f0f\u3002 \u540c\u65f6\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 \\(b = \\text{succ}(a)\\) \u548c \\(b \\text{ is succ}(a)\\) \u6709\u4e00\u70b9\u4e0d\u540c\uff1a\u540e\u8005\u6765\u81ea\u4e8e\u6211\u4eec\u5bf9 \\(\\text{is}\\) \u8fd9\u4e2a judgment form \u7684\u5b9a\u4e49\uff0c\u800c\u524d\u8005\u5219\u6765\u81ea ABT \u7684\u76f8\u7b49\u5173\u7cfb\u3002 \u8fdb\u884c\u89c4\u5219\u5f52\u7eb3\uff1a \\(P(\\text{zero}) \\Leftrightarrow \\forall a,\\ \\text{zero} = \\text{succ}(a) \\to a\\text{ nat}\\) \u3002\u800c\u7531\u4e8e\u6ee1\u8db3 \\(\\text{zero} = \\text{succ}(a)\\) \u7684 \\(a\\) \u4e0d\u5b58\u5728\uff0c\u8be5\u5f0f\u6210\u7acb\u3002 \\(\\cfrac{\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat}\\quad b\\text{ nat}}{\\forall a,\\ \\text{succ}(b) = \\text{succ}(a) \\to a\\text{ nat}}\\) \u3002\u800c \\(\\text{succ}(b) = \\text{succ}(a) \\to b = a\\) \uff0c\u53c8 \\(b \\text{ nat}\\) \uff0c\u56e0\u6b64 \\(a \\text{ nat}\\) \uff0c\u8be5\u5f0f\u6210\u7acb\u3002 \u8bc1\u6bd5\u3002 \uff08\u6240\u4ee5\u53ef\u4ee5\u770b\u5230\uff0c\u5f52\u7eb3\u5047\u8bbe\u662f\u6709\u53ef\u80fd\u7528\u4e0d\u5230\u7684\u3002\uff09 \u5f15\u7406 2.3 \u5f15\u7406 2.3 \\(\\forall a, a\\text{ nat}\\to a \\text{ is }a\\) \u3002 \u8bc1\u660e\u6682\u7565\u3002 \u5f15\u7406 2.4 \u5f15\u7406 2.4 \\(\\text{succ}(a_1)\\text{ is succ}(a_2) \\to a_1\\text{ is }a_2\\) \u3002 \u8bc1\u660e\u4e0e \u5f15\u7406 2.2 \u7c7b\u4f3c\uff0c\u6682\u7565\u3002 2.5 Iterated and Simultaneous Inductive Definitions | \u8fed\u4ee3\u548c\u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49 \u00b6 \u4e4b\u524d\u5c55\u793a\u7684\u5f52\u7eb3\u5b9a\u4e49\u90fd\u662f \u8fed\u4ee3\u7684 (iterated) \uff0c\u5373\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u5efa\u7acb\u5728\u53e6\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u4e4b\u4e0a\uff1b\u800c\u4e00\u4e2a \u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49 (simultaneous inductive definitions) \u7531\u4e00\u4e2a\u89c4\u5219\u96c6\u7ec4\u6210\uff0c\u8fd9\u4e9b\u89c4\u5219\u80fd\u5bfc\u51fa\u591a\u4e2a\u4e0d\u540c\u5224\u65ad\u5f62\u5f0f\u7684\u5b9e\u4f8b\u3002 Example \u4e0b\u9762\u8fd9\u4e9b\u89c4\u5219\u6784\u9020\u4e86\u5bf9\u5947\u81ea\u7136\u6570\u548c\u5076\u81ea\u7136\u6570\u7684\u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49\uff1a \\[\\cfrac{}{\\text{zero even}}\\] \\[\\cfrac{b \\text{ odd}}{\\text{succ}(b)\\text{ even}}\\] \\[\\cfrac{a \\text{ even}}{\\text{succ}(a)\\text{ odd}}\\] \u9488\u5bf9\u4e0a\u4f8b\u4e2d\u7684\u89c4\u5219\uff0c\u5176\u89c4\u5219\u5f52\u7eb3\u539f\u7406\u8868\u660e\uff0c\u8981\u8bc1\u660e \\(a\\text{ even}\\) \u65f6\u6709 \\(P(a)\\) \u4e14 \\(b\\text{ odd}\\) \u65f6\u6709 \\(Q(b)\\) \uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall b,\\ Q(b)\\to P(\\text{succ}(b))\\) \\(\\forall a,\\ P(a)\\to Q(\\text{succ}(a))\\) 2.6 Defining Functions by Rules | \u7528\u89c4\u5219\u5b9a\u4e49\u51fd\u6570 \u00b6 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u81ea\u7136\u6570\u7684\u52a0\u6cd5\u51fd\u6570 \\(\\text{sum}(a; b; c)\\) \uff0c\u8868\u793a \\(c\\) \u662f \\(a\\) \u4e0e \\(b\\) \u7684\u548c\uff1a \\[\\frac{b\\text{ nat}}{\\text{sum}(\\text{zero};b;b)}\\] \\[\\frac{\\text{sum}(a;b;c)}{\\text{sum}(\\text{succ}(a);b;\\text{succ}(c))}\\] \u5b9a\u7406 2.5 \u5b9a\u7406 2.5 \u5bf9\u4e8e\u6bcf\u4e2a \\(a\\text{ nat}\\) \u548c \\(b\\text{ nat}\\) \uff0c\u5b58\u5728\u552f\u4e00\u7684 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002 \u5148\u8bc1\u5b58\u5728\u6027\uff0c\u5373\u5982\u679c \\(a\\text{ nat}\\) \u4e14 \\(b\\text{ nat}\\) \uff0c\u5b58\u5728 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002 \u8bbe \\(P(a)\\) \u4e3a\uff1a\u5982\u679c \\(b\\text{ nat}\\) \uff0c\u5b58\u5728 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u5982\u679c \\(a\\text{ nat}\\) \u5219 \\(P(a)\\) \u6210\u7acb\uff1a \\(P(\\text{zero}) \\Leftrightarrow \\text{sum}(\\text{zero};b;c)\\) \uff0c\u5219\u663e\u7136\u5b58\u5728 \\(c \\text{ is } b\\) \uff1b \\(\\cfrac{P(a)}{P(\\text{succ}(a))} \\Leftrightarrow \\cfrac{\\text{sum}(a; b; c_1)}{\\text{sum}(\\text{succ}(a); b; c)}\\) \uff0c\u5219\u663e\u7136\u5b58\u5728 \\(c \\text{ is } \\text{succ}(c_1)\\) \u3002 \u518d\u8bc1\u552f\u4e00\u6027\uff0c\u5373\u5982\u679c \\(\\text{sum}(a; b; c)\\) \u4e14 \\(\\text{sum}(a; b; c')\\) \uff0c\u5219 \\(c\\text{ is }c'\\) \u3002\u4ea6\u5373\uff1a \\[\\begin{array}{rl} &\\forall a, b, c, c',\\ (\\text{sum}(a; b; c) \\land \\text{sum}(a; b; c')) \\to c\\text{ is }c' \\\\ \\Leftrightarrow &\\forall a, b, c, c',\\ \\text{sum}(a; b; c) \\to (\\text{sum}(a; b; c') \\to c\\text{ is }c') \\\\ \\Leftrightarrow &\\forall a, b, c, \\ \\text{sum}(a; b; c) \\to (\\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c') \\end{array} \\] \uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 \u5f15\u7406 2.2 \u8bc1\u660e\u4e2d\u63d0\u5230\u7684\u6280\u5de7\u3002\uff09 \u8bbe \\(P(a; b; c)\\) \u4e3a\uff1a \\(\\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c'\\) \u3002\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e \\(\\forall a, b, c, \\ \\text{sum}(a; b; c) \\to P(a; b; c)\\) \uff1a \u6839\u636e \\(\\text{sum}\\) \u7684\u7b2c\u4e00\u6761\u5b9a\u4e49 \\(\\cfrac{b\\text{ nat}}{\\text{sum}(\\text{zero};b;b)}\\) \uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\cfrac{b\\text{ nat}}{P(\\text{zero};b;b)}\\) \uff1b\u4e5f\u5c31\u662f\u8981\u8bc1 \\(\\forall c',\\ (b\\text{ nat} \\land \\text{sum}(\\text{zero};b;c'))\\to b\\text{ is }c'\\) \u3002\u8fd9\u4e0d\u662f\u663e\u7136\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff1a \u6211\u4eec\u5c06\u5176\u6539\u5199\u4e3a\uff1a \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c') \\land a' = \\text{zero} \\land b' = b) \\to b \\text{ is } c\\) \uff0c\u4ea6\u5373 \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c')) \\to (a' = \\text{zero} \\to (b' = b \\to b \\text{ is } c))\\) \u3002 \u6211\u4eec\u8bb0 \\(Q(a';b';c')\\) \u4e3a \\(a' = \\text{zero} \\to (b' = b \\to b\\text{ is }c)\\) \uff0c\u5373\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c')) \\to Q(a';b';c')\\) \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4e86\u524d\u8ff0\u6280\u5de7\u6765\u5c06\u5f85\u8bc1\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u5219\u5f52\u7eb3\u7684\u5f62\u5f0f\u3002\u6211\u4eec\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff08\u8fd9\u5c31\u662f\u8bfe\u672c\u63d0\u5230\u7684\u300c\u5185\u5c42\u5f52\u7eb3\u300d\uff09\uff1a \u9996\u5148\u8981\u8bc1 \\(\\cfrac{b'\\text{ nat}}{Q(\\text{zero};b';b')}\\) \uff0c\u8fd9\u91cc \\(Q(\\text{zero};b';b') \\Leftrightarrow \\text{zero} = \\text{zero} \\to (b' = b \\to b \\text{ is } b')\\) \u3002\u6839\u636e \u5f15\u7406 2.3 \uff0c\u8be5\u5f0f\u4e3a\u771f\u3002 \u7136\u540e\u8bc1 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')}{Q(\\text{succ}(a'); b'; \\text{succ}(c'))}\\) \u3002\u8fd9\u91cc \\(Q(\\text{succ}(a'); b'; \\text{succ}(c')) \\Leftrightarrow \\text{succ}(a') = \\text{zero} \\to (b' = b \\to b \\text{ is } \\text{succ}(c'))\\) \u3002\u7531\u4e8e\u4e0d\u5b58\u5728 \\(a'\\) \u4f7f\u5f97 \\(\\text{succ}(a') = \\text{zero}\\) \uff0c\u56e0\u6b64\u8be5\u5f0f\u4e3a\u771f\u3002 \u6839\u636e \\(\\text{sum}\\) \u7684\u7b2c\u4e8c\u6761\u5b9a\u4e49 \\(\\cfrac{\\text{sum}(a;b;c)}{\\text{sum}(\\text{succ}(a);b;\\text{succ}(c))}\\) \uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\cfrac{P(a;b;c)\\quad \\text{sum}(a;b;c)}{P(\\text{succ}(a);b;\\text{succ}(c))}\\) \uff1b\u4e5f\u5c31\u662f\u8981\u8bc1 \\(\\forall c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c))\\to (\\text{sum}(\\text{succ}(a);b;c') \\to \\text{succ}(c)\\text{ is } c')\\) \u3002\u8fd9\u4e5f\u4e0d\u662f\u663e\u7136\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u8981\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff1a \u6211\u4eec\u5c06\u5176\u6539\u5199\u4e3a\uff1a \\(\\forall a', b', c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c) \\land \\text{sum}(a';b';c')) \\to (a' = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } c')))\\) \u8bb0 \\(Q(a';b';c')\\) \u4e3a \\(a' = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } c')\\) \uff0c\u6211\u4eec\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e \\(\\forall a', b', c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c) \\land \\text{sum}(a';b';c')) \\to Q(a';b';c')\\) \uff1a \u9996\u5148\u8981\u8bc1 \\(\\cfrac{b'\\text{ nat}}{Q(\\text{zero};b';b')}\\) \uff0c\u7c7b\u4f3c\u4e0a\u8ff0 2.b \u7684\u8bc1\u660e\uff0c\u4e0d\u5b58\u5728 \\(a'\\) \u4f7f\u5f97 \\(\\text{succ}(a') = \\text{zero}\\) \uff0c\u56e0\u6b64\u8be5\u5f0f\u4e3a\u771f\u3002 \u7136\u540e\u8bc1 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)}{Q(\\text{succ}(a'); b'; \\text{succ}(c'))}\\) \uff1a \u5176\u4e2d\uff0c\u7ed3\u8bba \\(Q(\\text{succ}(a'); b'; \\text{succ}(c'))\\) \u7b49\u4ef7\u4e8e \\(\\text{succ}(a') = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } \\text{succ}(c'))\\) \u6839\u636e ABT \u7684\u76f8\u7b49\u5173\u7cfb\u4ee5\u53ca \u5f15\u7406 2.4 \uff0c\u8be5\u5f0f\u7b49\u4ef7\u4e8e \\(a' = a \\to (b' = b \\to c\\text{ is } c')\\) \u8981\u8bc1\u7684\u89c4\u5219\u5373\u4e3a \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)}{a' = a \\to (b' = b \\to c\\text{ is } c')}\\) \u4ea6\u5373 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)\\quad a' = a\\quad b' = b}{c\\text{ is } c'}\\) \u800c\u7531 \\(\\text{sum}(a';b';c')\\land a' = a\\land b' = b\\) \u6709\u524d\u63d0 \\(\\text{sum}(a; b; c')\\) \uff0c\u53c8 \\(P(a;b;c) \\Leftrightarrow \\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c'\\) \uff0c\u56e0\u6b64\u7ed3\u8bba\u5f97\u8bc1\u3002 \u8bc1\u6bd5\u3002 \u4e60\u9898 1 \u7ed9\u5b9a\u5224\u65ad \\(max(m;n;p)\\) \u7684\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5176\u4e2d \\(m\\text{ nat}, n\\text{ nat}, p\\text{ nat}\\) \uff0c\u4e14 \\(p\\) \u662f \\(m\\) \u548c \\(n\\) \u4e2d\u7684\u8f83\u5927\u8005\u3002\u8bc1\u660e\uff1a\u901a\u8fc7\u8fd9\u4e2a\u5224\u65ad\uff0c\u6bcf\u4e2a \\(m\\) \u548c \\(n\\) \u90fd\u4e0e\u552f\u4e00\u7684 \\(p\\) \u76f8\u5173\u3002","title":"2 \u5f52\u7eb3\u5b9a\u4e49"},{"location":"pl/ppl_notes/2_Inductive_Definition/#2-inductive-definition--\u5f52\u7eb3\u5b9a\u4e49","text":"","title":"2 Inductive Definition | \u5f52\u7eb3\u5b9a\u4e49"},{"location":"pl/ppl_notes/2_Inductive_Definition/#21-judgments--\u5224\u65ad","text":"\u5224\u65ad (judgment) \u662f\u5173\u4e8e\u67d0\u79cd\u7c7b\u522b\u7684\u4e00\u68f5\u6216\u8005\u591a\u68f5 ABT \u7684\u9648\u8ff0\uff0c\u8868\u660e\u4e00\u68f5\u6216\u591a\u68f5 ABT \u6709\u67d0\u79cd\u6027\u8d28\u6216\u8005\u5f7c\u6b64\u4e4b\u95f4\u6709\u67d0\u79cd\u8054\u7cfb\u3002 \u4e00\u4e9b judgment \\(n \\text{ nat}\\) ( \\(n\\) \u662f\u4e00\u4e2a\u81ea\u7136\u6570 ) \\(n_1 + n_2 = n\\) \\(\\tau \\text{ type}\\) ( \\(\\tau\\) \u662f\u4e00\u4e2a\u7c7b\u578b ) \\(e : \\tau\\) ( \u8868\u8fbe\u5f0f \\(e\\) \u5177\u6709 \\(\\tau\\) \u7c7b\u578b ) \\(e \\Downarrow v\\) ( \u8868\u8fbe\u5f0f \\(e\\) \u7684\u503c\u4e3a \\(v\\) ) \u8fd9\u4e9b\u300c\u6027\u8d28\u6216\u8054\u7cfb\u300d\u672c\u8eab\u79f0\u4e3a \u5224\u65ad\u5f62\u5f0f (judgment form) \uff0c\u800c\u300c\u4e00\u4e2a\u6216\u591a\u4e2a ABT \u5177\u6709\u8fd9\u79cd\u6027\u8d28\u6216\u8054\u7cfb\u300d\u79f0\u4e3a\u5224\u65ad\u5f62\u5f0f\u7684 \u5b9e\u4f8b (instance) \u3002 \u5224\u65ad\u5f62\u5f0f\u4e5f\u79f0\u4e3a \u8c13\u8bcd (predicate) \uff0c\u800c\u6784\u6210\u5b9e\u4f8b\u7684 ABT \u79f0\u4e3a\u5b9e\u4f8b\u7684 \u4e3b\u8bed / \u4e3b\u8bcd (subject) \u3002 \u6211\u4eec\u5c06\u5224\u65ad\u300cABT \\(a\\) \u5177\u6709 \\(J\\) \u6027\u8d28\u300d\u8bb0\u4e3a \\(a\\ J\\) \u6216\u8005 \\(J\\ a\\) \uff1b\u76f8\u5e94\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5224\u65ad\u5f62\u5f0f \\(J\\) \u8bb0\u4e3a \\(-\\ J\\) \u6216\u8005 \\(J\\ -\\) \uff0c\u5176\u4e2d \\(-\\) \u4ee3\u8868 \\(J\\) \u7f3a\u5c11\u7684\u53c2\u6570\uff0c\u4ece\u800c\u5f3a\u8c03\u5224\u65ad\u7684\u4e3b\u8bed\u3002","title":"2.1 Judgments | \u5224\u65ad"},{"location":"pl/ppl_notes/2_Inductive_Definition/#22-rules--\u89c4\u5219","text":"\u89c4\u5219 (rule) \u89c4\u5b9a\u4e00\u4e2a judgment \u6709\u6548\u7684\u5145\u8981\u6761\u4ef6\u3002\u56e0\u800c\u5b8c\u5168\u51b3\u5b9a\u4e86\u8fd9\u4e2a judgment \u7684\u542b\u4e49\u3002 \u4e00\u4e2a judgment form \u7684 \u5f52\u7eb3\u5b9a\u4e49 (inductive definition) \u7531\u4e00\u7ec4\u5f62\u5982 \\(\\cfrac{J_1\\cdots J_k}{J}\\) \u7684 rules \u7ec4\u6210\uff0c\u8868\u660e\u5f53 \u524d\u63d0 (premise) \\(J_1, \\cdots, J_k\\) \u90fd\u6210\u7acb\u65f6\uff0c\u8db3\u4ee5\u8ba9 \u7ed3\u8bba (conclusion) \\(J\\) \u6210\u7acb\uff0c\u53cd\u4e4b\u4e0d\u4e00\u5b9a\u6210\u7acb\u3002 \u5982\u679c\u4e00\u4e2a\u89c4\u5219\u6ca1\u6709\u4efb\u4f55\u524d\u63d0\uff0c\u5373 \\(k = 0\\) \uff0c\u5219\u79f0\u8be5\u89c4\u5219\u4e3a \u516c\u7406 (axiom) \uff0c\u5426\u5219\u79f0\u4e3a \u6b63\u5e38\u89c4\u5219 (proper rule) \u3002 \u6211\u4eec\u65e9\u4e0a\u53bb\u98df\u5802\uff0c\u53ef\u80fd\u4f1a\u60f3\u300c\u5982\u679c\u6709\u6cb9\u6761\uff0c\u6211\u5c31\u5403\u6cb9\u6761\uff1b\u5982\u679c\u6709\u62cc\u9762\uff0c\u6211\u5c31\u5403\u62cc\u9762\u300d\uff1b\u4f46\u662f\u6211\u4eec\u4e00\u822c\u4e0d\u4f1a\u7ed9\u5224\u65ad\u4e2d\u52a0\u4e0a\u300c\u5426\u5219\u300d\uff0c\u53d8\u6210\uff1a\u300c\u5982\u679c\u6709\u6cb9\u6761\uff0c\u6211\u5c31\u5403\u6cb9\u6761\uff1b\u5426\u5219\uff0c\u5982\u679c\u6709\u62cc\u9762\uff0c\u6211\u5c31\u5403\u62cc\u9762\u300d\uff1b\u9664\u975e\u4f5c\u4e3a\u4e00\u4e2a \"default\" \u6761\u6b3e\u65f6\u624d\u4f1a\u7528\u300c\u5426\u5219\u300d\u3002\u4f46\u662f\u6211\u4eec\u5728\u7f16\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u66f4\u52a0\u9891\u7e41\u5730\u4f7f\u7528 \"else\"\u3002 Example Judgment form \u300c \\(- \\text{ nat}\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{zero nat}}\\] \\[\\frac{a \\text{ nat}}{\\text{succ}(a)\\text{ nat}}\\] \u7c7b\u4f3c\u5730\uff0c\u5224\u5b9a\u4e24\u4e2a\u81ea\u7136\u6570\u76f8\u540c\u7684 judgment form \u300c \\(- \\text{ is } -\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{zero is zero}}\\] \\[\\frac{a \\text{ is } b}{\\text{succ}(a)\\text{ is succ}(b)}\\] \u5b9a\u4e49\u4e8c\u53c9\u6811\u7684 judgment form \u300c \\(- \\text{ tree}\\) \u300d\u7684\u5f52\u7eb3\u5b9a\u4e49\u53ef\u4ee5\u662f\uff1a \\[\\frac{}{\\text{empty tree}}\\] \\[\\frac{a_1\\text{ tree }a_2\\text{ tree}}{\\text{node}(a_1; a_2)\\text{ tree}}\\] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u6709\u9650\u6570\u91cf\u7684 \u89c4\u5219\u6a21\u5f0f (rule scheme) \uff0c\u6307\u5b9a\u4e86\u65e0\u9650\u7684\u89c4\u5219\u65cf\u3002 \u4e00\u7ec4\u89c4\u5219\u88ab\u770b\u4f5c\u80fd\u591f\u5b9a\u4e49\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f\u3002 A collection of rules is considered to define the strongest judgment form that is closed under these rules. \u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219 (closed under these rules)\u300d\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u8db3\u4ee5\u8bc1\u660e\u4e00\u4e2a\u5224\u65ad\u7684\u6709\u6548\u6027\u3002\u5373\uff0c\u5982\u679c\u5229\u7528\u7ed9\u5b9a\u7684\u89c4\u5219\u80fd\u591f\u5f97\u5230\u5224\u65ad \\(J\\) \uff0c\u5219 \\(J\\) \u4e00\u5b9a\u6210\u7acb\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u89c4\u5219 \u63a8\u5bfc (derive) \u51fa \\(J\\) \u6765\u8bc1\u660e \\(J\\) \u6210\u7acb\u3002 \u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f (the strongest judgment form that is closed under these rules)\u300d\u8bf4\u660e\u6240\u6709\u7684\u89c4\u5219\u90fd\u662f\u5fc5\u8981\u7684\u3002\u5373\uff0c\u53ea\u6709\u901a\u8fc7\u8fd9\u4e9b\u89c4\u5219\u5f97\u51fa \\(J\\) \u65f6\uff0c \\(J\\) \u624d\u6210\u7acb\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u89c4\u5219\u5f52\u7eb3 (rule induction) \u6765\u8bc1\u660e \\(J\\) \u6210\u7acb\u3002 \u5728\u4e0b\u9762\u4e24\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u300c\u63a8\u5bfc\u300d\u548c\u300c\u89c4\u5219\u5f52\u7eb3\u300d\u7684\u7ec6\u8282\u3002","title":"2.2 Rules | \u89c4\u5219"},{"location":"pl/ppl_notes/2_Inductive_Definition/#23-derivations--\u63a8\u5bfc","text":"\u4e00\u4e2a judgment \u7684\u63a8\u5bfc\u8fc7\u7a0b\u662f\u89c4\u5219\u7684\u6709\u9650\u7ec4\u5408\uff0c\u4ece\u516c\u7406\u5f00\u59cb\uff0c\u4ee5\u5224\u65ad\u7ed3\u675f\u3002 \u4f8b\u5982\uff0c \\(\\text{node(node(empty; empty); empty) tree}\\) \u7684\u63a8\u5bfc\u8fc7\u7a0b\u5982\u4e0b\uff1a \\[\\cfrac{\\cfrac{\\cfrac{}{\\text{empty tree}}\\quad \\cfrac{}{\\text{empty tree}}}{\\text{node(empty; empty) tree}}\\quad \\cfrac{}{\\text{empty tree}}}{\\text{node(node(empty; empty); empty) tree}}\\] \u8981\u8bf4\u660e\u4e00\u4e2a judgment \u662f \u53ef\u63a8\u5bfc\u7684 (derivable) \uff0c\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u63a8\u5bfc\u8fc7\u7a0b\u3002 \u4ece\u516c\u7406\u5f00\u59cb\u7684\u63a8\u5bfc\u79f0\u4e3a \u524d\u5411\u8fde\u63a5 (forwarding chainning) \u6216 \u81ea\u5e95\u5411\u4e0a\u6784\u9020 (bottom-up construction) \u3002\u5b83\u7c7b\u4f3c BFS\uff0c\u7ef4\u62a4\u4e00\u4e2a\u53ef\u63a8\u5bfc\u7684\u5224\u65ad\u96c6\uff0c\u5e76\u6269\u5c55\u8fd9\u4e2a\u96c6\u5408\uff0c\u76f4\u5230\u76ee\u6807\u5224\u65ad\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\u65f6\u7ec8\u6b62\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u4f46\u662f\u5b83\u5728\u7b97\u6cd5\u4e0a\u901a\u5e38\u65e0\u6cd5\u51b3\u5b9a\u4f55\u65f6\u7ec8\u6b62\u63a8\u5bfc\u5e76\u5f97\u51fa\u76ee\u6807\u5224\u65ad\u4e0d\u53ef\u63a8\u5bfc\u7684\u7ed3\u8bba\u3002 \u4ece\u7ed3\u8bba\u5f00\u59cb\u7684\u63a8\u5bfc\u79f0\u4e3a \u53cd\u5411\u94fe\u63a5 (backwarding chainning) \u6216 \u81ea\u9876\u5411\u4e0b\u6784\u9020 (top-down construction) \u3002\u5b83\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u8fd9\u4e2a\u961f\u5217\u521a\u5f00\u59cb\u53ea\u6709\u76ee\u6807\u5224\u65ad\uff0c\u6bcf\u6b21\u4ece\u961f\u5934\u53d6\u51fa\u4e00\u6761\u5224\u65ad\uff0c\u5e76\u5c06\u5176\u6240\u6709\u524d\u63d0\u52a0\u5165\u961f\u5217\u3002\u5f53\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u8fbe\u5230\u4e86\u6240\u6709\u76ee\u6807\u3002\u4f46\u540c\u6837\u7684\uff0c\u53cd\u5411\u94fe\u63a5\u4e5f\u6ca1\u6709\u901a\u7528\u7684\u7b97\u6cd5\u6765\u5224\u5b9a\u5f53\u524d\u76ee\u6807\u662f\u5426\u53ef\u63a8\u5bfc\u3002","title":"2.3 Derivations | \u63a8\u5bfc"},{"location":"pl/ppl_notes/2_Inductive_Definition/#24-rule-induction--\u89c4\u5219\u5f52\u7eb3","text":"\u6211\u4eec\u8bf4\uff0c\u300c \u4e00\u7ec4\u89c4\u5219\u88ab\u770b\u4f5c\u80fd\u591f\u5b9a\u4e49\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f \u300d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7ed9\u5b9a\u4e00\u7ec4\u89c4\u5219\uff0c\u5b83\u5b9a\u4e49\u7684\u300c\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u6700\u5f3a\u5224\u65ad\u5f62\u5f0f\u300d\u662f \\(J\\) \uff1b\u800c\u6211\u4eec\u8bc1\u660e\u4e86\u53e6\u4e00\u4e2a\u5224\u65ad\u5f62\u5f0f \\(P\\) \u4e5f\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\uff0c\u90a3\u4e48\u7531\u4e8e \\(J\\) \u662f\u5c01\u95ed\u4e8e\u8fd9\u4e9b\u89c4\u5219\u7684\u5224\u65ad\u5f62\u5f0f\u4e2d\u6700\u5f3a\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8bc1\u660e\u300c\u53ea\u8981 \\(a\\ J\\) \u53ef\u63a8\u5bfc\uff0c\u90a3\u4e48 \\(a\\ P\\) \u6210\u7acb\u300d\u3002\u8fd9\u5c31\u662f \u89c4\u5219\u5f52\u7eb3 (rule induction) \u7684\u539f\u7406\u3002 \u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u8981\u8bc1\u660e\u5f53 \u5f52\u7eb3\u5047\u8bbe (inductive hypotheses) \\(P(a_1), \\cdots, P(a_n)\\) \u6210\u7acb\u65f6 \u5f52\u7eb3\u7ed3\u8bba (inductive conclusion) \\(P(a)\\) \u6210\u7acb\uff0c\u5219\u9700\u8981\u8bc1\u660e\u6027\u8d28 \\(P\\) \u5c01\u95ed\u4e8e\u89c4\u5219 \\(\\cfrac{a_1\\ J\\cdots a_k\\ J}{a\\ J}\\) \u3002 \u4f8b\u5982\uff0c\u8981\u8bc1\u660e\u5f53 \\(a\\text{ nat}\\) \u65f6 \\(P(a)\\) \u6210\u7acb\uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall a,\\ P(a) \\to P(\\text{succ}(a))\\) \u5f15\u7406 2.1 \u5f15\u7406 2.1 \u8981\u8bc1\u660e\u5f53 \\(a\\text{ nat}\\) \u65f6 \\(P(a)\\) \u6210\u7acb\uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall a,\\ P(a) \\land a\\text{ nat} \\to P(\\text{succ}(a))\\) Proof . \u5b9a\u4e49 \\(Q(a) = P(a) \\land a\\text{ nat}\\) \uff0c\u663e\u7136 \\(Q(a)\\to P(a)\\) \u3002 \u5f15\u7406 2.2 \u5f15\u7406 2.2 \u5982\u679c \\(\\text{succ}(a) \\text{ nat}\\) \u6210\u7acb\uff0c\u90a3\u4e48 \\(a\\text{ nat}\\) \u6210\u7acb\u3002 Proof . \u5373\u8bc1\u660e\uff0c \\(\\forall a,b,\\ (b = \\text{succ}(a) \\land b\\text{ nat}) \\to a\\text{ nat}\\) \u3002 \\[\\begin{array}{rl} \\\\ &\\forall a,b,\\ (b = \\text{succ}(a) \\land b\\text{ nat}) \\to a\\text{ nat}\\\\ \\Leftrightarrow & \\forall a,b,\\ b = \\text{succ}(a) \\to (b\\text{ nat} \\to a\\text{ nat})\\\\ \\Leftrightarrow & \\forall a,b,\\ b\\text{ nat} \\to (b = \\text{succ}(a) \\to a\\text{ nat})\\\\ \\Leftrightarrow & \\forall b,\\ b\\text{ nat} \\to (\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat})\\\\ \\end{array} \\] \u8bb0 \\(P(b) = (\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat})\\) \uff0c\u6211\u4eec\u8981\u8bc1\u660e\u5f53 \\(b\\text{ nat}\\) \u65f6 \\(P(b)\\) \u6210\u7acb\u3002 Tips \u8fd9\u662f\u8fd9\u91cc\u7684\u6280\u5de7\u6240\u5728\uff0c\u5373\u5f53\u8981\u8bc1\u7684\u5f62\u5f0f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u89c4\u5219\u5f52\u7eb3\u65f6\uff0c\u501f\u7528\u65b0\u7684\u53d8\u91cf\u6765\u6784\u9020\u89c4\u5219\u5f52\u7eb3\u7684\u5f62\u5f0f\u3002 \u540c\u65f6\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 \\(b = \\text{succ}(a)\\) \u548c \\(b \\text{ is succ}(a)\\) \u6709\u4e00\u70b9\u4e0d\u540c\uff1a\u540e\u8005\u6765\u81ea\u4e8e\u6211\u4eec\u5bf9 \\(\\text{is}\\) \u8fd9\u4e2a judgment form \u7684\u5b9a\u4e49\uff0c\u800c\u524d\u8005\u5219\u6765\u81ea ABT \u7684\u76f8\u7b49\u5173\u7cfb\u3002 \u8fdb\u884c\u89c4\u5219\u5f52\u7eb3\uff1a \\(P(\\text{zero}) \\Leftrightarrow \\forall a,\\ \\text{zero} = \\text{succ}(a) \\to a\\text{ nat}\\) \u3002\u800c\u7531\u4e8e\u6ee1\u8db3 \\(\\text{zero} = \\text{succ}(a)\\) \u7684 \\(a\\) \u4e0d\u5b58\u5728\uff0c\u8be5\u5f0f\u6210\u7acb\u3002 \\(\\cfrac{\\forall a,\\ b = \\text{succ}(a) \\to a\\text{ nat}\\quad b\\text{ nat}}{\\forall a,\\ \\text{succ}(b) = \\text{succ}(a) \\to a\\text{ nat}}\\) \u3002\u800c \\(\\text{succ}(b) = \\text{succ}(a) \\to b = a\\) \uff0c\u53c8 \\(b \\text{ nat}\\) \uff0c\u56e0\u6b64 \\(a \\text{ nat}\\) \uff0c\u8be5\u5f0f\u6210\u7acb\u3002 \u8bc1\u6bd5\u3002 \uff08\u6240\u4ee5\u53ef\u4ee5\u770b\u5230\uff0c\u5f52\u7eb3\u5047\u8bbe\u662f\u6709\u53ef\u80fd\u7528\u4e0d\u5230\u7684\u3002\uff09 \u5f15\u7406 2.3 \u5f15\u7406 2.3 \\(\\forall a, a\\text{ nat}\\to a \\text{ is }a\\) \u3002 \u8bc1\u660e\u6682\u7565\u3002 \u5f15\u7406 2.4 \u5f15\u7406 2.4 \\(\\text{succ}(a_1)\\text{ is succ}(a_2) \\to a_1\\text{ is }a_2\\) \u3002 \u8bc1\u660e\u4e0e \u5f15\u7406 2.2 \u7c7b\u4f3c\uff0c\u6682\u7565\u3002","title":"2.4 Rule Induction | \u89c4\u5219\u5f52\u7eb3"},{"location":"pl/ppl_notes/2_Inductive_Definition/#25-iterated-and-simultaneous-inductive-definitions--\u8fed\u4ee3\u548c\u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49","text":"\u4e4b\u524d\u5c55\u793a\u7684\u5f52\u7eb3\u5b9a\u4e49\u90fd\u662f \u8fed\u4ee3\u7684 (iterated) \uff0c\u5373\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u5efa\u7acb\u5728\u53e6\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\u4e4b\u4e0a\uff1b\u800c\u4e00\u4e2a \u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49 (simultaneous inductive definitions) \u7531\u4e00\u4e2a\u89c4\u5219\u96c6\u7ec4\u6210\uff0c\u8fd9\u4e9b\u89c4\u5219\u80fd\u5bfc\u51fa\u591a\u4e2a\u4e0d\u540c\u5224\u65ad\u5f62\u5f0f\u7684\u5b9e\u4f8b\u3002 Example \u4e0b\u9762\u8fd9\u4e9b\u89c4\u5219\u6784\u9020\u4e86\u5bf9\u5947\u81ea\u7136\u6570\u548c\u5076\u81ea\u7136\u6570\u7684\u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49\uff1a \\[\\cfrac{}{\\text{zero even}}\\] \\[\\cfrac{b \\text{ odd}}{\\text{succ}(b)\\text{ even}}\\] \\[\\cfrac{a \\text{ even}}{\\text{succ}(a)\\text{ odd}}\\] \u9488\u5bf9\u4e0a\u4f8b\u4e2d\u7684\u89c4\u5219\uff0c\u5176\u89c4\u5219\u5f52\u7eb3\u539f\u7406\u8868\u660e\uff0c\u8981\u8bc1\u660e \\(a\\text{ even}\\) \u65f6\u6709 \\(P(a)\\) \u4e14 \\(b\\text{ odd}\\) \u65f6\u6709 \\(Q(b)\\) \uff0c\u53ea\u9700\u8981\u8bc1\u660e\uff1a \\(P(\\text{zero})\\) \\(\\forall b,\\ Q(b)\\to P(\\text{succ}(b))\\) \\(\\forall a,\\ P(a)\\to Q(\\text{succ}(a))\\)","title":"2.5 Iterated and Simultaneous Inductive Definitions | \u8fed\u4ee3\u548c\u8054\u7acb\u5f52\u7eb3\u5b9a\u4e49"},{"location":"pl/ppl_notes/2_Inductive_Definition/#26-defining-functions-by-rules--\u7528\u89c4\u5219\u5b9a\u4e49\u51fd\u6570","text":"\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u81ea\u7136\u6570\u7684\u52a0\u6cd5\u51fd\u6570 \\(\\text{sum}(a; b; c)\\) \uff0c\u8868\u793a \\(c\\) \u662f \\(a\\) \u4e0e \\(b\\) \u7684\u548c\uff1a \\[\\frac{b\\text{ nat}}{\\text{sum}(\\text{zero};b;b)}\\] \\[\\frac{\\text{sum}(a;b;c)}{\\text{sum}(\\text{succ}(a);b;\\text{succ}(c))}\\] \u5b9a\u7406 2.5 \u5b9a\u7406 2.5 \u5bf9\u4e8e\u6bcf\u4e2a \\(a\\text{ nat}\\) \u548c \\(b\\text{ nat}\\) \uff0c\u5b58\u5728\u552f\u4e00\u7684 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002 \u5148\u8bc1\u5b58\u5728\u6027\uff0c\u5373\u5982\u679c \\(a\\text{ nat}\\) \u4e14 \\(b\\text{ nat}\\) \uff0c\u5b58\u5728 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002 \u8bbe \\(P(a)\\) \u4e3a\uff1a\u5982\u679c \\(b\\text{ nat}\\) \uff0c\u5b58\u5728 \\(c\\text{ nat}\\) \u4f7f\u5f97 \\(\\text{sum}(a; b; c)\\) \u3002\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u5982\u679c \\(a\\text{ nat}\\) \u5219 \\(P(a)\\) \u6210\u7acb\uff1a \\(P(\\text{zero}) \\Leftrightarrow \\text{sum}(\\text{zero};b;c)\\) \uff0c\u5219\u663e\u7136\u5b58\u5728 \\(c \\text{ is } b\\) \uff1b \\(\\cfrac{P(a)}{P(\\text{succ}(a))} \\Leftrightarrow \\cfrac{\\text{sum}(a; b; c_1)}{\\text{sum}(\\text{succ}(a); b; c)}\\) \uff0c\u5219\u663e\u7136\u5b58\u5728 \\(c \\text{ is } \\text{succ}(c_1)\\) \u3002 \u518d\u8bc1\u552f\u4e00\u6027\uff0c\u5373\u5982\u679c \\(\\text{sum}(a; b; c)\\) \u4e14 \\(\\text{sum}(a; b; c')\\) \uff0c\u5219 \\(c\\text{ is }c'\\) \u3002\u4ea6\u5373\uff1a \\[\\begin{array}{rl} &\\forall a, b, c, c',\\ (\\text{sum}(a; b; c) \\land \\text{sum}(a; b; c')) \\to c\\text{ is }c' \\\\ \\Leftrightarrow &\\forall a, b, c, c',\\ \\text{sum}(a; b; c) \\to (\\text{sum}(a; b; c') \\to c\\text{ is }c') \\\\ \\Leftrightarrow &\\forall a, b, c, \\ \\text{sum}(a; b; c) \\to (\\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c') \\end{array} \\] \uff08\u8fd9\u91cc\u4f7f\u7528\u4e86 \u5f15\u7406 2.2 \u8bc1\u660e\u4e2d\u63d0\u5230\u7684\u6280\u5de7\u3002\uff09 \u8bbe \\(P(a; b; c)\\) \u4e3a\uff1a \\(\\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c'\\) \u3002\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e \\(\\forall a, b, c, \\ \\text{sum}(a; b; c) \\to P(a; b; c)\\) \uff1a \u6839\u636e \\(\\text{sum}\\) \u7684\u7b2c\u4e00\u6761\u5b9a\u4e49 \\(\\cfrac{b\\text{ nat}}{\\text{sum}(\\text{zero};b;b)}\\) \uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\cfrac{b\\text{ nat}}{P(\\text{zero};b;b)}\\) \uff1b\u4e5f\u5c31\u662f\u8981\u8bc1 \\(\\forall c',\\ (b\\text{ nat} \\land \\text{sum}(\\text{zero};b;c'))\\to b\\text{ is }c'\\) \u3002\u8fd9\u4e0d\u662f\u663e\u7136\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff1a \u6211\u4eec\u5c06\u5176\u6539\u5199\u4e3a\uff1a \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c') \\land a' = \\text{zero} \\land b' = b) \\to b \\text{ is } c\\) \uff0c\u4ea6\u5373 \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c')) \\to (a' = \\text{zero} \\to (b' = b \\to b \\text{ is } c))\\) \u3002 \u6211\u4eec\u8bb0 \\(Q(a';b';c')\\) \u4e3a \\(a' = \\text{zero} \\to (b' = b \\to b\\text{ is }c)\\) \uff0c\u5373\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\forall a', b', c', \\ (b\\text{ nat} \\land \\text{sum}(a';b';c')) \\to Q(a';b';c')\\) \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u4e86\u524d\u8ff0\u6280\u5de7\u6765\u5c06\u5f85\u8bc1\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u89c4\u5219\u5f52\u7eb3\u7684\u5f62\u5f0f\u3002\u6211\u4eec\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff08\u8fd9\u5c31\u662f\u8bfe\u672c\u63d0\u5230\u7684\u300c\u5185\u5c42\u5f52\u7eb3\u300d\uff09\uff1a \u9996\u5148\u8981\u8bc1 \\(\\cfrac{b'\\text{ nat}}{Q(\\text{zero};b';b')}\\) \uff0c\u8fd9\u91cc \\(Q(\\text{zero};b';b') \\Leftrightarrow \\text{zero} = \\text{zero} \\to (b' = b \\to b \\text{ is } b')\\) \u3002\u6839\u636e \u5f15\u7406 2.3 \uff0c\u8be5\u5f0f\u4e3a\u771f\u3002 \u7136\u540e\u8bc1 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')}{Q(\\text{succ}(a'); b'; \\text{succ}(c'))}\\) \u3002\u8fd9\u91cc \\(Q(\\text{succ}(a'); b'; \\text{succ}(c')) \\Leftrightarrow \\text{succ}(a') = \\text{zero} \\to (b' = b \\to b \\text{ is } \\text{succ}(c'))\\) \u3002\u7531\u4e8e\u4e0d\u5b58\u5728 \\(a'\\) \u4f7f\u5f97 \\(\\text{succ}(a') = \\text{zero}\\) \uff0c\u56e0\u6b64\u8be5\u5f0f\u4e3a\u771f\u3002 \u6839\u636e \\(\\text{sum}\\) \u7684\u7b2c\u4e8c\u6761\u5b9a\u4e49 \\(\\cfrac{\\text{sum}(a;b;c)}{\\text{sum}(\\text{succ}(a);b;\\text{succ}(c))}\\) \uff0c\u6211\u4eec\u9700\u8981\u8bc1\u660e \\(\\cfrac{P(a;b;c)\\quad \\text{sum}(a;b;c)}{P(\\text{succ}(a);b;\\text{succ}(c))}\\) \uff1b\u4e5f\u5c31\u662f\u8981\u8bc1 \\(\\forall c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c))\\to (\\text{sum}(\\text{succ}(a);b;c') \\to \\text{succ}(c)\\text{ is } c')\\) \u3002\u8fd9\u4e5f\u4e0d\u662f\u663e\u7136\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u8981\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u4e4b\uff1a \u6211\u4eec\u5c06\u5176\u6539\u5199\u4e3a\uff1a \\(\\forall a', b', c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c) \\land \\text{sum}(a';b';c')) \\to (a' = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } c')))\\) \u8bb0 \\(Q(a';b';c')\\) \u4e3a \\(a' = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } c')\\) \uff0c\u6211\u4eec\u7528\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e \\(\\forall a', b', c',\\ (P(a;b;c)\\land \\text{sum}(a;b;c) \\land \\text{sum}(a';b';c')) \\to Q(a';b';c')\\) \uff1a \u9996\u5148\u8981\u8bc1 \\(\\cfrac{b'\\text{ nat}}{Q(\\text{zero};b';b')}\\) \uff0c\u7c7b\u4f3c\u4e0a\u8ff0 2.b \u7684\u8bc1\u660e\uff0c\u4e0d\u5b58\u5728 \\(a'\\) \u4f7f\u5f97 \\(\\text{succ}(a') = \\text{zero}\\) \uff0c\u56e0\u6b64\u8be5\u5f0f\u4e3a\u771f\u3002 \u7136\u540e\u8bc1 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)}{Q(\\text{succ}(a'); b'; \\text{succ}(c'))}\\) \uff1a \u5176\u4e2d\uff0c\u7ed3\u8bba \\(Q(\\text{succ}(a'); b'; \\text{succ}(c'))\\) \u7b49\u4ef7\u4e8e \\(\\text{succ}(a') = \\text{succ}(a) \\to (b' = b \\to \\text{succ}(c)\\text{ is } \\text{succ}(c'))\\) \u6839\u636e ABT \u7684\u76f8\u7b49\u5173\u7cfb\u4ee5\u53ca \u5f15\u7406 2.4 \uff0c\u8be5\u5f0f\u7b49\u4ef7\u4e8e \\(a' = a \\to (b' = b \\to c\\text{ is } c')\\) \u8981\u8bc1\u7684\u89c4\u5219\u5373\u4e3a \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)}{a' = a \\to (b' = b \\to c\\text{ is } c')}\\) \u4ea6\u5373 \\(\\cfrac{Q(a';b';c')\\quad \\text{sum}(a';b';c')\\quad P(a;b;c)\\quad a' = a\\quad b' = b}{c\\text{ is } c'}\\) \u800c\u7531 \\(\\text{sum}(a';b';c')\\land a' = a\\land b' = b\\) \u6709\u524d\u63d0 \\(\\text{sum}(a; b; c')\\) \uff0c\u53c8 \\(P(a;b;c) \\Leftrightarrow \\forall c',\\ \\text{sum}(a; b; c') \\to c\\text{ is }c'\\) \uff0c\u56e0\u6b64\u7ed3\u8bba\u5f97\u8bc1\u3002 \u8bc1\u6bd5\u3002 \u4e60\u9898 1 \u7ed9\u5b9a\u5224\u65ad \\(max(m;n;p)\\) \u7684\u4e00\u4e2a\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5176\u4e2d \\(m\\text{ nat}, n\\text{ nat}, p\\text{ nat}\\) \uff0c\u4e14 \\(p\\) \u662f \\(m\\) \u548c \\(n\\) \u4e2d\u7684\u8f83\u5927\u8005\u3002\u8bc1\u660e\uff1a\u901a\u8fc7\u8fd9\u4e2a\u5224\u65ad\uff0c\u6bcf\u4e2a \\(m\\) \u548c \\(n\\) \u90fd\u4e0e\u552f\u4e00\u7684 \\(p\\) \u76f8\u5173\u3002","title":"2.6 Defining Functions by Rules | \u7528\u89c4\u5219\u5b9a\u4e49\u51fd\u6570"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/","text":"3 Hypothetical and General Judgments | \u5047\u8a00\u5224\u65ad\u4e0e\u4e00\u822c\u6027\u5224\u65ad \u00b6 3.1 Hypothetical Judgments | \u5047\u8a00\u5224\u65ad \u00b6 2.1 \u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u57fa\u672c\u5224\u65ad (basic judgments)\uff0c\u4f8b\u5982 \\(a \\text{ nat}\\) \u7b49\uff0c\u5b83\u4eec\u7528\u6765\u8868\u660e\u4e00\u68f5\u6216\u591a\u68f5 ABT \u6709\u67d0\u79cd\u6027\u8d28\u6216\u8005\u5f7c\u6b64\u4e4b\u95f4\u6709\u67d0\u79cd\u8054\u7cfb\u3002 \u5047\u8a00\u5224\u65ad (hypothetical judgment) \u5219\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a \u5047\u8bbe (hypothesis) \u548c\u4e00\u4e2a \u7ed3\u8bba (conclusion) \u4e4b\u95f4\u7684 \u8574\u542b\u5173\u7cfb (entailment) \u3002\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e24\u79cd\u8574\u542b\u6982\u5ff5\u3002 3.1.1 Derivability | \u53ef\u5bfc\u6027 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u89c4\u5219\u96c6\u5408 \\(R\\) \uff0c\u6211\u4eec\u7528 \\(R \\cup \\{J_1, \\dots, J_k\\}\\) \u8868\u793a\u5229\u7528\u516c\u7406 \\(\\overline{J_1}, \\dots, \\overline{J_k}\\) \u5bf9 \\(R\\) \u7684 \u6269\u5c55 (expansion) \uff1b\u8fd9\u91cc\u7684 \\(J_i\\) \u5747\u4e3a\u57fa\u672c\u5224\u65ad\uff0c\u8fd9\u4e2a\u6269\u5c55\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e9b\u57fa\u672c\u5224\u65ad\u5bf9\u5e94\u7684\u516c\u7406\u52a0\u5165\u89c4\u5219\u96c6\u5408\u5f97\u5230\u7684\u65b0\u7684\u89c4\u5219\u96c6\u5408\u3002 Tips \u6211\u4eec\u901a\u5e38\u7528\u5927\u5199\u5e0c\u814a\u5b57\u6bcd \\(\\Gamma\\) , \\(\\Delta\\) \u7b49\u8868\u793a a finite set of basic judgments\u3002 \u4e00\u4e2a \u53ef\u5bfc\u6027\u5224\u65ad (derivability judgment) \\(\\Gamma \\vdash_R K\\) \u8868\u793a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u89c4\u5219\u96c6\u5408 \\(R\\) \u548c\u82e5\u5e72\u57fa\u672c\u5224\u65ad\u7684\u96c6\u5408 \\(\\Gamma = \\{J_1, \\dots, J_k\\}\\) \uff0c \\(R \\cup \\Gamma\\) \u80fd\u591f\u63a8\u5bfc\u51fa \\(K\\) \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u628a\u8be5\u5224\u65ad\u7684 \u5047\u8bbe (hypothesis) \u6216\u79f0 \u524d\u4ef6 (antecedent) \\(J_1, \\dots, J_k\\) \u89c6\u4e3a\u4e34\u65f6\u516c\u7406\uff0c\u548c \\(R\\) \u4e2d\u7684\u89c4\u5219\u4e00\u540c\u63a8\u5bfc\u51fa \u7ed3\u8bba (conclusion) \u6216\u79f0 \u540e\u4ef6 (consequent) \\(K\\) \u3002\u8fd9\u91cc\u7684 \\(J_i\\) \u548c \\(K\\) \u5747\u4e3a\u57fa\u672c\u5224\u65ad\u3002 \\(\\Gamma \\vdash_R K\\) \u7b49\u4ef7\u4e8e\u79f0\u300c\u89c4\u5219 \\(\\cfrac{J_1, \\dots, J_k}{J}\\) \u53ef\u4ee5\u4ece \\(R\\) \u4e2d\u63a8\u5bfc\u300d\u3002\u8bf4\u4eba\u8bdd\u5c31\u662f\uff1a\u6839\u636e \\(R\\) \uff0c\u5982\u679c \\(\\Gamma\\) \u6210\u7acb\uff0c\u90a3\u4e48\u53ef\u4ee5\u63a8\u5bfc\u51fa \\(K\\) \u6210\u7acb\u3002 Example \u4f8b\u5982\uff0c\u8bb0 \\(R\\) \u4e3a 2.2 \u4e2d\u5bf9 \\(-\\text{ nat}\\) \u7684\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5373\uff1a \\[\\frac{}{\\text{zero nat}}\\] \\[\\frac{a \\text{ nat}}{\\text{succ}(a)\\text{ nat}}\\] \u90a3\u4e48\u53ef\u5bfc\u6027\u5224\u65ad\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a \\[a\\text{ nat}\\vdash_R \\text{succ}(\\text{succ}(a))\\text{ nat}\\] \u4e5f\u53ef\u4ee5\u8868\u8fbe\u4e3a\uff0c \\(\\cfrac{a \\text{ nat}}{\\text{succ}(\\text{succ}(a))\\text{ nat}}\\) \u53ef\u4ee5\u4ece\u89c4\u5219 \\(R\\) \u4e2d\u63a8\u5bfc\u5f97\u51fa\u3002 \u8bf4\u4eba\u8bdd\u5c31\u662f\uff1a\u6839\u636e \\(R\\) \u53ef\u77e5\uff0c\u5bf9\u4e8e\u4efb\u610f \\(a\\) \uff0c\u5982\u679c \\(a \\text{ nat}\\) \uff0c\u90a3\u4e48 \\(\\text{succ}(\\text{succ}(a))\\text{ nat}\\) \u3002 \u53ef\u5bfc\u6027\u5224\u65ad\u4e5f\u662f\u4e00\u4e2a\u5224\u65ad\uff0c\u4e5f\u9700\u8981\u901a\u8fc7\u63a8\u5bfc\u6765\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u5224\u65ad\u5bf9\u4e8e\u4efb\u610f \\(a\\) \u7684\u9009\u53d6\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u5176\u5bf9\u5e94\u7684\u63a8\u5bfc\u662f\uff1a \\[\\cfrac{\\cfrac{a \\text{ nat}}{\\text{succ}(a))\\text{ nat}}}{\\text{succ}(\\text{succ}(a))\\text{ nat}}\\] \u8fdb\u4e00\u6b65\u5730\uff0c \\(\\Gamma_1 \\vdash_R \\Gamma_2\\) \u8868\u793a\u5bf9\u4e8e \\(\\Gamma_2\\) \u4e2d\u7684\u6bcf\u4e2a \\(J\\) \u90fd\u6709 \\(\\Gamma_1 \\vdash_R J\\) \u3002 \\(\\vdash_R J\\) \u8868\u793a \\(J\\) \u53ef\u4ee5\u76f4\u63a5\u7531 \\(R\\) \u63a8\u5bfc\u800c\u51fa\u3002 \u7531\u53ef\u5bfc\u6027\u7684\u5b9a\u4e49\u53ef\u5f97\uff0c\u53ef\u5bfc\u6027\u5728\u6269\u5c55\u65b0\u89c4\u5219\u65f6\u662f \u7a33\u5b9a\u7684 (stable) \uff1a \u5b9a\u7406 3.1 - \u7a33\u5b9a\u6027 (\u7a33\u5b9a\u6027 Stability) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vdash_{R\\ \\cup\\ R'} J\\) \u53ef\u5bfc\u6027\u6709\u8bb8\u591a\u6e90\u81ea\u5176\u5b9a\u4e49\u7684 \u7ed3\u6784\u6027\u8d28 (structural properties) \uff0c\u8fd9\u4e0e \\(R\\) \u7684\u9009\u53d6\u65e0\u5173\uff1a \u81ea\u53cd\u6027 (reflexivity) \\(\\quad\\) \\(J, \\Gamma \\vdash_R J\\) \uff0c\u5373 each hypothesis justifies itself as conclusion\u3002 \u5f31\u5316 (weakening) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma, K \\vdash_R J\\) \uff0c\u5373\u8574\u542b\u4e0d\u53d7\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u672a\u4f7f\u7528\u7684\u89c4\u5219\u7684\u5f71\u54cd\u3002 \u4f20\u9012\u6027 (transitivity) \\(\\quad\\) \u5982\u679c \\(\\Gamma, K \\vdash_R J\\) \u4e14 \\(\\Gamma \\vdash_R K\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vdash_R J\\) \u3002\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2a\u516c\u7406\u66ff\u6362\u4e3a\u5bf9\u5176\u7684\u63a8\u5bfc\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6ca1\u6709\u8fd9\u4e2a\u5047\u8bbe\u7684\u60c5\u51b5\u4e0b\u5bf9\u7ed3\u8bba\u7684\u63a8\u5bfc\u3002\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u524d\u63d0\u4e0b\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u3002 Bug \u4f20\u9012\u6027\u600e\u4e48\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\uff1f\u8fd8\u6ca1\u60f3\u51fa\u6765 3.1.2 Admissibility | \u53ef\u7eb3\u6027 \u00b6 \u53ef\u7eb3\u6027\u5224\u65ad\u8bb0\u4f5c \\(\\Gamma \\vDash_R J\\) \uff0c\u8868\u793a \\(\\vdash_R \\Gamma\\) \u8574\u542b \\(\\vdash_R J\\) \uff1b\u5373\u5982\u679c \\(\\Gamma\\) \u4e2d\u7684\u89c4\u5219\u90fd\u80fd\u7531 \\(R\\) \u63a8\u5bfc\uff0c\u90a3\u4e48 \\(J\\) \u4e5f\u80fd\u7531 \\(R\\) \u63a8\u5bfc\u3002\u8fd9\u662f\u4e00\u79cd\u8f83\u5f31\u7684\u5047\u8a00\u5224\u65ad\u5f62\u5f0f\u3002 \u53ef\u7eb3\u6027\u5224\u65ad \\(J_1, \\dots, J_k \\vDash_R J\\) \u7b49\u4ef7\u4e8e\u79f0\u300c\u89c4\u5219 \\(\\cfrac{J_1, \\dots, J_k}{J}\\) \u76f8\u5bf9\u4e8e \\(R\\) \u662f \u53ef\u7eb3\u7684 (admissible) \u300d\u3002 \u53ef\u7eb3\u6027\u5224\u65ad\u5728\u5bf9\u89c4\u5219\u6269\u5c55\u65f6\u5e76\u4e0d\u7a33\u5b9a\u3002 Example \u4f8b\u5982\uff0c\u8bb0 \\(R\\) \u4e3a 2.5 \u4e2d\u5bf9\u5947\u81ea\u7136\u6570\u548c\u5076\u81ea\u7136\u6570\u7684\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5373\uff1a \\[\\cfrac{}{\\text{zero even}}\\] \\[\\cfrac{b \\text{ odd}}{\\text{succ}(b)\\text{ even}}\\] \\[\\cfrac{a \\text{ even}}{\\text{succ}(a)\\text{ odd}}\\] \u90a3\u4e48\u53ef\u7eb3\u6027\u5224\u65ad \\(\\text{succ}(a) \\text{ even} \\vDash_R a\\text{ odd}\\) \u662f\u5408\u6cd5\u7684\u3002\u5b83\u7b49\u4ef7\u4e8e\u79f0\u89c4\u5219 \\(\\cfrac{\\text{succ}(a) \\text{ even}}{a\\text{ odd}}\\) \u76f8\u5bf9\u4e8e \\(R\\) \u662f\u53ef\u7eb3\u7684\u3002 \u4f46\u662f\uff0c\u5982\u679c\u7528\u516c\u7406 \\(\\cfrac{}{\\text{succ(zero) even}}\\) \u6269\u5c55 \\(R\\) \uff0c\u5219\u4e0a\u8ff0\u89c4\u5219\u662f\u4e0d\u53ef\u7eb3\u7684\u3002\u56e0\u4e3a\u5f53 \\(a = \\text{zero}\\) \u65f6\uff0c\u521a\u521a\u6dfb\u52a0\u7684\u89c4\u5219\u80fd\u63a8\u5bfc\u51fa \\(\\text{succ(zero) even}\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u89c4\u5219\u53ef\u4ee5\u63a8\u5bfc\u51fa \\(\\text{zero odd}\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u7eb3\u6027\u5224\u65ad\u5728\u5bf9\u89c4\u5219\u6269\u5c55\u65f6\u5e76\u4e0d\u7a33\u5b9a\u3002 \u53ef\u5bfc\u6027\u7684\u7ed3\u6784\u7279\u6027\u786e\u4fdd\u4e86\u53ef\u5bfc\u6027\u6bd4\u53ef\u7eb3\u6027\u66f4\u5f3a\u3002 \u5b9a\u7406 3.2 \u5982\u679c \\(\\Gamma\\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma\\vDash_R J\\) \u3002 \u8bc1\u660e\uff1a\u5373\u8981\u8bc1\uff0c\u5982\u679c \\(\\Gamma\\vdash_R J\\) \u4e14 \\(\\vdash_R \\Gamma\\) \uff0c\u90a3\u4e48 \\(\\vdash_R J\\) \u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u53ef\u5bfc\u6027\u5224\u65ad\u7684\u4f20\u9012\u6027\u8bc1\u660e\u3002 \u9006\u547d\u9898\u662f\u4e0d\u6210\u7acb\u7684\u3002\u4e00\u4e2a\u53cd\u4f8b\u662f\uff0c\u5728\u524d\u4f8b\u4e2d\uff0c \\(\\text{succ}(a) \\text{ even} \\vDash_R a\\text{ odd}\\) \u662f\u5408\u6cd5\u7684\uff0c\u4f46 \\(\\text{succ}(a) \\text{ even} \\vdash_R a\\text{ odd}\\) \u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u53ef\u7eb3\u6027\u4e5f\u6709\u4e0e\u53ef\u5bfc\u6027\u7c7b\u4f3c\u7684\u7ed3\u6784\u6027\u8d28\uff1a \u81ea\u53cd\u6027 (reflexivity) \\(\\quad\\) \\(J, \\Gamma \\vDash_R J\\) \u3002 \u5f31\u5316 (weakening) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vDash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma, K \\vDash_R J\\) \u3002 \u4f20\u9012\u6027 (transitivity) \\(\\quad\\) \u5982\u679c \\(\\Gamma, K \\vDash_R J\\) \u4e14 \\(\\Gamma \\vDash_R K\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vDash_R J\\) \u3002 3.2 Hypothetical Inductive Definitions | \u5047\u8a00\u5f52\u7eb3\u5b9a\u4e49 \u00b6 \u6ca1\u8bb2\uff0c\u6682\u7565\u3002 3.3 General Judgments | \u4e00\u822c\u6027\u5224\u65ad \u00b6 \u6ca1\u770b\u61c2\uff0c\u6682\u7565\u3002 3.4 Generic Inductive Definitions | \u6cdb\u578b\u5f52\u7eb3\u5b9a\u4e49 \u00b6 \u6ca1\u8bb2\uff0c\u6682\u7565\u3002","title":"3 \u5047\u8a00\u5224\u65ad\u4e0e\u4e00\u822c\u6027\u5224\u65ad"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#3-hypothetical-and-general-judgments--\u5047\u8a00\u5224\u65ad\u4e0e\u4e00\u822c\u6027\u5224\u65ad","text":"","title":"3 Hypothetical and General Judgments | \u5047\u8a00\u5224\u65ad\u4e0e\u4e00\u822c\u6027\u5224\u65ad"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#31-hypothetical-judgments--\u5047\u8a00\u5224\u65ad","text":"2.1 \u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u57fa\u672c\u5224\u65ad (basic judgments)\uff0c\u4f8b\u5982 \\(a \\text{ nat}\\) \u7b49\uff0c\u5b83\u4eec\u7528\u6765\u8868\u660e\u4e00\u68f5\u6216\u591a\u68f5 ABT \u6709\u67d0\u79cd\u6027\u8d28\u6216\u8005\u5f7c\u6b64\u4e4b\u95f4\u6709\u67d0\u79cd\u8054\u7cfb\u3002 \u5047\u8a00\u5224\u65ad (hypothetical judgment) \u5219\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a \u5047\u8bbe (hypothesis) \u548c\u4e00\u4e2a \u7ed3\u8bba (conclusion) \u4e4b\u95f4\u7684 \u8574\u542b\u5173\u7cfb (entailment) \u3002\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e24\u79cd\u8574\u542b\u6982\u5ff5\u3002","title":"3.1 Hypothetical Judgments | \u5047\u8a00\u5224\u65ad"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#311-derivability--\u53ef\u5bfc\u6027","text":"\u7ed9\u5b9a\u4e00\u4e2a\u89c4\u5219\u96c6\u5408 \\(R\\) \uff0c\u6211\u4eec\u7528 \\(R \\cup \\{J_1, \\dots, J_k\\}\\) \u8868\u793a\u5229\u7528\u516c\u7406 \\(\\overline{J_1}, \\dots, \\overline{J_k}\\) \u5bf9 \\(R\\) \u7684 \u6269\u5c55 (expansion) \uff1b\u8fd9\u91cc\u7684 \\(J_i\\) \u5747\u4e3a\u57fa\u672c\u5224\u65ad\uff0c\u8fd9\u4e2a\u6269\u5c55\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e9b\u57fa\u672c\u5224\u65ad\u5bf9\u5e94\u7684\u516c\u7406\u52a0\u5165\u89c4\u5219\u96c6\u5408\u5f97\u5230\u7684\u65b0\u7684\u89c4\u5219\u96c6\u5408\u3002 Tips \u6211\u4eec\u901a\u5e38\u7528\u5927\u5199\u5e0c\u814a\u5b57\u6bcd \\(\\Gamma\\) , \\(\\Delta\\) \u7b49\u8868\u793a a finite set of basic judgments\u3002 \u4e00\u4e2a \u53ef\u5bfc\u6027\u5224\u65ad (derivability judgment) \\(\\Gamma \\vdash_R K\\) \u8868\u793a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u89c4\u5219\u96c6\u5408 \\(R\\) \u548c\u82e5\u5e72\u57fa\u672c\u5224\u65ad\u7684\u96c6\u5408 \\(\\Gamma = \\{J_1, \\dots, J_k\\}\\) \uff0c \\(R \\cup \\Gamma\\) \u80fd\u591f\u63a8\u5bfc\u51fa \\(K\\) \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u628a\u8be5\u5224\u65ad\u7684 \u5047\u8bbe (hypothesis) \u6216\u79f0 \u524d\u4ef6 (antecedent) \\(J_1, \\dots, J_k\\) \u89c6\u4e3a\u4e34\u65f6\u516c\u7406\uff0c\u548c \\(R\\) \u4e2d\u7684\u89c4\u5219\u4e00\u540c\u63a8\u5bfc\u51fa \u7ed3\u8bba (conclusion) \u6216\u79f0 \u540e\u4ef6 (consequent) \\(K\\) \u3002\u8fd9\u91cc\u7684 \\(J_i\\) \u548c \\(K\\) \u5747\u4e3a\u57fa\u672c\u5224\u65ad\u3002 \\(\\Gamma \\vdash_R K\\) \u7b49\u4ef7\u4e8e\u79f0\u300c\u89c4\u5219 \\(\\cfrac{J_1, \\dots, J_k}{J}\\) \u53ef\u4ee5\u4ece \\(R\\) \u4e2d\u63a8\u5bfc\u300d\u3002\u8bf4\u4eba\u8bdd\u5c31\u662f\uff1a\u6839\u636e \\(R\\) \uff0c\u5982\u679c \\(\\Gamma\\) \u6210\u7acb\uff0c\u90a3\u4e48\u53ef\u4ee5\u63a8\u5bfc\u51fa \\(K\\) \u6210\u7acb\u3002 Example \u4f8b\u5982\uff0c\u8bb0 \\(R\\) \u4e3a 2.2 \u4e2d\u5bf9 \\(-\\text{ nat}\\) \u7684\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5373\uff1a \\[\\frac{}{\\text{zero nat}}\\] \\[\\frac{a \\text{ nat}}{\\text{succ}(a)\\text{ nat}}\\] \u90a3\u4e48\u53ef\u5bfc\u6027\u5224\u65ad\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a \\[a\\text{ nat}\\vdash_R \\text{succ}(\\text{succ}(a))\\text{ nat}\\] \u4e5f\u53ef\u4ee5\u8868\u8fbe\u4e3a\uff0c \\(\\cfrac{a \\text{ nat}}{\\text{succ}(\\text{succ}(a))\\text{ nat}}\\) \u53ef\u4ee5\u4ece\u89c4\u5219 \\(R\\) \u4e2d\u63a8\u5bfc\u5f97\u51fa\u3002 \u8bf4\u4eba\u8bdd\u5c31\u662f\uff1a\u6839\u636e \\(R\\) \u53ef\u77e5\uff0c\u5bf9\u4e8e\u4efb\u610f \\(a\\) \uff0c\u5982\u679c \\(a \\text{ nat}\\) \uff0c\u90a3\u4e48 \\(\\text{succ}(\\text{succ}(a))\\text{ nat}\\) \u3002 \u53ef\u5bfc\u6027\u5224\u65ad\u4e5f\u662f\u4e00\u4e2a\u5224\u65ad\uff0c\u4e5f\u9700\u8981\u901a\u8fc7\u63a8\u5bfc\u6765\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e2a\u5224\u65ad\u5bf9\u4e8e\u4efb\u610f \\(a\\) \u7684\u9009\u53d6\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u5176\u5bf9\u5e94\u7684\u63a8\u5bfc\u662f\uff1a \\[\\cfrac{\\cfrac{a \\text{ nat}}{\\text{succ}(a))\\text{ nat}}}{\\text{succ}(\\text{succ}(a))\\text{ nat}}\\] \u8fdb\u4e00\u6b65\u5730\uff0c \\(\\Gamma_1 \\vdash_R \\Gamma_2\\) \u8868\u793a\u5bf9\u4e8e \\(\\Gamma_2\\) \u4e2d\u7684\u6bcf\u4e2a \\(J\\) \u90fd\u6709 \\(\\Gamma_1 \\vdash_R J\\) \u3002 \\(\\vdash_R J\\) \u8868\u793a \\(J\\) \u53ef\u4ee5\u76f4\u63a5\u7531 \\(R\\) \u63a8\u5bfc\u800c\u51fa\u3002 \u7531\u53ef\u5bfc\u6027\u7684\u5b9a\u4e49\u53ef\u5f97\uff0c\u53ef\u5bfc\u6027\u5728\u6269\u5c55\u65b0\u89c4\u5219\u65f6\u662f \u7a33\u5b9a\u7684 (stable) \uff1a \u5b9a\u7406 3.1 - \u7a33\u5b9a\u6027 (\u7a33\u5b9a\u6027 Stability) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vdash_{R\\ \\cup\\ R'} J\\) \u53ef\u5bfc\u6027\u6709\u8bb8\u591a\u6e90\u81ea\u5176\u5b9a\u4e49\u7684 \u7ed3\u6784\u6027\u8d28 (structural properties) \uff0c\u8fd9\u4e0e \\(R\\) \u7684\u9009\u53d6\u65e0\u5173\uff1a \u81ea\u53cd\u6027 (reflexivity) \\(\\quad\\) \\(J, \\Gamma \\vdash_R J\\) \uff0c\u5373 each hypothesis justifies itself as conclusion\u3002 \u5f31\u5316 (weakening) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma, K \\vdash_R J\\) \uff0c\u5373\u8574\u542b\u4e0d\u53d7\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u672a\u4f7f\u7528\u7684\u89c4\u5219\u7684\u5f71\u54cd\u3002 \u4f20\u9012\u6027 (transitivity) \\(\\quad\\) \u5982\u679c \\(\\Gamma, K \\vdash_R J\\) \u4e14 \\(\\Gamma \\vdash_R K\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vdash_R J\\) \u3002\u5982\u679c\u6211\u4eec\u5c06\u4e00\u4e2a\u516c\u7406\u66ff\u6362\u4e3a\u5bf9\u5176\u7684\u63a8\u5bfc\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6ca1\u6709\u8fd9\u4e2a\u5047\u8bbe\u7684\u60c5\u51b5\u4e0b\u5bf9\u7ed3\u8bba\u7684\u63a8\u5bfc\u3002\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u524d\u63d0\u4e0b\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\u3002 Bug \u4f20\u9012\u6027\u600e\u4e48\u901a\u8fc7\u89c4\u5219\u5f52\u7eb3\u8bc1\u660e\uff1f\u8fd8\u6ca1\u60f3\u51fa\u6765","title":"3.1.1 Derivability | \u53ef\u5bfc\u6027"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#312-admissibility--\u53ef\u7eb3\u6027","text":"\u53ef\u7eb3\u6027\u5224\u65ad\u8bb0\u4f5c \\(\\Gamma \\vDash_R J\\) \uff0c\u8868\u793a \\(\\vdash_R \\Gamma\\) \u8574\u542b \\(\\vdash_R J\\) \uff1b\u5373\u5982\u679c \\(\\Gamma\\) \u4e2d\u7684\u89c4\u5219\u90fd\u80fd\u7531 \\(R\\) \u63a8\u5bfc\uff0c\u90a3\u4e48 \\(J\\) \u4e5f\u80fd\u7531 \\(R\\) \u63a8\u5bfc\u3002\u8fd9\u662f\u4e00\u79cd\u8f83\u5f31\u7684\u5047\u8a00\u5224\u65ad\u5f62\u5f0f\u3002 \u53ef\u7eb3\u6027\u5224\u65ad \\(J_1, \\dots, J_k \\vDash_R J\\) \u7b49\u4ef7\u4e8e\u79f0\u300c\u89c4\u5219 \\(\\cfrac{J_1, \\dots, J_k}{J}\\) \u76f8\u5bf9\u4e8e \\(R\\) \u662f \u53ef\u7eb3\u7684 (admissible) \u300d\u3002 \u53ef\u7eb3\u6027\u5224\u65ad\u5728\u5bf9\u89c4\u5219\u6269\u5c55\u65f6\u5e76\u4e0d\u7a33\u5b9a\u3002 Example \u4f8b\u5982\uff0c\u8bb0 \\(R\\) \u4e3a 2.5 \u4e2d\u5bf9\u5947\u81ea\u7136\u6570\u548c\u5076\u81ea\u7136\u6570\u7684\u5f52\u7eb3\u5b9a\u4e49\uff0c\u5373\uff1a \\[\\cfrac{}{\\text{zero even}}\\] \\[\\cfrac{b \\text{ odd}}{\\text{succ}(b)\\text{ even}}\\] \\[\\cfrac{a \\text{ even}}{\\text{succ}(a)\\text{ odd}}\\] \u90a3\u4e48\u53ef\u7eb3\u6027\u5224\u65ad \\(\\text{succ}(a) \\text{ even} \\vDash_R a\\text{ odd}\\) \u662f\u5408\u6cd5\u7684\u3002\u5b83\u7b49\u4ef7\u4e8e\u79f0\u89c4\u5219 \\(\\cfrac{\\text{succ}(a) \\text{ even}}{a\\text{ odd}}\\) \u76f8\u5bf9\u4e8e \\(R\\) \u662f\u53ef\u7eb3\u7684\u3002 \u4f46\u662f\uff0c\u5982\u679c\u7528\u516c\u7406 \\(\\cfrac{}{\\text{succ(zero) even}}\\) \u6269\u5c55 \\(R\\) \uff0c\u5219\u4e0a\u8ff0\u89c4\u5219\u662f\u4e0d\u53ef\u7eb3\u7684\u3002\u56e0\u4e3a\u5f53 \\(a = \\text{zero}\\) \u65f6\uff0c\u521a\u521a\u6dfb\u52a0\u7684\u89c4\u5219\u80fd\u63a8\u5bfc\u51fa \\(\\text{succ(zero) even}\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4efb\u4f55\u89c4\u5219\u53ef\u4ee5\u63a8\u5bfc\u51fa \\(\\text{zero odd}\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u7eb3\u6027\u5224\u65ad\u5728\u5bf9\u89c4\u5219\u6269\u5c55\u65f6\u5e76\u4e0d\u7a33\u5b9a\u3002 \u53ef\u5bfc\u6027\u7684\u7ed3\u6784\u7279\u6027\u786e\u4fdd\u4e86\u53ef\u5bfc\u6027\u6bd4\u53ef\u7eb3\u6027\u66f4\u5f3a\u3002 \u5b9a\u7406 3.2 \u5982\u679c \\(\\Gamma\\vdash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma\\vDash_R J\\) \u3002 \u8bc1\u660e\uff1a\u5373\u8981\u8bc1\uff0c\u5982\u679c \\(\\Gamma\\vdash_R J\\) \u4e14 \\(\\vdash_R \\Gamma\\) \uff0c\u90a3\u4e48 \\(\\vdash_R J\\) \u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u53ef\u5bfc\u6027\u5224\u65ad\u7684\u4f20\u9012\u6027\u8bc1\u660e\u3002 \u9006\u547d\u9898\u662f\u4e0d\u6210\u7acb\u7684\u3002\u4e00\u4e2a\u53cd\u4f8b\u662f\uff0c\u5728\u524d\u4f8b\u4e2d\uff0c \\(\\text{succ}(a) \\text{ even} \\vDash_R a\\text{ odd}\\) \u662f\u5408\u6cd5\u7684\uff0c\u4f46 \\(\\text{succ}(a) \\text{ even} \\vdash_R a\\text{ odd}\\) \u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u53ef\u7eb3\u6027\u4e5f\u6709\u4e0e\u53ef\u5bfc\u6027\u7c7b\u4f3c\u7684\u7ed3\u6784\u6027\u8d28\uff1a \u81ea\u53cd\u6027 (reflexivity) \\(\\quad\\) \\(J, \\Gamma \\vDash_R J\\) \u3002 \u5f31\u5316 (weakening) \\(\\quad\\) \u5982\u679c \\(\\Gamma \\vDash_R J\\) \uff0c\u90a3\u4e48 \\(\\Gamma, K \\vDash_R J\\) \u3002 \u4f20\u9012\u6027 (transitivity) \\(\\quad\\) \u5982\u679c \\(\\Gamma, K \\vDash_R J\\) \u4e14 \\(\\Gamma \\vDash_R K\\) \uff0c\u90a3\u4e48 \\(\\Gamma \\vDash_R J\\) \u3002","title":"3.1.2 Admissibility | \u53ef\u7eb3\u6027"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#32-hypothetical-inductive-definitions--\u5047\u8a00\u5f52\u7eb3\u5b9a\u4e49","text":"\u6ca1\u8bb2\uff0c\u6682\u7565\u3002","title":"3.2 Hypothetical Inductive Definitions | \u5047\u8a00\u5f52\u7eb3\u5b9a\u4e49"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#33-general-judgments--\u4e00\u822c\u6027\u5224\u65ad","text":"\u6ca1\u770b\u61c2\uff0c\u6682\u7565\u3002","title":"3.3 General Judgments | \u4e00\u822c\u6027\u5224\u65ad"},{"location":"pl/ppl_notes/3_Hypothetical_and_General_Judgments/#34-generic-inductive-definitions--\u6cdb\u578b\u5f52\u7eb3\u5b9a\u4e49","text":"\u6ca1\u8bb2\uff0c\u6682\u7565\u3002","title":"3.4 Generic Inductive Definitions | \u6cdb\u578b\u5f52\u7eb3\u5b9a\u4e49"},{"location":"%E4%B8%BB%E9%A1%B5/theme/","text":"\u989c\u8272\u4e3b\u9898 \u00b6 \u65e5\u95f4 / \u591c\u95f4 \u00b6 default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) localStorage.setItem(\"data-md-color-scheme\",attr); updateScheme(); }) }) \u4e3b\u8272 \u00b6 red pink purple indigo blue cyan teal green lime orange brown grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) localStorage.setItem(\"data-md-color-primary\",attr); }) })","title":"\u989c\u8272\u4e3b\u9898 & \u591c\u95f4\u6a21\u5f0f"},{"location":"%E4%B8%BB%E9%A1%B5/theme/#\u989c\u8272\u4e3b\u9898","text":"","title":"\u989c\u8272\u4e3b\u9898"},{"location":"%E4%B8%BB%E9%A1%B5/theme/#\u65e5\u95f4--\u591c\u95f4","text":"default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) localStorage.setItem(\"data-md-color-scheme\",attr); updateScheme(); }) })","title":"\u65e5\u95f4 / \u591c\u95f4"},{"location":"%E4%B8%BB%E9%A1%B5/theme/#\u4e3b\u8272","text":"red pink purple indigo blue cyan teal green lime orange brown grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) localStorage.setItem(\"data-md-color-primary\",attr); }) })","title":"\u4e3b\u8272"},{"location":"%E5%85%B6%E4%BB%96%E8%AF%BE%E7%A8%8B/","text":"Abstract \u5176\u4ed6\u6ca1\u90a3\u4e48\u91cd\u8981\u7684\u8bfe\u7a0b\u7684\u4e00\u4e9b\u8bb0\u5f55","title":"\u5176\u4ed6\u8bfe\u7a0b"},{"location":"%E5%AE%89%E5%85%A8/","text":"Abstract \u867d\u7136\u5b66\u4e86\u5b89\u5168\uff0c\u4f46\u662f\u6ca1\u5b8c\u5168\u5b66 XD","title":"\u5b89\u5168"},{"location":"%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/","text":"\u6570\u5b66\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u00b6","title":"\u6570\u5b66\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5"},{"location":"%E6%95%B0%E5%AD%A6%E5%92%8C%E7%AE%97%E6%B3%95/#\u6570\u5b66\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5","text":"","title":"\u6570\u5b66\u3001\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5"},{"location":"%E6%9D%82%E9%A1%B9/","text":"\u6742\u9879 \u00b6 Abstract \u4e00\u4e9b\u96f6\u6563\u7684\u77e5\u8bc6\u8bb0\u5f55\u3001\u5de5\u5177\u4f7f\u7528\u8bb0\u5f55\u3001\u5c0f\u4f5c\u54c1\u4e4b\u7c7b\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"%E6%9D%82%E9%A1%B9/#\u6742\u9879","text":"Abstract \u4e00\u4e9b\u96f6\u6563\u7684\u77e5\u8bc6\u8bb0\u5f55\u3001\u5de5\u5177\u4f7f\u7528\u8bb0\u5f55\u3001\u5c0f\u4f5c\u54c1\u4e4b\u7c7b\u7684\u4e1c\u897f","title":"\u6742\u9879"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","text":"Abstract \u8bb0\u5f55\u642d\u4e2a\u4eba\u4e3b\u9875 / \u54b8\u9c7c\u8086\u8fc7\u7a0b\u4e2d\u7684\u601d\u8003\u3001\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848\uff01 \u4e3a\u4ec0\u4e48\u4f7f\u7528 mkdocs-material\uff1f \u00b6 \u56e0\u4e3a\u6211\u7684\u7b14\u8bb0\u957f\u5f97\u66f4\u50cf\u4e66\u4e00\u6837\u7684\u4e1c\u897f\u800c\u4e0d\u662f\u6bd4\u8f83\u96f6\u6563\u7684\u535a\u5ba2\uff1b\u770b OIWiki \u4e4b\u7c7b\u7684\u4e1c\u897f\u5c31\u4e00\u76f4\u5f88\u5fc3\u52a8\uff01\uff01 \u5165\u95e8\u6559\u7a0b \u00b6 Material for MkDocs 1 \uff1a\u5b98\u65b9\u6587\u6863\uff0c\u662f\u6d0b\u6587\u3002 Material for MkDocs \u4e2d\u6587\u6587\u6863 2 \uff1a\u5b98\u65b9\u6587\u6863\u7684\u7ffb\u8bd1\uff1b\u4f46\u662f\u4ecd\u7136\u5efa\u8bae\u5c3d\u53ef\u80fd\u770b\u4e0a\u9762\u90a3\u4e2a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6709\u4e9b\u4e1c\u897f\u8fc7\u65f6\u4e86QWQ \u53e6\u5916\uff0c\u7531\u4e8e mkdocs \u5bf9\u5e94\u7684\u4ed3\u5e93\u91cc\u80fd\u770b\u5230\u6587\u6863\u7684 md \u6e90\u7801\uff0c\u56e0\u6b64\u5176\u5b9e\u53ef\u4ee5\u5728\u8fd9\u4e24\u4e2a\u6587\u6863\uff0c\u6216\u8005\u5176\u4ed6\u7528 mkdocs \u505a\u7684\u535a\u5ba2\uff08\u4f8b\u5982 OI Wiki , CTF Wiki \u7b49\uff09\u91cc\u9762\u770b\u6709\u54ea\u4e9b\u60f3\u7528\u7684\u5199\u6cd5\uff0c\u7136\u540e\u4ece\u5bf9\u5e94\u7684\u4ed3\u5e93\u91cc\u76f4\u63a5\u62ff\u8fdb\u6765\uff01 \u4e3b\u9898\u989c\u8272 / \u591c\u95f4\u6a21\u5f0f \u00b6 Warning \u6211\u5e76\u4e0d\u719f\u6089 HTML/CSS/JS\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u5f88\u591a\u505a\u6cd5\u53ef\u80fd\u6bd4\u8f83\u8822QWQ\uff0c\u5982\u679c\u6709\u597d\u7684\u505a\u6cd5\u8bf7\u52a1\u5fc5\u544a\u8bc9\u6211\uff01 \u662f\u4ece OI Wiki \u6284\u7684\uff01 \u4fee\u6539\u4e3b\u9898\u989c\u8272\u7684\u754c\u9762\u4ee3\u7801\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ### \u65e5\u95f4 / \u591c\u95f4 < div class = \"tx-switch\" > < button data-md-color-scheme = \"default\" >< code > default </ code ></ button > < button data-md-color-scheme = \"slate\" >< code > slate </ code ></ button > </ div > < script > var buttons = document . querySelectorAll ( \"button[data-md-color-scheme]\" ) buttons . forEach ( function ( button ) { button . addEventListener ( \"click\" , function () { var attr = this . getAttribute ( \"data-md-color-scheme\" ) document . body . setAttribute ( \"data-md-color-scheme\" , attr ) localStorage . setItem ( \"data-md-color-scheme\" , attr ); updateScheme (); }) }) </ script > ### \u4e3b\u8272 < div class = \"tx-switch\" > < button class = \"button1\" data-md-color-primary = \"red\" style = \"background-color:red\" > red </ button > < button class = \"button1\" data-md-color-primary = \"pink\" style = \"background-color:pink;color:black\" > pink </ button > < button class = \"button1\" data-md-color-primary = \"purple\" style = \"background-color:purple\" > purple </ button > < button class = \"button1\" data-md-color-primary = \"indigo\" style = \"background-color:indigo\" > indigo </ button > < button class = \"button1\" data-md-color-primary = \"blue\" style = \"background-color:blue\" > blue </ button > < button class = \"button1\" data-md-color-primary = \"cyan\" style = \"background-color:cyan;color:black\" > cyan </ button > < button class = \"button1\" data-md-color-primary = \"teal\" style = \"background-color:teal\" > teal </ button > < button class = \"button1\" data-md-color-primary = \"green\" style = \"background-color:green\" > green </ button > < button class = \"button1\" data-md-color-primary = \"lime\" style = \"background-color:lime;color:black\" > lime </ button > < button class = \"button1\" data-md-color-primary = \"orange\" style = \"background-color:orange;color:black\" > orange </ button > < button class = \"button1\" data-md-color-primary = \"brown\" style = \"background-color:brown;border-radius=3px\" > brown </ button > < button class = \"button1\" data-md-color-primary = \"grey\" style = \"background-color:grey\" > grey </ button > < button class = \"button1\" data-md-color-primary = \"black\" style = \"background-color:black\" > black </ button > < button class = \"button1\" data-md-color-primary = \"white\" style = \"background-color:white;color:black\" > white </ button > </ div > < script > var buttons = document . querySelectorAll ( \"button[data-md-color-primary]\" ) buttons . forEach ( function ( button ) { button . addEventListener ( \"click\" , function () { var attr = this . getAttribute ( \"data-md-color-primary\" ) document . body . setAttribute ( \"data-md-color-primary\" , attr ) localStorage . setItem ( \"data-md-color-primary\" , attr ); }) }) </ script > \u4e24\u6bb5 script \u7ed9\u8fd9\u4e9b\u6309\u94ae\u7ed1\u5b9a\u4e86\u54cd\u5e94\u51fd\u6570\uff0c\u5c06\u5bf9\u5e94\u7684\u989c\u8272\u5b58\u5165 localStorage \u3002 \u5176\u4e2d button1 \u7684 css \u6211\u653e\u5728\u4e86\u4e00\u4e2a\u6587\u4ef6 extra.css \u91cc\uff1a . button1 { color : white ; padding : 1 px 4 px ; text-align : center ; text-decoration : none ; display : inline-block ; font-size : 15 px ; margin : 0 px 2 px ; cursor : pointer ; border-radius : 4 px ; } \u7136\u540e\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u6587\u4ef6 extra.js \u91cc\u9762\u5305\u542b\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 (() => { var p = localStorage . getItem ( \"data-md-color-primary\" ); if ( p ) { document . body . setAttribute ( 'data-md-color-primary' , p ); } var a = localStorage . getItem ( 'data-md-color-scheme' ); if ( a == null ) { a = \"slate\" ; localStorage . setItem ( \"data-md-color-scheme\" , a ); } document . body . setAttribute ( 'data-md-color-scheme' , a ); })() \u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u4ece localStorage \u91cc\u628a\u5b58\u4e86\u7684\u90a3\u4e9b\u4e1c\u897f\u62ff\u51fa\u6765\uff0c\u7136\u540e\u8bbe\u7f6e\u5230\u6587\u6863\u7684\u5bf9\u5e94\u4f4d\u7f6e\u91cc\u53bb\u3002 \u6211\u4eec\u5728 mkdocs.yml \u91cc\u589e\u52a0\u8fd9\u6837\u7684\u6761\u76ee\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u9875\u9762\u90fd\u4f1a\u5305\u542b\u8fd9\u6bb5 js\uff0c\u4ece\u800c\u6bcf\u4e2a\u9875\u9762\u52a0\u8f7d\u65f6\u90fd\u4f1a\u8fd0\u884c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fdb\u800c\u7ef4\u6301\u4e3b\u9898\u7684\u8bbe\u7f6e\uff1a extra_javascript : - 'path/extra.js' \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u628a extra.css \u5305\u542b\u8fdb\u6765\uff1a extra_css : - 'path/extra.css' \u8bc4\u8bba\u7cfb\u7edf \u00b6 \u57fa\u672c\u7684\u6559\u7a0b\u53c2\u8003\u4e86 https://squidfunk.github.io/mkdocs-material/setup/adding-a-comment-system/ \u3002 \u540c\u65f6\uff0c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u4fdd\u6301\u8bc4\u8bba\u7cfb\u7edf\u7684\u4e3b\u9898\uff08\u65e5\u95f4 / \u591c\u95f4\u6a21\u5f0f\uff09\u548c\u524d\u9762\u8bbe\u7f6e\u7684\u4e00\u81f4\u5462\uff1f\u5728\u524d\u4e00\u8282\u7b2c\u4e00\u6bb5\u7684 md/html \u4ee3\u7801\u7684\u7b2c 15 \u884c\u6709\u4e00\u4e2a updateScheme(); \uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5728 extra.js \u91cc\uff0c\u7528\u6765\u5728\u66f4\u6539\u4e3b\u9898\u65f6\u901a\u77e5\u8bc4\u8bba\u7cfb\u7edf\u540c\u6b65\uff08\u5176\u5b9e\u8bc4\u8bba\u7cfb\u7edf\u7684 comment.html \u91cc\u6709 /* Register event handlers after documented loaded */ \u7684\u7247\u6bb5\uff0c\u4f46\u662f\u54cd\u5e94\u7684\u548c\u4e0a\u9762\u6284\u7684 OI Wiki \u6539\u7684\u597d\u50cf\u5e76\u4e0d\u5bf9\u5e94\uff0c\u6240\u4ee5\u6211\u6ce8\u91ca\u6389\u4e86QWQ\uff09\uff1a const updateScheme = e => { var giscus = document . querySelector ( \".giscus-frame\" ); var a = localStorage . getItem ( 'data-md-color-scheme' ); var theme = a === \"default\" ? \"light\" : \"dark\" ; alert ( a + \" -> \" + theme ); giscus . contentWindow . postMessage ( { giscus : { setConfig : { theme } } }, \"https://giscus.app\" ) } \u540c\u65f6\uff0c\u6211\u4eec\u5728\u8bc4\u8bba\u7cfb\u7edf\u7684 comment.html \u4e2d\uff0c\u672c\u6765\u4e5f\u6709\u4e00\u6bb5\u6ce8\u91ca\u4e86 /* Set palette on initial load */ \u7684\u4ee3\u7801\uff0c\u6211\u4eec\u4e5f\u5c06\u5176\u6539\u4e3a updateScheme(); \uff01 \u89e3\u51b3\u516c\u5f0f\u5e26\u7eb5\u5411\u6eda\u52a8\u6761\u7684\u95ee\u9898 \u00b6 \u524d\u7f6e\u8981\u6c42 \u5728 mkdocs.yml \u91cc\u5f15\u5165\u4e00\u4e2a css \u6587\u4ef6\uff0c\u6bd4\u5982\u53eb extra.css extra_css : - 'path/extra.css' \u5728 extra.css \u91cc\u589e\u52a0\u8fd9\u6837\u7684\u4e1c\u897f\uff1a . md-typeset div . arithmatex { overflow-y : hidden ; } \u663e\u793a\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4 \u00b6 \u5728 mkdocs.yml \u4e2d\u589e\u52a0\u8fd9\u6837\u7684\u5185\u5bb9\uff1a plugins : - git-revision-date-localized : enable_creation_date : true \u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u901a\u8fc7 pip3 install mkdocs-git-revision-date-localized-plugin \u6765\u5b89\u88c5\u3002 \u5bf9\u5e94\u5730\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 Github Action \u4e4b\u7c7b\u7684 CI \u6765\u81ea\u52a8\u90e8\u7f72\u535a\u5ba2\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5728\u5176\u4e2d\u5f15\u5165\u8fd9\u4e2a\u63d2\u4ef6\uff08\u89c1\u7b2c 18 \u884c\u9ad8\u4eae\u5904\uff09\uff1a .github/workflows/autoBuild.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name : autoBuild on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 with : fetch-depth : 0 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material - run : pip install mkdocs-git-revision-date-localized-plugin - run : mkdocs gh-deploy --force \u540c\u65f6\uff0c\u5982\u679c\u4f7f\u7528\u4e86 CI \u6765\u81ea\u52a8\u90e8\u7f72\u535a\u5ba2\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u8bbe\u7f6e\uff0c\u53c2\u89c1 Note when using build environments \uff1b\u5bf9\u4e8e Github Actions\uff0c\u6211\u4eec\u9700\u8981\u7528\u4e0a\u9762\u4ee3\u7801\u4e2d 11-13 \u884c\u9ad8\u4eae\u5904\u7684 uses \u6765\u4ee3\u66ff\u539f\u5148\u7684 - uses: actions/checkout@v2 \u3002 \u8fd9\u91cc\u7684 enable_creation_date \u4e4b\u7c7b\u7684\u9009\u9879\u53ef\u4ee5\u5728 \u5b98\u65b9\u6587\u6863 \u6216\u8005 \u8fd9\u4e2a\u63d2\u4ef6\u7684\u6587\u6863 \u91cc\u770b\uff0c\u6211\u7528\u7684\u662f\uff1a plugins : - git-revision-date-localized : enable_creation_date : true type : timeago \u6548\u679c\u53c2\u89c1\u672c\u9875\u6700\u4e0b\u9762\uff09\uff09 Tips \u5982\u679c mkdocs.yml \u91cc\u6ca1\u6709 plugins : - search \u90a3\u8981\u8bb0\u5f97\u52a0\u4e0a\uff0c\u56e0\u4e3a MkDocs enables it by default if there is no plugins entry set 3 . status \u5c0f\u65b9\u5757\uff01 \u00b6 \u6548\u679c\u5c55\u793a\uff1a blue green red yellow gray \uff08\u5077\u61d2\uff0c\u591c\u95f4\u6a21\u5f0f\u4e0b\u5168\u90fd\u5f04\u6210\u767d\u8272\u5b57\u4f53\u4e86\uff09 \u4ece \u848b\u708e\u5ca9\u8001\u5e08\u7684\u7f51\u7ad9 \u91cc\u5077\u6765\u4e86\u5982\u4e0b css\uff0c\u653e\u5728\u4e86 status.css\uff1a . box { border-radius : 2 px ; padding : 4 px 4 px 4 px 4 px ; /* font-family: 'Lato', 'SimHei', 'STHeiti', 'SimHei', 'Serif'; */ font-size : 90 % ; } . box-blue , . badge-primary { background-color : rgba ( 66 , 139 , 202 , 0.5 ); color : #1d4ed8 ; } . box-green , . badge-success { background-color : rgba ( 92 , 184 , 92 , 0.5 ); color : #15803d ; } . box-red , . badge-danger { background-color : rgba ( 217 , 83 , 79 , 0.5 ); color : #b91c1c ; } . box-yellow , . badge-warning { background-color : rgba ( 240 , 173 , 78 , 0.5 ); color : #a16207 ; } . box-gray { background-color : #a0a0a0 ; } \u4f7f\u7528\u65b9\u6cd5\u5982\uff1a < span class = \"box box-blue\" > blue </ span > < span class = \"box box-green\" > green </ span > < span class = \"box box-red\" > red </ span > < span class = \"box box-yellow\" > yellow </ span > < span class = \"box box-gray\" > gray </ span > \u53e6\u5916\uff0c\u5982\u679c\u5728\u6697\u9ed1\u6a21\u5f0f\uff0c\u4e0a\u9762\u7684 CSS \u8bbe\u7f6e\u4f1a\u770b\u4e0d\u6e05\u3002\u4e8e\u662f\u5077\u61d2\uff0c\u5728\u6697\u9ed1\u6a21\u5f0f\u628a\u5b57\u4f53\u5168\u90fd\u6539\u6210\u767d\u8272\uff1b const updateBoxFontColor = e => { var a = localStorage . getItem ( 'data-md-color-scheme' ); if ( a !== \"default\" ) { var elements = document . getElementsByClassName ( 'box' ); for ( var i in elements ) { // alert(elements[i].style.color); elements [ i ]. style . color = \"white\" ; } } } \u5728 extra.js \u91cc\u628a\u8fd9\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u52a0\u5230 (()=>{}) \u90a3\u4e2a\u51fd\u6570\u7684\u6700\u540e\u53bb\uff0c\u8ba9\u5b83\u6bcf\u6b21\u81ea\u52a8\u8dd1\u3002 \u672a\u5b8c\u5f85\u7eed\uff01 Material for MkDocs repo \u21a9 Material for MkDocs \u4e2d\u6587\u6587\u6863 repo \u21a9 https://github.com/timvink/mkdocs-git-revision-date-localized-plugin#setup \u21a9","title":"\u535a\u5ba2\u642d\u5efa\u8bb0\u5f55"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u4e3a\u4ec0\u4e48\u4f7f\u7528-mkdocs-material","text":"\u56e0\u4e3a\u6211\u7684\u7b14\u8bb0\u957f\u5f97\u66f4\u50cf\u4e66\u4e00\u6837\u7684\u4e1c\u897f\u800c\u4e0d\u662f\u6bd4\u8f83\u96f6\u6563\u7684\u535a\u5ba2\uff1b\u770b OIWiki \u4e4b\u7c7b\u7684\u4e1c\u897f\u5c31\u4e00\u76f4\u5f88\u5fc3\u52a8\uff01\uff01","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528 mkdocs-material\uff1f"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u5165\u95e8\u6559\u7a0b","text":"Material for MkDocs 1 \uff1a\u5b98\u65b9\u6587\u6863\uff0c\u662f\u6d0b\u6587\u3002 Material for MkDocs \u4e2d\u6587\u6587\u6863 2 \uff1a\u5b98\u65b9\u6587\u6863\u7684\u7ffb\u8bd1\uff1b\u4f46\u662f\u4ecd\u7136\u5efa\u8bae\u5c3d\u53ef\u80fd\u770b\u4e0a\u9762\u90a3\u4e2a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6709\u4e9b\u4e1c\u897f\u8fc7\u65f6\u4e86QWQ \u53e6\u5916\uff0c\u7531\u4e8e mkdocs \u5bf9\u5e94\u7684\u4ed3\u5e93\u91cc\u80fd\u770b\u5230\u6587\u6863\u7684 md \u6e90\u7801\uff0c\u56e0\u6b64\u5176\u5b9e\u53ef\u4ee5\u5728\u8fd9\u4e24\u4e2a\u6587\u6863\uff0c\u6216\u8005\u5176\u4ed6\u7528 mkdocs \u505a\u7684\u535a\u5ba2\uff08\u4f8b\u5982 OI Wiki , CTF Wiki \u7b49\uff09\u91cc\u9762\u770b\u6709\u54ea\u4e9b\u60f3\u7528\u7684\u5199\u6cd5\uff0c\u7136\u540e\u4ece\u5bf9\u5e94\u7684\u4ed3\u5e93\u91cc\u76f4\u63a5\u62ff\u8fdb\u6765\uff01","title":"\u5165\u95e8\u6559\u7a0b"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u4e3b\u9898\u989c\u8272--\u591c\u95f4\u6a21\u5f0f","text":"Warning \u6211\u5e76\u4e0d\u719f\u6089 HTML/CSS/JS\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u5f88\u591a\u505a\u6cd5\u53ef\u80fd\u6bd4\u8f83\u8822QWQ\uff0c\u5982\u679c\u6709\u597d\u7684\u505a\u6cd5\u8bf7\u52a1\u5fc5\u544a\u8bc9\u6211\uff01 \u662f\u4ece OI Wiki \u6284\u7684\uff01 \u4fee\u6539\u4e3b\u9898\u989c\u8272\u7684\u754c\u9762\u4ee3\u7801\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ### \u65e5\u95f4 / \u591c\u95f4 < div class = \"tx-switch\" > < button data-md-color-scheme = \"default\" >< code > default </ code ></ button > < button data-md-color-scheme = \"slate\" >< code > slate </ code ></ button > </ div > < script > var buttons = document . querySelectorAll ( \"button[data-md-color-scheme]\" ) buttons . forEach ( function ( button ) { button . addEventListener ( \"click\" , function () { var attr = this . getAttribute ( \"data-md-color-scheme\" ) document . body . setAttribute ( \"data-md-color-scheme\" , attr ) localStorage . setItem ( \"data-md-color-scheme\" , attr ); updateScheme (); }) }) </ script > ### \u4e3b\u8272 < div class = \"tx-switch\" > < button class = \"button1\" data-md-color-primary = \"red\" style = \"background-color:red\" > red </ button > < button class = \"button1\" data-md-color-primary = \"pink\" style = \"background-color:pink;color:black\" > pink </ button > < button class = \"button1\" data-md-color-primary = \"purple\" style = \"background-color:purple\" > purple </ button > < button class = \"button1\" data-md-color-primary = \"indigo\" style = \"background-color:indigo\" > indigo </ button > < button class = \"button1\" data-md-color-primary = \"blue\" style = \"background-color:blue\" > blue </ button > < button class = \"button1\" data-md-color-primary = \"cyan\" style = \"background-color:cyan;color:black\" > cyan </ button > < button class = \"button1\" data-md-color-primary = \"teal\" style = \"background-color:teal\" > teal </ button > < button class = \"button1\" data-md-color-primary = \"green\" style = \"background-color:green\" > green </ button > < button class = \"button1\" data-md-color-primary = \"lime\" style = \"background-color:lime;color:black\" > lime </ button > < button class = \"button1\" data-md-color-primary = \"orange\" style = \"background-color:orange;color:black\" > orange </ button > < button class = \"button1\" data-md-color-primary = \"brown\" style = \"background-color:brown;border-radius=3px\" > brown </ button > < button class = \"button1\" data-md-color-primary = \"grey\" style = \"background-color:grey\" > grey </ button > < button class = \"button1\" data-md-color-primary = \"black\" style = \"background-color:black\" > black </ button > < button class = \"button1\" data-md-color-primary = \"white\" style = \"background-color:white;color:black\" > white </ button > </ div > < script > var buttons = document . querySelectorAll ( \"button[data-md-color-primary]\" ) buttons . forEach ( function ( button ) { button . addEventListener ( \"click\" , function () { var attr = this . getAttribute ( \"data-md-color-primary\" ) document . body . setAttribute ( \"data-md-color-primary\" , attr ) localStorage . setItem ( \"data-md-color-primary\" , attr ); }) }) </ script > \u4e24\u6bb5 script \u7ed9\u8fd9\u4e9b\u6309\u94ae\u7ed1\u5b9a\u4e86\u54cd\u5e94\u51fd\u6570\uff0c\u5c06\u5bf9\u5e94\u7684\u989c\u8272\u5b58\u5165 localStorage \u3002 \u5176\u4e2d button1 \u7684 css \u6211\u653e\u5728\u4e86\u4e00\u4e2a\u6587\u4ef6 extra.css \u91cc\uff1a . button1 { color : white ; padding : 1 px 4 px ; text-align : center ; text-decoration : none ; display : inline-block ; font-size : 15 px ; margin : 0 px 2 px ; cursor : pointer ; border-radius : 4 px ; } \u7136\u540e\uff0c\u6211\u4eec\u5728\u4e00\u4e2a\u6587\u4ef6 extra.js \u91cc\u9762\u5305\u542b\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 (() => { var p = localStorage . getItem ( \"data-md-color-primary\" ); if ( p ) { document . body . setAttribute ( 'data-md-color-primary' , p ); } var a = localStorage . getItem ( 'data-md-color-scheme' ); if ( a == null ) { a = \"slate\" ; localStorage . setItem ( \"data-md-color-scheme\" , a ); } document . body . setAttribute ( 'data-md-color-scheme' , a ); })() \u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u4ece localStorage \u91cc\u628a\u5b58\u4e86\u7684\u90a3\u4e9b\u4e1c\u897f\u62ff\u51fa\u6765\uff0c\u7136\u540e\u8bbe\u7f6e\u5230\u6587\u6863\u7684\u5bf9\u5e94\u4f4d\u7f6e\u91cc\u53bb\u3002 \u6211\u4eec\u5728 mkdocs.yml \u91cc\u589e\u52a0\u8fd9\u6837\u7684\u6761\u76ee\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u9875\u9762\u90fd\u4f1a\u5305\u542b\u8fd9\u6bb5 js\uff0c\u4ece\u800c\u6bcf\u4e2a\u9875\u9762\u52a0\u8f7d\u65f6\u90fd\u4f1a\u8fd0\u884c\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fdb\u800c\u7ef4\u6301\u4e3b\u9898\u7684\u8bbe\u7f6e\uff1a extra_javascript : - 'path/extra.js' \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u628a extra.css \u5305\u542b\u8fdb\u6765\uff1a extra_css : - 'path/extra.css'","title":"\u4e3b\u9898\u989c\u8272 / \u591c\u95f4\u6a21\u5f0f"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u8bc4\u8bba\u7cfb\u7edf","text":"\u57fa\u672c\u7684\u6559\u7a0b\u53c2\u8003\u4e86 https://squidfunk.github.io/mkdocs-material/setup/adding-a-comment-system/ \u3002 \u540c\u65f6\uff0c\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u4fdd\u6301\u8bc4\u8bba\u7cfb\u7edf\u7684\u4e3b\u9898\uff08\u65e5\u95f4 / \u591c\u95f4\u6a21\u5f0f\uff09\u548c\u524d\u9762\u8bbe\u7f6e\u7684\u4e00\u81f4\u5462\uff1f\u5728\u524d\u4e00\u8282\u7b2c\u4e00\u6bb5\u7684 md/html \u4ee3\u7801\u7684\u7b2c 15 \u884c\u6709\u4e00\u4e2a updateScheme(); \uff0c\u8fd9\u4e2a\u51fd\u6570\u4e5f\u5728 extra.js \u91cc\uff0c\u7528\u6765\u5728\u66f4\u6539\u4e3b\u9898\u65f6\u901a\u77e5\u8bc4\u8bba\u7cfb\u7edf\u540c\u6b65\uff08\u5176\u5b9e\u8bc4\u8bba\u7cfb\u7edf\u7684 comment.html \u91cc\u6709 /* Register event handlers after documented loaded */ \u7684\u7247\u6bb5\uff0c\u4f46\u662f\u54cd\u5e94\u7684\u548c\u4e0a\u9762\u6284\u7684 OI Wiki \u6539\u7684\u597d\u50cf\u5e76\u4e0d\u5bf9\u5e94\uff0c\u6240\u4ee5\u6211\u6ce8\u91ca\u6389\u4e86QWQ\uff09\uff1a const updateScheme = e => { var giscus = document . querySelector ( \".giscus-frame\" ); var a = localStorage . getItem ( 'data-md-color-scheme' ); var theme = a === \"default\" ? \"light\" : \"dark\" ; alert ( a + \" -> \" + theme ); giscus . contentWindow . postMessage ( { giscus : { setConfig : { theme } } }, \"https://giscus.app\" ) } \u540c\u65f6\uff0c\u6211\u4eec\u5728\u8bc4\u8bba\u7cfb\u7edf\u7684 comment.html \u4e2d\uff0c\u672c\u6765\u4e5f\u6709\u4e00\u6bb5\u6ce8\u91ca\u4e86 /* Set palette on initial load */ \u7684\u4ee3\u7801\uff0c\u6211\u4eec\u4e5f\u5c06\u5176\u6539\u4e3a updateScheme(); \uff01","title":"\u8bc4\u8bba\u7cfb\u7edf"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u89e3\u51b3\u516c\u5f0f\u5e26\u7eb5\u5411\u6eda\u52a8\u6761\u7684\u95ee\u9898","text":"\u524d\u7f6e\u8981\u6c42 \u5728 mkdocs.yml \u91cc\u5f15\u5165\u4e00\u4e2a css \u6587\u4ef6\uff0c\u6bd4\u5982\u53eb extra.css extra_css : - 'path/extra.css' \u5728 extra.css \u91cc\u589e\u52a0\u8fd9\u6837\u7684\u4e1c\u897f\uff1a . md-typeset div . arithmatex { overflow-y : hidden ; }","title":"\u89e3\u51b3\u516c\u5f0f\u5e26\u7eb5\u5411\u6eda\u52a8\u6761\u7684\u95ee\u9898"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#\u663e\u793a\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4","text":"\u5728 mkdocs.yml \u4e2d\u589e\u52a0\u8fd9\u6837\u7684\u5185\u5bb9\uff1a plugins : - git-revision-date-localized : enable_creation_date : true \u8fd9\u4e2a\u63d2\u4ef6\u9700\u8981\u901a\u8fc7 pip3 install mkdocs-git-revision-date-localized-plugin \u6765\u5b89\u88c5\u3002 \u5bf9\u5e94\u5730\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528 Github Action \u4e4b\u7c7b\u7684 CI \u6765\u81ea\u52a8\u90e8\u7f72\u535a\u5ba2\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5728\u5176\u4e2d\u5f15\u5165\u8fd9\u4e2a\u63d2\u4ef6\uff08\u89c1\u7b2c 18 \u884c\u9ad8\u4eae\u5904\uff09\uff1a .github/workflows/autoBuild.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 name : autoBuild on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 with : fetch-depth : 0 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material - run : pip install mkdocs-git-revision-date-localized-plugin - run : mkdocs gh-deploy --force \u540c\u65f6\uff0c\u5982\u679c\u4f7f\u7528\u4e86 CI \u6765\u81ea\u52a8\u90e8\u7f72\u535a\u5ba2\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u8bbe\u7f6e\uff0c\u53c2\u89c1 Note when using build environments \uff1b\u5bf9\u4e8e Github Actions\uff0c\u6211\u4eec\u9700\u8981\u7528\u4e0a\u9762\u4ee3\u7801\u4e2d 11-13 \u884c\u9ad8\u4eae\u5904\u7684 uses \u6765\u4ee3\u66ff\u539f\u5148\u7684 - uses: actions/checkout@v2 \u3002 \u8fd9\u91cc\u7684 enable_creation_date \u4e4b\u7c7b\u7684\u9009\u9879\u53ef\u4ee5\u5728 \u5b98\u65b9\u6587\u6863 \u6216\u8005 \u8fd9\u4e2a\u63d2\u4ef6\u7684\u6587\u6863 \u91cc\u770b\uff0c\u6211\u7528\u7684\u662f\uff1a plugins : - git-revision-date-localized : enable_creation_date : true type : timeago \u6548\u679c\u53c2\u89c1\u672c\u9875\u6700\u4e0b\u9762\uff09\uff09 Tips \u5982\u679c mkdocs.yml \u91cc\u6ca1\u6709 plugins : - search \u90a3\u8981\u8bb0\u5f97\u52a0\u4e0a\uff0c\u56e0\u4e3a MkDocs enables it by default if there is no plugins entry set 3 .","title":"\u663e\u793a\u521b\u5efa\u65f6\u95f4\u548c\u66f4\u65b0\u65f6\u95f4"},{"location":"%E6%9D%82%E9%A1%B9/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#status-\u5c0f\u65b9\u5757","text":"\u6548\u679c\u5c55\u793a\uff1a blue green red yellow gray \uff08\u5077\u61d2\uff0c\u591c\u95f4\u6a21\u5f0f\u4e0b\u5168\u90fd\u5f04\u6210\u767d\u8272\u5b57\u4f53\u4e86\uff09 \u4ece \u848b\u708e\u5ca9\u8001\u5e08\u7684\u7f51\u7ad9 \u91cc\u5077\u6765\u4e86\u5982\u4e0b css\uff0c\u653e\u5728\u4e86 status.css\uff1a . box { border-radius : 2 px ; padding : 4 px 4 px 4 px 4 px ; /* font-family: 'Lato', 'SimHei', 'STHeiti', 'SimHei', 'Serif'; */ font-size : 90 % ; } . box-blue , . badge-primary { background-color : rgba ( 66 , 139 , 202 , 0.5 ); color : #1d4ed8 ; } . box-green , . badge-success { background-color : rgba ( 92 , 184 , 92 , 0.5 ); color : #15803d ; } . box-red , . badge-danger { background-color : rgba ( 217 , 83 , 79 , 0.5 ); color : #b91c1c ; } . box-yellow , . badge-warning { background-color : rgba ( 240 , 173 , 78 , 0.5 ); color : #a16207 ; } . box-gray { background-color : #a0a0a0 ; } \u4f7f\u7528\u65b9\u6cd5\u5982\uff1a < span class = \"box box-blue\" > blue </ span > < span class = \"box box-green\" > green </ span > < span class = \"box box-red\" > red </ span > < span class = \"box box-yellow\" > yellow </ span > < span class = \"box box-gray\" > gray </ span > \u53e6\u5916\uff0c\u5982\u679c\u5728\u6697\u9ed1\u6a21\u5f0f\uff0c\u4e0a\u9762\u7684 CSS \u8bbe\u7f6e\u4f1a\u770b\u4e0d\u6e05\u3002\u4e8e\u662f\u5077\u61d2\uff0c\u5728\u6697\u9ed1\u6a21\u5f0f\u628a\u5b57\u4f53\u5168\u90fd\u6539\u6210\u767d\u8272\uff1b const updateBoxFontColor = e => { var a = localStorage . getItem ( 'data-md-color-scheme' ); if ( a !== \"default\" ) { var elements = document . getElementsByClassName ( 'box' ); for ( var i in elements ) { // alert(elements[i].style.color); elements [ i ]. style . color = \"white\" ; } } } \u5728 extra.js \u91cc\u628a\u8fd9\u4e2a\u51fd\u6570\u7684\u8c03\u7528\u52a0\u5230 (()=>{}) \u90a3\u4e2a\u51fd\u6570\u7684\u6700\u540e\u53bb\uff0c\u8ba9\u5b83\u6bcf\u6b21\u81ea\u52a8\u8dd1\u3002 \u672a\u5b8c\u5f85\u7eed\uff01 Material for MkDocs repo \u21a9 Material for MkDocs \u4e2d\u6587\u6587\u6863 repo \u21a9 https://github.com/timvink/mkdocs-git-revision-date-localized-plugin#setup \u21a9","title":"status \u5c0f\u65b9\u5757\uff01"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/","text":"\u6838\u5fc3\u77e5\u8bc6 \u00b6 Abstract \u5b66\u6821\u8bfe\u7a0b\u91cc\u771f\u6b63\u6709\u7528\u7684\u4f3c\u4e4e\u6ca1\u6709\u51e0\u95e8\u2026\u2026 \u642c\u8fd0\u8fc7\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5c1d\u8bd5\u5c06\u5185\u5bb9\u5206\u5272\uff0c\u800c\u4e0d\u662f\u4ee5\u4e00\u7bc7\u8d85\u7ea7\u8d85\u7ea7\u957f\u7684\u6587\u6863\u7684\u5f62\u5f0f\u5448\u73b0","title":"\u6838\u5fc3\u77e5\u8bc6"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/#\u6838\u5fc3\u77e5\u8bc6","text":"Abstract \u5b66\u6821\u8bfe\u7a0b\u91cc\u771f\u6b63\u6709\u7528\u7684\u4f3c\u4e4e\u6ca1\u6709\u51e0\u95e8\u2026\u2026 \u642c\u8fd0\u8fc7\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5c1d\u8bd5\u5c06\u5185\u5bb9\u5206\u5272\uff0c\u800c\u4e0d\u662f\u4ee5\u4e00\u7bc7\u8d85\u7ea7\u8d85\u7ea7\u957f\u7684\u6587\u6863\u7684\u5f62\u5f0f\u5448\u73b0","title":"\u6838\u5fc3\u77e5\u8bc6"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/","text":"6 Synchronization Tools \u00b6 6.1 \u4e3a\u4ec0\u4e48\u9700\u8981\u540c\u6b65 \u00b6 \u6211\u4eec\u8bf4 Cooperating Process \u662f\u53ef\u4ee5\u5f71\u54cd\u7cfb\u7edf\u4e2d\u5176\u4ed6\u8fd0\u884c\u8fdb\u7a0b\u6216\u88ab\u5176\u4ed6\u8fdb\u7a0b\u5f71\u54cd\u7684\u8fdb\u7a0b\u3002 Cooperating processes \u4f1a\u5171\u540c\u4f7f\u7528\u4e00\u4e9b\u6570\u636e\uff0c\u53ef\u80fd\u662f\u76f4\u63a5\u4f7f\u7528\u540c\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\uff08\u4ee3\u7801+\u6570\u636e\uff09\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5171\u4eab\u7684\u5185\u5b58\u6216\u4fe1\u606f\u4f20\u9012\u6765\u5171\u7528\u4e00\u4e9b\u6570\u636e\u3002\u5bf9\u6570\u636e\u7684\u540c\u65f6\u8bbf\u95ee (concurrent access) \u53ef\u80fd\u4f1a\u5bfc\u81f4 data inconsistency\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u4e00\u81f4\u6027\u9700\u8981 cooperating processes \u6709\u5e8f\u7684\u8fd0\u884c\u3002 Bounded-buffer Problem \u7ed9\u5b9a\u4e24\u4e2a\u8fdb\u7a0b\uff1aproducer \u548c consumer\uff0c\u5b83\u4eec\u5171\u7528\u5927\u5c0f\u4e3a \\(n\\) \u7684 buffer\u3002Producer \u751f\u4ea7\u6570\u636e\u653e\u5165 buffer\uff0cconsumer \u4ece buffer \u53d6\u51fa\u6570\u636e\u4ece\u800c\u4f7f\u7528\u4e4b\u3002 \u8be5\u95ee\u9898\u9700\u8981\u4fdd\u8bc1\uff1aproducer \u4e0d\u5e94\u5f53\u5728 buffer \u6ee1\u65f6\u653e\u5165\u6570\u636e\uff0cconsumer \u4e5f\u4e0d\u5e94\u5f53\u5728 buffer \u7a7a\u65f6\u53d6\u51fa\u6570\u636e\u3002 \u6211\u4eec\u53ef\u80fd\u60f3\u8981\u50cf\u8fd9\u6837\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* Producer Process */ while ( true ) { /* produce an item in next_produced */ while ( count == BUFFER_SIZE ) ; /* do nothing */ buffer [ in ] = next_produced ; in = ( in + 1 ) % BUFFER_SIZE ; count ++ ; } /* Consumer Process */ while ( true ) { while ( count == 0 ) ; /* do nothing */ next_consumed = buffer [ out ]; out = ( out + 1 ) % BUFFER_SIZE ; count -- ; /* consume the item in next_consumed */ } \u4f46\u662f\uff0c count \u7684\u503c\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u8fd0\u884c\u987a\u5e8f\u662f\uff1a \u51fa\u73b0\u4e0a\u4f8b\u4e2d\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5141\u8bb8\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u63a7\u53d8\u91cf count \u3002\u7c7b\u4f3c\u8fd9\u6837\u7684\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u63a7\u540c\u4e00\u4e2a\u6570\u636e\uff0c\u56e0\u800c\u7ed3\u679c\u53d6\u51b3\u4e8e\u6bcf\u4e00\u79cd\u64cd\u63a7\u7684\u51fa\u73b0\u987a\u5e8f\u7684\u60c5\u5f62\uff0c\u79f0\u4e3a race condition \u3002\u4e3a\u4e86\u9632\u6b62 race condition\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u64cd\u63a7\u67d0\u4e2a\u53d8\u91cf\u3002 Race condition \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5e38\u89c1\u7684\u3002Kernel code \u4e2d\u4e5f\u5305\u542b race condition \u7684\u53ef\u80fd\u6027\u3002 Kernel \u4e2d\u4e5f\u5b58\u5728 race condition \u7684\u53ef\u80fd \u4e24\u4e2a\u8fdb\u7a0b P0 \u548c P1 \u540c\u65f6 fork() \u65f6\uff0c\u5982\u679c\u4e0d\u52a0\u9650\u5236\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u524d\u4f8b\u7684\u60c5\u51b5\uff0c\u5373\u5728\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u628a\u5f53\u524d\u7684 next_avaliable_pid \u5206\u914d\u7ed9\u4ed6\u7684 child \u540e\uff0c\u5728\u6ca1\u6765\u5f97\u53ca\u66f4\u65b0 next_avaliable_pid \u524d\uff0c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u4e86 next_avaliable_pid \u6765\u7ed9 child \u5206\u914d PID\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u4e0d\u540c\u7684\u7ebf\u7a0b\u4f7f\u7528\u540c\u4e00\u4e2a PID \u7684\u60c5\u51b5\u3002 \u56e0\u6b64\uff0c\u4ece\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u672c\u8eab\u6765\u8bf4\uff0c\u907f\u514d race condition \u5e26\u6765\u9519\u8bef\u7684\u7ed3\u679c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\u5728\u4f7f\u7528\u591a\u8fdb\u7a0b\u65f6\u4e5f\u5e94\u5f53\u5145\u5206\u8003\u8651\u662f\u5426\u4f1a\u5e26\u6765\u95ee\u9898\u3002 6.2 \u95ee\u9898\u5efa\u6a21: The Critical-Section Problem \u00b6 \u200b\u8003\u8651\u4e00\u4e2a\u6709 n \u4e2a\u8fdb\u7a0b\u7684\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u90fd\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff0c\u5b83\u53ef\u80fd\u4f1a\u4fee\u6539\u4e00\u4e9b\u4e0e\u5176\u4ed6\u81f3\u5c11\u4e00\u4e2a\u8fdb\u7a0b\u516c\u7528\u7684\u6570\u636e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u79f0\u4e3a critical section \u3002\u8fd9\u4e2a\u7cfb\u7edf\u9700\u8981\u6ee1\u8db3\u7684\u91cd\u8981\u6027\u8d28\u662f\uff1a\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u5b83\u7684 critical section \u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u8fdb\u5165\u5b83\u7684 critical section\u3002 \u200b\u6211\u4eec\u5c06\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a Critical-section problem \uff0c\u4e5f\u5c31\u662f\u8981\u8bbe\u8ba1\u4e00\u79cd\u8fbe\u6210\u8fd9\u4e00\u6027\u8d28\u7684\u65b9\u6cd5\uff1b\u6216\u8005\u8bf4\uff0c\u8bbe\u8ba1\u4e00\u79cd\u80fd\u8ba9\u5404\u4e2a\u8fdb\u7a0b \u540c\u6b65 (synchronize) \u5b83\u4eec\u7684\u6d3b\u52a8\uff0c\u4ece\u800c\u5b89\u5168\u5730\u5171\u4eab\u6570\u636e\u7684\u534f\u8bae\u3002 Tips \u300c\u200b\u540c\u6b65\u300d\u7684\u6838\u5fc3\u610f\u4e49\u662f\uff0c\u89c4\u5b9a\u8fdb\u7a0b\u6240\u505a\u7684\u5de5\u4f5c\u4e4b\u95f4\u7684\u987a\u5e8f\u6216\u8005\u5148\u5e8f\u5173\u7cfb\uff0c\u4ece\u800c\u9632\u6b62\u4e00\u4e9b\u975e\u6cd5\u60c5\u51b5\u7684\u53d1\u751f\u3002 \u200b\u6bcf\u4e2a\u8fdb\u7a0b\u5fc5\u987b\u5728 entry section \u4e2d\u7533\u8bf7\u8fdb\u5165 critical section \u7684\u8bb8\u53ef\uff1b\u5728 critical section \u8fd0\u884c\u7ed3\u675f\u540e\u8fdb\u5165 exit section \uff0c\u5728\u8fd9\u91cc\u8bb8\u53ef\u88ab\u91ca\u653e\u3002\u5176\u4ed6\u4ee3\u7801\u79f0\u4e3a remainder section \u3002 \u200bCritical-section problem \u7684\u89e3\u51b3\u65b9\u6cd5\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\uff1a Mutual exclusion - \u6ca1\u6709\u4e24\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u5728\u8fd0\u884c critical section\u3002 Progress - \u7cfb\u7edf\u6574\u4f53\u4e0a\u662f\u5728\u8fd0\u884c\u7684\uff0c\u5373\u8981\u4e48\u6709\u8fdb\u7a0b\u5728\u8fd0\u884c\u5b83\u7684 critical section\uff0c\u8981\u4e48\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u60f3\u8981\uff08\u5c06\u8981\uff0c\u5373\u5728\u8fd0\u884c critical section \u4e4b\u524d\u7684 section\uff09\u8fdb\u5165 critical section\uff0c\u8981\u4e48\u5728\u6709\u9650\u65f6\u95f4\u5185\u5c06\u6709\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u9009\u4e2d\u8fdb\u5165\u5b83\u7684 critical section\u3002 Bounded waiting - \u4efb\u4f55\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165 critical section \u7684\u65f6\u95f4\u662f\u6709\u9650\u7684\u3002\u5373\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u63d0\u51fa\u4e00\u4e2a\u8fdb\u5165 critical section \u7684\u8bf7\u6c42\u540e\uff0c\u53ea\u6709\u6709\u9650\u4e2a\uff08\u6b21\uff09\u8fdb\u7a0b\u4f1a\u5728\u5b83\u4e4b\u524d\u8fdb\u5165 critical section\u3002 Kernel \u4e2d\u7684 CS Problem \u00b6 \u200b\u5bf9\u4e8e\u5355\u6838\u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 critical section \u4e2d\u7981\u6b62\u4e2d\u65ad\uff08\u5373\uff0c\u5728 entry section \u4e2d disable\uff0c\u5728 exit section \u4e2d enable\uff09\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\uff08\u867d\u7136\u53ef\u80fd\u662f\u5371\u9669\u7684\uff09\u3002\u200b\u4f46\u662f\u5bf9\u4e8e\u591a\u6838\u7cfb\u7edf\uff0c\u4e2d\u65ad\u7981\u6b62\u7684\u6d88\u606f\u8981\u4f20\u5230\u6240\u6709\u5904\u7406\u5668\uff0c\u6d88\u606f\u4f20\u9012\u4f1a\u5ef6\u8fdf\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4f1a\u964d\u4f4e\u6548\u7387\uff1b\u540c\u65f6\u4e5f\u4f1a\u5f71\u54cd\u65f6\u949f\u4e2d\u65ad\u3002 \u200b\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 kernel \u7684\u8bbe\u8ba1\u5b9e\u73b0\u4e86 critical section\u3002Kernel \u7684\u5b9e\u73b0\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f \u62a2\u5360\u5f0f\u5185\u6838 preemptive kernel \u548c \u975e\u62a2\u5360\u5f0f\u5185\u6838 nonpreemptive kernel \uff0c\u5176\u533a\u522b\u662f\u662f\u5426\u5141\u8bb8\u5904\u4e8e kernel mode \u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 \u200b\uff08\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u975e\u62a2\u5360\u5f0f\u5185\u6838\u7684\u5b9e\u73b0\u662f\u4fdd\u8bc1\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u5728 kernel \u91cc\u8dd1 1 2 \u2014\u2014\u8fd9\u79cd\u5b9e\u73b0\u548c\u4e0a\u8ff0\u6982\u5ff5\u7684\u533a\u522b\u662f\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u5904\u7406\u5668\uff1b\u5982\u679c\u6309\u4e0a\u8ff0\u7684\u6982\u5ff5\u6765\u8bf4\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6ca1\u6709\u591a\u4e2a CPU \u540c\u65f6\u8dd1\u5728 kernel \u91cc\u3002\uff09\u56e0\u6b64\uff0c\u975e\u62a2\u5360\u5f0f\u5185\u6838\u4e0d\u4f1a\u5bfc\u81f4 kernel mode \u7684 race condition\uff0c\u56e0\u4e3a\u5728\u4efb\u4e00\u65f6\u95f4\u70b9\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u5728 kernel \u91cc\u8dd1\uff0c\u6240\u4ee5 kernel \u7528\u5230\u7684\u5404\u79cd\u6570\u636e\u548c\u8d44\u6e90\u4e5f\u5c31\u53ea\u6709\u5b83\u4e00\u4e2a\u4eba\u7528\u4e86\uff01 \u200b\u62a2\u5360\u5f0f\u5185\u6838\u76f8\u5bf9\u800c\u8a00\u66f4\u96be\u8bbe\u8ba1\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u80fd\u6709\u66f4\u5feb\u7684\u54cd\u5e94\u3002\u6211\u4eec\u5728\u540e\u9762\u82e5\u5e72\u8282\u6765\u8ba8\u8bba\u8bbe\u8ba1\u62a2\u5360\u5f0f\u5185\u6838\uff0c\u6216\u8005\u8bf4\u8bbe\u8ba1\u51fa\u89e3\u51b3\u4e86 critical-section problem \u7684\u7a0b\u5e8f\u7684\u65b9\u6848\u3002 6.3 Peterson's Solution \u00b6 \u200bPeterson's solution \u57fa\u4e8e\u4e00\u5b9a\u7684\u5047\u8bbe\u89e3\u51b3\u4e86\u4e24\u4e2a task \u7684 synchornization\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int turn ; // Who is allowed to enter boolean flag [ 2 ]; // Ready to enter its CS void foo () { while ( true ) { flag [ i ] = true ; // Mark self ready turn = 1 - i ; // Assert that if the other process wishes to // enter its CS, it can do so. while ( flag [ 1 - i ] && turn == 1 - i ); // Wait /* critical section */ flag [ i ] = false ; // Set ready to false /* remainder section */ } } \u5176\u4e2d\uff0c i \u662f 0 \u6216 1\uff0c\u8868\u793a\u7b2c i \u4e2a\u8fdb\u7a0b\uff1b turn \u662f\u5f53\u524d\u6709\u6743\u8fdb\u5165 critical section \u7684\u8fdb\u7a0b\uff080 \u6216 1\uff09\uff1b flag[i] \u662f\u7b2c i \u4e2a\u8fdb\u7a0b\u662f\u5426\u51c6\u5907\u597d\u8fdb\u5165 critical section\uff0c\u521d\u59cb\u503c\u5747\u4e3a FALSE\u3002 To enter the critical section, process Pi first sets flag[i] to be true and then sets turn to the value 1-i (the other process), thereby asserting that if the other process wishes to enter the critical section, it can do so. If both processes try to enter at the same time, turn will be set to both 0 and 1 at roughly the same time. Only one of these assignments will last; the other will occur but will be overwritten immediately. The eventual value of turn determines which of the two processes is allowed to enter its critical section first. \u6027\u8d28\u8bc1\u660e \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u6613\u7684\u5206\u7c7b\u8ba8\u8bba\u8bc1\u660e Peterson's Solution \u6ee1\u8db3 6.2 \u4e2d\u63d0\u5230\u7684\u4e09\u4e2a\u6027\u8d28\uff1aMutual exclusion, process and bounded waiting\u3002 Reordering \u00b6 \u200b\u4f46\u5b9e\u9645\u4e0a\uff0cPeterson's solution \u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0a\u4e0d\u4e00\u5b9a\u9002\u7528\uff0c\u56e0\u4e3a\u73b0\u4ee3\u7684\u5904\u7406\u5668\u548c\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u4f1a\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\u800c\u5bf9\u4e00\u4e9b\u8bfb\u5199\u64cd\u4f5c\u8fdb\u884c\u91cd\u6392\u3002\u5728\u4f18\u5316\u4e2d\uff0c\u5904\u7406\u5668\u6216\u7f16\u8bd1\u5668\u4f1a\u8003\u8651\u5176\u91cd\u6392\u7684\u5408\u7406\u6027\uff0c\u5373\u4fdd\u8bc1\u4e86\u5728\u5355\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u7ed3\u679c\u503c\u662f\u7a33\u5b9a\u4e14\u6b63\u786e\u7684\u3002\u4f46\u662f\u8fd9\u4e0d\u80fd\u4fdd\u8bc1\u5176\u5728\u591a\u7ebf\u7a0b\u5171\u7528\u6570\u636e\u65f6\u7684\u6b63\u786e\u6027\uff0c\u91cd\u6392\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u6216\u8005\u4e0d\u671f\u671b\u7684\u8f93\u51fa\u3002\u4f8b\u5982\u5982\u679c\u7f16\u8bd1\u5668\u5c06\u5bf9 flag[i] \u548c turn \u8d4b\u503c\u7684\u987a\u5e8f\u4ea4\u6362\uff1a \u200bNote that reordering of memory accesses can happen even on processors that don't reorder instructions 3 . Memory Barrier \u00b6 \u200b\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u7f16\u8bd1\u5668\u548c\u5904\u7406\u5668\u4f1a\u5bf9\u4ee3\u7801\u7684\u7ed3\u6784\u8fdb\u884c reorder\uff0c\u4ee5\u8fbe\u5230\u6700\u4f73\u6548\u679c\u3002 \u91cd\u6392\u7684\u4f8b\u5b50 \u5bf9 a2 \u548c b1 \u8fdb\u884c\u91cd\u6392\uff0c\u4f7f\u5f97\u4e0d\u9700\u53cd\u590d\u8bfb\u53d6\u4ea4\u66ff x \u548c y \u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int x = 1 ; int y = 2 ; int a1 = x * 1 ; int b1 = y * 1 ; int a2 = x * 2 ; int b2 = y * 2 ; // \u53ef\u80fd\u4f1a\u4f18\u5316\u4e3a\uff1a int x = 1 ; int y = 2 ; int a1 = x * 1 ; int a2 = x * 2 ; int b1 = y * 1 ; // a2, b1 \u7684\u987a\u5e8f\u8fdb\u884c\u4e86\u91cd\u6392 int b2 = y * 2 ; \u200b\u91cd\u6392\u53ef\u80fd\u4f7f\u5f97\u5728\u591a\u6838\u8fd0\u884c\u65f6\u51fa\u73b0\u4e0e\u671f\u671b\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165 Memory Barrier \uff1a\u5b83\u7528\u6765\u4fdd\u8bc1\u5176\u4e4b\u524d\u7684\u5185\u5b58\u8bbf\u95ee\u5148\u4e8e\u5176\u540e\u7684\u5b8c\u6210\u3002\u5373\uff0c\u6211\u4eec\u4fdd\u8bc1\u5728\u6b64\u524d\u5bf9\u5185\u5b58\u7684\u6539\u53d8\u5bf9\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u7684\u8fdb\u7a0b\u662f\u53ef\u89c1\u7684\u3002 Memory Model \u00b6 \u200b\u53e6\u5916\uff0c\u5728\u73b0\u4ee3\u7684\u4f53\u7cfb\u7ed3\u6784\u4e0a\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u5199\u4e86\u5bf9\u5e94\u7684\u53d8\u91cf\u540e\u6709\u53ef\u80fd\u4e0d\u4f1a\u7acb\u523b\u5199\u56de\u5185\u5b58\uff0c\u8fd9\u4e5f\u6709\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\uff1a How a computer architecture determines what memory guarantees it will provide to an application program is known as its memory model . In general, a memory model falls into one of two categories: Strongly ordered , where a memory modification on one processor is immediately visible to all other processors. Weakly ordered , where modifications to memory on one processor may not be immediately visible to other processors. 6.4 \u786c\u4ef6\u6307\u4ee4 \u00b6 \u200b\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u786c\u4ef6\u6307\u4ee4\uff0c\u7528\u4e8e\u68c0\u6d4b\u548c\u4fee\u6539 word \u7684\u5185\u5bb9\uff0c\u6216\u8005\u7528\u4e8e atomically \uff08uniterruptably\uff0c\u4e0d\u53ef\u88ab\u6253\u65ad\u5730\uff09 \u4ea4\u6362\u4e24\u4e2a word\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u8ba8\u8bba\u7279\u5b9a\u673a\u5668\u7684\u7279\u5b9a\u6307\u4ee4\uff0c\u800c\u662f\u901a\u8fc7\u6307\u4ee4 test_and_set() \u548c compare_and_swap() \u62bd\u8c61\u4e86\u89e3\u8fd9\u4e9b\u6307\u4ee4\u80cc\u540e\u7684\u4e3b\u8981\u6982\u5ff5\u3002 6.4.1 test_and_set \u00b6 \u6307\u4ee4 test_and_set() \u7684\u529f\u80fd\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u6765\u5b9a\u4e49\uff1a 1 2 3 4 5 bool test_and_set ( bool * target ) { bool rv = * target ; * target = true ; return rv ; } \u4e0a\u8ff0\u7684\u300c\u5b9a\u4e49\u300d\u53ea\u8bf4\u660e\u4e86\u8fd9\u4e2a\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u4e00\u6307\u4ee4\u7684\u91cd\u8981\u7279\u5f81\u662f\uff0c \u5b83\u7684\u6267\u884c\u662f atomic \u7684 \u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u652f\u6301\u8fd9\u4e2a\u6307\u4ee4\u7684\u673a\u5668\u4e0a\u5b9e\u73b0 mutual exclusive\uff1a\u5b9a\u4e49\u4e00\u4e2a bool \u53d8\u91cf lock \uff0c\u521d\u59cb\u5316\u4e3a false\u3002\u8fdb\u7a0b\u7684\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 while ( true ) { /* Entry Section */ while ( test_and_set ( & lock )) ; /* do nothing */ /* Critical Section */ /* Exit Section */ lock = false ; /* Remainder Section */ } \u53ef\u89c1\uff0c\u5982\u679c lock \u5728 Entry Section \u65f6\u4e3a true\uff0c\u90a3\u4e48 test_and_set(&lock) \u5c06\u8fd4\u56de true\uff0c\u56e0\u6b64\u4f1a\u59cb\u7ec8\u5728 while \u5faa\u73af\u4e2d\u8be2\u95ee\u3002\u76f4\u5230\u67d0\u4e2a\u65f6\u523b lock \u4e3a false\uff0c\u90a3\u4e48 test_and_set(&lock) \u5c06\u8fd4\u56de false \u540c\u65f6\u5c06 lock \u7f6e\u4e3a true\uff0c\u8fdb\u7a0b\u8fdb\u5165 Critical Section\uff0c\u540c\u65f6\u4fdd\u8bc1\u5176\u4ed6\u8fdb\u7a0b\u65e0\u6cd5\u8fdb\u5165 Critical Section\u3002\u5f53\u6301\u9501\u7684\u8fdb\u7a0b\u5b8c\u6210 Critical Section \u7684\u8fd0\u884c\uff0c\u5b83\u5728 Exit Section \u4e2d\u91ca\u653e lock \uff0c\u4ece\u800c\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165 Critical Section\u3002 \u800c\u5982\u679c\u67d0\u4e2a\u65f6\u523b lock \u4e3a false\uff0c\u800c\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u51e0\u4e4e\u540c\u65f6\u8c03\u7528\u4e86 test_and_set(&lock) \u3002\u4f46\u7531\u4e8e\u5b83\u662f atomic \u7684\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u8fd4\u56de false\u3002 \u200b\u4f46\u662f\uff0c\u5982\u4e0a\u6240\u793a\u7684\u63a7\u5236\u4e0d\u80fd\u6ee1\u8db3 bounded waiting \u6761\u4ef6\uff1a \u200b\u6211\u4eec\u53ef\u4ee5\u4f5c\u5982\u4e0b\u66f4\u6539\u4ee5\u6ee1\u8db3 bounded waiting\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( true ) { /* Entry Section */ waiting [ i ] = true ; while ( waiting [ i ] && test_and_set ( & lock )) ; /* do nothing */ waiting [ i ] = false ; /* Critical Section */ /* Exit Section */ j = ( i + 1 ) % n ; while (( j != i ) && ! waiting [ j ])) j = ( j + 1 ) % n ; if ( j == i ) lock = false ; else waiting [ j ] = false ; /* Remainder Section */ } \u6211\u4eec\u5f15\u5165\u4e86 bool \u6570\u7ec4 waiting[] \u3002\u5728 Entry Section \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u7f6e waiting[i] \u4e3a true\uff1b\u5f53 waiting[i] \u6216\u8005 lock \u4e2d\u4efb\u610f\u4e00\u4e2a\u88ab\u91ca\u653e\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u5165 Critical Section\u3002\u521d\u59cb\u65f6\uff0c lock \u4e3a false\uff0c\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165 CS \u7684\u8fdb\u7a0b\u53ef\u4ee5\u83b7\u8bb8\u8fd0\u884c\u3002\u5728 Exit Section \u4e2d\uff0c\u8fdb\u7a0b\u4ece\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\uff0c\u904d\u5386\u4e00\u904d\u6240\u6709\u8fdb\u7a0b\uff0c\u53d1\u73b0\u6b63\u5728\u7b49\u5f85\u7684\u8fdb\u7a0b\u65f6\u91ca\u653e\u5b83\u7684 waiting[j] \uff0c\u4f7f\u5176\u83b7\u8bb8\u8fdb\u5165 CS\uff0c\u5f53\u524d\u8fdb\u7a0b\u7ee7\u7eed Remainder Section \u7684\u8fd0\u884c\uff1b\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u5728\u7b49\u5f85\uff0c\u90a3\u4e48\u5b83\u91ca\u653e lock \uff0c\u4f7f\u5f97\u4e4b\u540e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165 CS \u7684\u8fdb\u7a0b\u53ef\u4ee5\u76f4\u63a5\u83b7\u8bb8\u3002 \u8fd9\u6837\u7684\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u81f3\u591a\u7b49\u5f85 n-1 \u4e2a\u8fdb\u7a0b\u5728\u5176\u524d\u9762\u8fdb\u5165 CS\uff0c\u6ee1\u8db3\u4e86 bounded waiting \u6761\u4ef6\u3002 6.4.2 compare_and_swap \u00b6 \u6307\u4ee4 compare_and_swap() \u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a 1 2 3 4 5 6 int compare_and_swap ( int * value , int expected , int new_value ) { int temp = * value ; if ( * value == expected ) * value = new_value ; return temp ; } \u540c\u6837\uff0c compare_and_swap() \u7684\u6267\u884c\u662f atomic \u7684\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf lock \uff0c\u521d\u59cb\u503c\u8bbe\u4e3a 0\u3002\u8fdb\u7a0b\u7684\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 while ( true ) { /* Entry Section */ while ( compare_and_swap ( & lock , 0 , 1 ) != 0 ) ; /* do nothing */ /* Critical Section */ /* Exit Section */ lock = 0 ; /* Remainder Section */ } \u53ef\u89c1\uff0c compare_and_swap() \u548c test_and_set() \u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\u4e0a\u4f8b compare_and_swap() \u7684\u4f7f\u7528\u65b9\u6cd5\u540c\u6837\u65e0\u6cd5\u4fdd\u8bc1 bounded waiting\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e test_and_set() \u540c\u6837\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002 6.5 Atomic Variables \u00b6 \u200b\u5982\u6211\u4eec\u5148\u524d\u6240\u8bf4\uff0c\u4e4b\u524d\u4ecb\u7ecd\u7684\u6307\u4ee4\u5e38\u88ab\u7528\u6765\u4f5c\u4e3a\u540c\u6b65\u5de5\u5177\u7684\u7ec4\u6210\u90e8\u5206\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 compare_and_swap() \u6307\u4ee4\u6765\u5b9e\u73b0\u4e00\u4e9b\u5de5\u5177\u3002\u5176\u4e2d\u4e00\u4e2a\u5de5\u5177\u5c31\u662f Atomic Variable \u3002 \u200b\u4e00\u4e2a\u53d8\u91cf\u5728\u66f4\u65b0\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a race condition\uff0c\u800c Atomic Variable \u53ef\u4ee5\u4e3a\u6570\u636e\u63d0\u4f9b atomic updates\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u53ef\u6253\u65ad\u7684 increment(&count) ; \u6307\u4ee4\u6765\u4ee3\u66ff\u53ef\u88ab\u6253\u65ad\u7684 count++ \u6307\u4ee4\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u8282\u5f00\u5934\u7684 Bounded-buffer Problem\uff1a 1 2 3 4 5 6 void increment ( atomic_int * v ) { int temp ; do { temp = * v ; } while ( temp != compare_and_swap ( v , temp , temp + 1 )); } \u6ce8\u610f\u5230\uff0c\u7a0b\u5e8f\u5faa\u73af\u5c1d\u8bd5\u5c06 v \u8d4b\u503c\u4e3a temp+1 \uff0c\u5f53\u8d4b\u503c\u6210\u529f\u65f6\u8fd4\u56de\u3002\u7531\u4e8e CAS \u6307\u4ee4\u662f atomic \u7684\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u6253\u65ad\uff1b\u5728\u7a0b\u5e8f\u5176\u4ed6\u8fd0\u884c\u8fc7\u7a0b\u4e2d v \u7684\u503c\u90fd\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c buffer \u6709\u4e24\u4e2a consumer \u5728\u540c\u65f6\u7b49\u5f85\u8bfb\u53d6\uff0c\u90a3\u4e48\u5f53 count \u7531 0 \u53d8\u6210 1 \u7684\u65f6\u5019\u4e24\u4e2a consumer \u53ef\u80fd\u4f1a\u540c\u65f6\u8fdb\u5165\u6765\u8bfb\u53d6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u53ea\u6709 1 \u4e2a\u503c\u5728 buffer \u4e2d\u3002\u5373\uff0cAtomic Variable \u5e76\u4e0d\u80fd\u89e3\u51b3\u6240\u6709 race condition\uff0c\u56e0\u4e3a\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u4ec5\u662f\u53d8\u91cf\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u7684 race condition\u3002 6.6 Mutex \u00b6 \u200b\u6211\u4eec\u5c1d\u8bd5\u8bbe\u8ba1\u8f6f\u4ef6\u5de5\u5177\u6765\u89e3\u51b3 CS problem\u3002\u6211\u4eec\u8ba8\u8bba Mutex (MUTual EXclusion) Lock \u7684\u5b9e\u73b0\uff0c\u5b83\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u6700\u7b80\u5355\u7684 synchronization tool\u3002 \u200b\u6211\u4eec\u8003\u8651\u8ba9\u8fdb\u7a0b\u5728 Entry Section \u7533\u8bf7 acquire() \u4e00\u4e2a\u9501\uff0c\u7136\u540e\u5728 Exit Section release() \u4e00\u4e2a\u9501\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u9501\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\u6765\u8868\u793a\u5b83\u662f\u5426 avaliable\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 while ( true ) { acquire (); /* critical section */ release (); /* remainder section */ } /* ------- */ void acquire () { while ( ! available ) ; /* busy waiting */ avaliable = false ; } void release () { avaliable = true ; } \u6211\u4eec\u9700\u8981\u4fdd\u8bc1 acquire() \u548c release() \u662f atomic \u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 test_and_set() \u548c compare_and_swap() \u6765\u5b9e\u73b0\uff1a void acquire () { while ( compare_and_swap ( & available , 1 , 0 ) != 1 ) ; /* busy waiting */ } void release () { available = true ; } \u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u7684\u7f3a\u70b9\u662f\uff0c\u5b83\u9700\u8981 busy waiting \uff0c\u5373\u5f53\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5728\u8bf7\u6c42\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5728 acquire() \u4e2d\u6301\u7eed\u7b49\u5f85\uff0c \u4f8b\u5982\u5f53\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u4e00\u4e2a CPU \u65f6\uff1a T0 acquires lock -> INTERRUPT-> T1 runs, spin, spin spin \u2026 (till time's out) -> INTERRUPT-> T0 runs -> INTERRUPT->T1 runs, spin, spin spin \u2026 -> INTERRUPT-> T0 runs, release locks -> INTERRUPT -> T1 runs, enters CS \u53ef\u4ee5\u53d1\u73b0\uff0cT1 \u5728\u5b83\u7684 CPU \u65f6\u95f4\u5185\u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\uff0c\u76f4\u5230 T0 \u91ca\u653e\u9501\u3002\u56e0\u6b64\u8fd9\u79cd\u9501\u4e5f\u6210\u4e3a spinlock \u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u5982\u679c\u6709 N \u4e2a\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u4e00\u4e2a CPU\uff0c\u90a3\u4e48\u5c06\u6709\u5927\u7ea6 \\(\\frac{N-1}{N}\\) \u7684\u65f6\u95f4\u88ab\u6d6a\u8d39\u3002\u5982\u679c\u6709\u8fdb\u7a0b\u5728\u4f01\u56fe acquire \u4e00\u4e2a\u9501\u65f6\u88ab\u963b\u6b62\uff0c\u6211\u4eec\u79f0\u5b83\u662f contended\uff08\u88ab\u4e89\u593a\uff09 \uff1b\u53cd\u4e4b\u6211\u4eec\u79f0\u5b83 uncontended \u3002\u5982\u6211\u4eec\u6240\u8ff0\uff0chighly contended locks \u4f1a\u964d\u4f4e\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u7684\u6574\u4f53\u6027\u80fd\u3002 \u200b\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u7684\u8bbe\u8ba1\uff0c\u5176\u4e2d yield() \u4f1a\u4f7f\u7a0b\u5e8f\u4ece running \u8f6c\u4e3a ready\uff0c\u4ece\u800c\u8ba9\u51fa CPU\uff1a void acquire () { while ( compare_and_swap ( & avaliable , 1 , 0 ) != 1 ) yield (); } void release () { avaliable = true ; } \u200b\u4e0d\u8fc7\uff0c\u5982\u679c\u6240\u9700\u7684\u7b49\u5f85\u65f6\u95f4\u4e00\u822c\u5c0f\u4e8e context switch \u6240\u9700\u7684\u65f6\u95f4\u7684\u8bdd\uff0c\u7528 spinlock \u53ef\u80fd\u662f\u66f4\u597d\u7684 4 \u3002 6.7 Semaphores \u00b6 \u6211\u4eec\u7ed9\u51fa\u4e00\u79cd\u66f4\u5389\u5bb3\u7684 synchronization tool\uff0c\u79f0\u4e3a semaphore\u3002\u4e00\u4e2a semaphore S \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5b83\u9664\u4e86\u521d\u59cb\u5316\u5916\u53ea\u80fd\u901a\u8fc7\u4e24\u4e2a atomic \u64cd\u4f5c wait() \u548c signal() \uff08\u539f\u79f0\u4e3a P() \u548c V() \uff09\u6765\u8bbf\u95ee\uff1a 1 2 3 4 5 6 7 8 9 void wait ( S ) { while ( S <= 0 ) ; /* busy waiting */ S -- ; } void signal ( S ) { S ++ ; } Tips \u9700\u8981\u91cd\u7533\u7684\u662f\uff0c wait() \u548c signal() \u7684\u5b9e\u73b0\u4e5f\u5e94\u662f atomic \u7684\u3002 \u6709 2 \u79cd semaphore\uff1a Counting semaphore - S \u7684\u503c\u4e0d\u53d7\u9650\u5236\uff1b Binary semaphore - S \u7684\u503c\u53ea\u80fd\u662f 0 \u6216 1\u3002\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\u3002 Example \u4f46\u662f\uff0c\u5982\u540c\u524d\u9762\u6211\u4eec\u6240\u8bf4\uff0csemaphore \u4e5f\u5177\u6709 busy waiting \u7684\u95ee\u9898\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a semaphore \u5f15\u5165 waiting queue \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 typedef struct { int value ; struct list_head * waiting_queue ; } semaphore ; wait ( semaphore * S ) { S -> value -- ; if ( S -> value < 0 ) { add this process to S -> list ; block (); } } signal ( semaphore * S ) { S -> value ++ ; if ( S -> value <= 0 ) { remove a process P from S -> list ; wakeup ( P ); } } \u64cd\u4f5c block() \u6302\u8d77\u8c03\u7528\u5b83\u7684\u8fdb\u7a0b\uff0c\u64cd\u4f5c wakeup(P) \u91cd\u65b0\u542f\u52a8 P \u7684\u6267\u884c\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e3a\u57fa\u672c\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u7684\u3002 The list of waiting processes can be easily implemented by a link field in each process control block (PCB). Each semaphore contains an integer value and a pointer to a list of PCBs. One way to add and remove processes from the list so as to ensure bounded waiting is to use a FIFO queue, where the semaphore contains both head and tail pointers to the queue. In general, however, the list can use any queuing strategy. Correct usage of semaphores does not depend on a particular queuing strategy for the semaphore lists. \u6211\u4eec\u5728\u7b2c 7 \u7ae0\u8ba8\u8bba semaphore \u7684\u82e5\u5e72\u4f7f\u7528\u6848\u4f8b\u3002 \u200b\u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9519\u8bef\u5730\u4f7f\u7528 semaphore \u53ef\u80fd\u4f1a\u5bfc\u81f4 deadlock\uff1a \u6211\u4eec\u5728\u7b2c 8 \u7ae0\u8ba8\u8bba deadlock \u7684\u66f4\u591a\u7ec6\u8282\u3002 6.8 Priority Inversion \u00b6 \u200b\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a priority inversion \uff0c\u5373\u5177\u6709\u4e2d\u7b49\u4f18\u5148\u7ea7\u7684 M \u7684\u8fd0\u884c\u65f6\u95f4\u53cd\u800c\u5f71\u54cd\u4e86\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684 H \u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u200b\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f18\u5148\u7ea7\u7ee7\u627f priority inheritance \u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff1a\u6240\u6709\u6b63\u5728\u8bbf\u95ee\u8d44\u6e90\uff08\u5982\u4e0a\u4f8b\u4e2d\uff0c\u4f4e\u4f18\u5148\u7ea7\u7684 L \u6240\u6301\u7684\u9501\uff09\u7684\u8fdb\u7a0b\u83b7\u5f97\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\u7684\u66f4\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u5230\u5b83\u4eec\u7528\u5b8c\u6709\u5173\u8d44\u6e90\u4e3a\u6b62\u3002\uff08\u5982\u4e0a\u4f8b\u4e2d\uff0cpriority inheritance \u5c06\u5141\u8bb8 L \u4e34\u65f6\u7ee7\u627f H \u7684\u4f18\u5148\u7ea7\u4ece\u800c\u9632\u6b62\u88ab M \u62a2\u5360\uff1b\u5f53 L \u91ca\u653e\u9501\u540e\u5219\u56de\u5230\u539f\u6765\u7684\u4f18\u5148\u7ea7\uff0c\u6b64\u65f6 H \u5c06\u5728 M \u4e4b\u524d\u6267\u884c\u3002\uff09 What was the reason of the non-preemptivity of older Linux kernels? | StackExchange \u21a9 Giant lock | Wikipedia \u21a9 Peterson's algorithm #note | Wikipedia \u21a9 When to use busy waiting \u21a9","title":"6 \u540c\u6b65\u53ca\u5176\u5de5\u5177"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#6-synchronization-tools","text":"","title":"6 Synchronization Tools"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#61-\u4e3a\u4ec0\u4e48\u9700\u8981\u540c\u6b65","text":"\u6211\u4eec\u8bf4 Cooperating Process \u662f\u53ef\u4ee5\u5f71\u54cd\u7cfb\u7edf\u4e2d\u5176\u4ed6\u8fd0\u884c\u8fdb\u7a0b\u6216\u88ab\u5176\u4ed6\u8fdb\u7a0b\u5f71\u54cd\u7684\u8fdb\u7a0b\u3002 Cooperating processes \u4f1a\u5171\u540c\u4f7f\u7528\u4e00\u4e9b\u6570\u636e\uff0c\u53ef\u80fd\u662f\u76f4\u63a5\u4f7f\u7528\u540c\u4e00\u6bb5\u5730\u5740\u7a7a\u95f4\uff08\u4ee3\u7801+\u6570\u636e\uff09\uff0c\u6216\u8005\u662f\u901a\u8fc7\u5171\u4eab\u7684\u5185\u5b58\u6216\u4fe1\u606f\u4f20\u9012\u6765\u5171\u7528\u4e00\u4e9b\u6570\u636e\u3002\u5bf9\u6570\u636e\u7684\u540c\u65f6\u8bbf\u95ee (concurrent access) \u53ef\u80fd\u4f1a\u5bfc\u81f4 data inconsistency\uff0c\u56e0\u4e3a\u6570\u636e\u7684\u4e00\u81f4\u6027\u9700\u8981 cooperating processes \u6709\u5e8f\u7684\u8fd0\u884c\u3002 Bounded-buffer Problem \u7ed9\u5b9a\u4e24\u4e2a\u8fdb\u7a0b\uff1aproducer \u548c consumer\uff0c\u5b83\u4eec\u5171\u7528\u5927\u5c0f\u4e3a \\(n\\) \u7684 buffer\u3002Producer \u751f\u4ea7\u6570\u636e\u653e\u5165 buffer\uff0cconsumer \u4ece buffer \u53d6\u51fa\u6570\u636e\u4ece\u800c\u4f7f\u7528\u4e4b\u3002 \u8be5\u95ee\u9898\u9700\u8981\u4fdd\u8bc1\uff1aproducer \u4e0d\u5e94\u5f53\u5728 buffer \u6ee1\u65f6\u653e\u5165\u6570\u636e\uff0cconsumer \u4e5f\u4e0d\u5e94\u5f53\u5728 buffer \u7a7a\u65f6\u53d6\u51fa\u6570\u636e\u3002 \u6211\u4eec\u53ef\u80fd\u60f3\u8981\u50cf\u8fd9\u6837\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* Producer Process */ while ( true ) { /* produce an item in next_produced */ while ( count == BUFFER_SIZE ) ; /* do nothing */ buffer [ in ] = next_produced ; in = ( in + 1 ) % BUFFER_SIZE ; count ++ ; } /* Consumer Process */ while ( true ) { while ( count == 0 ) ; /* do nothing */ next_consumed = buffer [ out ]; out = ( out + 1 ) % BUFFER_SIZE ; count -- ; /* consume the item in next_consumed */ } \u4f46\u662f\uff0c count \u7684\u503c\u53ef\u80fd\u662f\u9519\u8bef\u7684\u3002 \u4e00\u79cd\u53ef\u80fd\u7684\u8fd0\u884c\u987a\u5e8f\u662f\uff1a \u51fa\u73b0\u4e0a\u4f8b\u4e2d\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5141\u8bb8\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u63a7\u53d8\u91cf count \u3002\u7c7b\u4f3c\u8fd9\u6837\u7684\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u64cd\u63a7\u540c\u4e00\u4e2a\u6570\u636e\uff0c\u56e0\u800c\u7ed3\u679c\u53d6\u51b3\u4e8e\u6bcf\u4e00\u79cd\u64cd\u63a7\u7684\u51fa\u73b0\u987a\u5e8f\u7684\u60c5\u5f62\uff0c\u79f0\u4e3a race condition \u3002\u4e3a\u4e86\u9632\u6b62 race condition\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u64cd\u63a7\u67d0\u4e2a\u53d8\u91cf\u3002 Race condition \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5e38\u89c1\u7684\u3002Kernel code \u4e2d\u4e5f\u5305\u542b race condition \u7684\u53ef\u80fd\u6027\u3002 Kernel \u4e2d\u4e5f\u5b58\u5728 race condition \u7684\u53ef\u80fd \u4e24\u4e2a\u8fdb\u7a0b P0 \u548c P1 \u540c\u65f6 fork() \u65f6\uff0c\u5982\u679c\u4e0d\u52a0\u9650\u5236\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u524d\u4f8b\u7684\u60c5\u51b5\uff0c\u5373\u5728\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u628a\u5f53\u524d\u7684 next_avaliable_pid \u5206\u914d\u7ed9\u4ed6\u7684 child \u540e\uff0c\u5728\u6ca1\u6765\u5f97\u53ca\u66f4\u65b0 next_avaliable_pid \u524d\uff0c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u4e86 next_avaliable_pid \u6765\u7ed9 child \u5206\u914d PID\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u4e24\u4e2a\u4e0d\u540c\u7684\u7ebf\u7a0b\u4f7f\u7528\u540c\u4e00\u4e2a PID \u7684\u60c5\u51b5\u3002 \u56e0\u6b64\uff0c\u4ece\u64cd\u4f5c\u7cfb\u7edf\u7684\u8bbe\u8ba1\u672c\u8eab\u6765\u8bf4\uff0c\u907f\u514d race condition \u5e26\u6765\u9519\u8bef\u7684\u7ed3\u679c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u4eba\u5458\u5728\u4f7f\u7528\u591a\u8fdb\u7a0b\u65f6\u4e5f\u5e94\u5f53\u5145\u5206\u8003\u8651\u662f\u5426\u4f1a\u5e26\u6765\u95ee\u9898\u3002","title":"6.1 \u4e3a\u4ec0\u4e48\u9700\u8981\u540c\u6b65"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#62-\u95ee\u9898\u5efa\u6a21-the-critical-section-problem","text":"\u200b\u8003\u8651\u4e00\u4e2a\u6709 n \u4e2a\u8fdb\u7a0b\u7684\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u90fd\u6709\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff0c\u5b83\u53ef\u80fd\u4f1a\u4fee\u6539\u4e00\u4e9b\u4e0e\u5176\u4ed6\u81f3\u5c11\u4e00\u4e2a\u8fdb\u7a0b\u516c\u7528\u7684\u6570\u636e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u79f0\u4e3a critical section \u3002\u8fd9\u4e2a\u7cfb\u7edf\u9700\u8981\u6ee1\u8db3\u7684\u91cd\u8981\u6027\u8d28\u662f\uff1a\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u5b83\u7684 critical section \u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u8fdb\u5165\u5b83\u7684 critical section\u3002 \u200b\u6211\u4eec\u5c06\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a Critical-section problem \uff0c\u4e5f\u5c31\u662f\u8981\u8bbe\u8ba1\u4e00\u79cd\u8fbe\u6210\u8fd9\u4e00\u6027\u8d28\u7684\u65b9\u6cd5\uff1b\u6216\u8005\u8bf4\uff0c\u8bbe\u8ba1\u4e00\u79cd\u80fd\u8ba9\u5404\u4e2a\u8fdb\u7a0b \u540c\u6b65 (synchronize) \u5b83\u4eec\u7684\u6d3b\u52a8\uff0c\u4ece\u800c\u5b89\u5168\u5730\u5171\u4eab\u6570\u636e\u7684\u534f\u8bae\u3002 Tips \u300c\u200b\u540c\u6b65\u300d\u7684\u6838\u5fc3\u610f\u4e49\u662f\uff0c\u89c4\u5b9a\u8fdb\u7a0b\u6240\u505a\u7684\u5de5\u4f5c\u4e4b\u95f4\u7684\u987a\u5e8f\u6216\u8005\u5148\u5e8f\u5173\u7cfb\uff0c\u4ece\u800c\u9632\u6b62\u4e00\u4e9b\u975e\u6cd5\u60c5\u51b5\u7684\u53d1\u751f\u3002 \u200b\u6bcf\u4e2a\u8fdb\u7a0b\u5fc5\u987b\u5728 entry section \u4e2d\u7533\u8bf7\u8fdb\u5165 critical section \u7684\u8bb8\u53ef\uff1b\u5728 critical section \u8fd0\u884c\u7ed3\u675f\u540e\u8fdb\u5165 exit section \uff0c\u5728\u8fd9\u91cc\u8bb8\u53ef\u88ab\u91ca\u653e\u3002\u5176\u4ed6\u4ee3\u7801\u79f0\u4e3a remainder section \u3002 \u200bCritical-section problem \u7684\u89e3\u51b3\u65b9\u6cd5\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u8981\u6c42\uff1a Mutual exclusion - \u6ca1\u6709\u4e24\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u5728\u8fd0\u884c critical section\u3002 Progress - \u7cfb\u7edf\u6574\u4f53\u4e0a\u662f\u5728\u8fd0\u884c\u7684\uff0c\u5373\u8981\u4e48\u6709\u8fdb\u7a0b\u5728\u8fd0\u884c\u5b83\u7684 critical section\uff0c\u8981\u4e48\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u60f3\u8981\uff08\u5c06\u8981\uff0c\u5373\u5728\u8fd0\u884c critical section \u4e4b\u524d\u7684 section\uff09\u8fdb\u5165 critical section\uff0c\u8981\u4e48\u5728\u6709\u9650\u65f6\u95f4\u5185\u5c06\u6709\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u9009\u4e2d\u8fdb\u5165\u5b83\u7684 critical section\u3002 Bounded waiting - \u4efb\u4f55\u4e00\u4e2a\u8fdb\u7a0b\u7b49\u5f85\u8fdb\u5165 critical section \u7684\u65f6\u95f4\u662f\u6709\u9650\u7684\u3002\u5373\uff0c\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u63d0\u51fa\u4e00\u4e2a\u8fdb\u5165 critical section \u7684\u8bf7\u6c42\u540e\uff0c\u53ea\u6709\u6709\u9650\u4e2a\uff08\u6b21\uff09\u8fdb\u7a0b\u4f1a\u5728\u5b83\u4e4b\u524d\u8fdb\u5165 critical section\u3002","title":"6.2 \u95ee\u9898\u5efa\u6a21: The Critical-Section Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#kernel-\u4e2d\u7684-cs-problem","text":"\u200b\u5bf9\u4e8e\u5355\u6838\u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 critical section \u4e2d\u7981\u6b62\u4e2d\u65ad\uff08\u5373\uff0c\u5728 entry section \u4e2d disable\uff0c\u5728 exit section \u4e2d enable\uff09\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\uff08\u867d\u7136\u53ef\u80fd\u662f\u5371\u9669\u7684\uff09\u3002\u200b\u4f46\u662f\u5bf9\u4e8e\u591a\u6838\u7cfb\u7edf\uff0c\u4e2d\u65ad\u7981\u6b62\u7684\u6d88\u606f\u8981\u4f20\u5230\u6240\u6709\u5904\u7406\u5668\uff0c\u6d88\u606f\u4f20\u9012\u4f1a\u5ef6\u8fdf\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4f1a\u964d\u4f4e\u6548\u7387\uff1b\u540c\u65f6\u4e5f\u4f1a\u5f71\u54cd\u65f6\u949f\u4e2d\u65ad\u3002 \u200b\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 kernel \u7684\u8bbe\u8ba1\u5b9e\u73b0\u4e86 critical section\u3002Kernel \u7684\u5b9e\u73b0\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b\uff0c\u5206\u522b\u662f \u62a2\u5360\u5f0f\u5185\u6838 preemptive kernel \u548c \u975e\u62a2\u5360\u5f0f\u5185\u6838 nonpreemptive kernel \uff0c\u5176\u533a\u522b\u662f\u662f\u5426\u5141\u8bb8\u5904\u4e8e kernel mode \u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 \u200b\uff08\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u975e\u62a2\u5360\u5f0f\u5185\u6838\u7684\u5b9e\u73b0\u662f\u4fdd\u8bc1\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u5728 kernel \u91cc\u8dd1 1 2 \u2014\u2014\u8fd9\u79cd\u5b9e\u73b0\u548c\u4e0a\u8ff0\u6982\u5ff5\u7684\u533a\u522b\u662f\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u5904\u7406\u5668\uff1b\u5982\u679c\u6309\u4e0a\u8ff0\u7684\u6982\u5ff5\u6765\u8bf4\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6ca1\u6709\u591a\u4e2a CPU \u540c\u65f6\u8dd1\u5728 kernel \u91cc\u3002\uff09\u56e0\u6b64\uff0c\u975e\u62a2\u5360\u5f0f\u5185\u6838\u4e0d\u4f1a\u5bfc\u81f4 kernel mode \u7684 race condition\uff0c\u56e0\u4e3a\u5728\u4efb\u4e00\u65f6\u95f4\u70b9\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u5728 kernel \u91cc\u8dd1\uff0c\u6240\u4ee5 kernel \u7528\u5230\u7684\u5404\u79cd\u6570\u636e\u548c\u8d44\u6e90\u4e5f\u5c31\u53ea\u6709\u5b83\u4e00\u4e2a\u4eba\u7528\u4e86\uff01 \u200b\u62a2\u5360\u5f0f\u5185\u6838\u76f8\u5bf9\u800c\u8a00\u66f4\u96be\u8bbe\u8ba1\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u80fd\u6709\u66f4\u5feb\u7684\u54cd\u5e94\u3002\u6211\u4eec\u5728\u540e\u9762\u82e5\u5e72\u8282\u6765\u8ba8\u8bba\u8bbe\u8ba1\u62a2\u5360\u5f0f\u5185\u6838\uff0c\u6216\u8005\u8bf4\u8bbe\u8ba1\u51fa\u89e3\u51b3\u4e86 critical-section problem \u7684\u7a0b\u5e8f\u7684\u65b9\u6848\u3002","title":"Kernel \u4e2d\u7684 CS Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#63-petersons-solution","text":"\u200bPeterson's solution \u57fa\u4e8e\u4e00\u5b9a\u7684\u5047\u8bbe\u89e3\u51b3\u4e86\u4e24\u4e2a task \u7684 synchornization\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int turn ; // Who is allowed to enter boolean flag [ 2 ]; // Ready to enter its CS void foo () { while ( true ) { flag [ i ] = true ; // Mark self ready turn = 1 - i ; // Assert that if the other process wishes to // enter its CS, it can do so. while ( flag [ 1 - i ] && turn == 1 - i ); // Wait /* critical section */ flag [ i ] = false ; // Set ready to false /* remainder section */ } } \u5176\u4e2d\uff0c i \u662f 0 \u6216 1\uff0c\u8868\u793a\u7b2c i \u4e2a\u8fdb\u7a0b\uff1b turn \u662f\u5f53\u524d\u6709\u6743\u8fdb\u5165 critical section \u7684\u8fdb\u7a0b\uff080 \u6216 1\uff09\uff1b flag[i] \u662f\u7b2c i \u4e2a\u8fdb\u7a0b\u662f\u5426\u51c6\u5907\u597d\u8fdb\u5165 critical section\uff0c\u521d\u59cb\u503c\u5747\u4e3a FALSE\u3002 To enter the critical section, process Pi first sets flag[i] to be true and then sets turn to the value 1-i (the other process), thereby asserting that if the other process wishes to enter the critical section, it can do so. If both processes try to enter at the same time, turn will be set to both 0 and 1 at roughly the same time. Only one of these assignments will last; the other will occur but will be overwritten immediately. The eventual value of turn determines which of the two processes is allowed to enter its critical section first.","title":"6.3 Peterson's Solution"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#\u6027\u8d28\u8bc1\u660e","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u6613\u7684\u5206\u7c7b\u8ba8\u8bba\u8bc1\u660e Peterson's Solution \u6ee1\u8db3 6.2 \u4e2d\u63d0\u5230\u7684\u4e09\u4e2a\u6027\u8d28\uff1aMutual exclusion, process and bounded waiting\u3002","title":"\u6027\u8d28\u8bc1\u660e"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#reordering","text":"\u200b\u4f46\u5b9e\u9645\u4e0a\uff0cPeterson's solution \u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e0a\u4e0d\u4e00\u5b9a\u9002\u7528\uff0c\u56e0\u4e3a\u73b0\u4ee3\u7684\u5904\u7406\u5668\u548c\u7f16\u8bd1\u5668\u6709\u53ef\u80fd\u4f1a\u4e3a\u4e86\u4f18\u5316\u6027\u80fd\u800c\u5bf9\u4e00\u4e9b\u8bfb\u5199\u64cd\u4f5c\u8fdb\u884c\u91cd\u6392\u3002\u5728\u4f18\u5316\u4e2d\uff0c\u5904\u7406\u5668\u6216\u7f16\u8bd1\u5668\u4f1a\u8003\u8651\u5176\u91cd\u6392\u7684\u5408\u7406\u6027\uff0c\u5373\u4fdd\u8bc1\u4e86\u5728\u5355\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u7ed3\u679c\u503c\u662f\u7a33\u5b9a\u4e14\u6b63\u786e\u7684\u3002\u4f46\u662f\u8fd9\u4e0d\u80fd\u4fdd\u8bc1\u5176\u5728\u591a\u7ebf\u7a0b\u5171\u7528\u6570\u636e\u65f6\u7684\u6b63\u786e\u6027\uff0c\u91cd\u6392\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u6216\u8005\u4e0d\u671f\u671b\u7684\u8f93\u51fa\u3002\u4f8b\u5982\u5982\u679c\u7f16\u8bd1\u5668\u5c06\u5bf9 flag[i] \u548c turn \u8d4b\u503c\u7684\u987a\u5e8f\u4ea4\u6362\uff1a \u200bNote that reordering of memory accesses can happen even on processors that don't reorder instructions 3 .","title":"Reordering"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#memory-barrier","text":"\u200b\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u7f16\u8bd1\u5668\u548c\u5904\u7406\u5668\u4f1a\u5bf9\u4ee3\u7801\u7684\u7ed3\u6784\u8fdb\u884c reorder\uff0c\u4ee5\u8fbe\u5230\u6700\u4f73\u6548\u679c\u3002 \u91cd\u6392\u7684\u4f8b\u5b50 \u5bf9 a2 \u548c b1 \u8fdb\u884c\u91cd\u6392\uff0c\u4f7f\u5f97\u4e0d\u9700\u53cd\u590d\u8bfb\u53d6\u4ea4\u66ff x \u548c y \u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int x = 1 ; int y = 2 ; int a1 = x * 1 ; int b1 = y * 1 ; int a2 = x * 2 ; int b2 = y * 2 ; // \u53ef\u80fd\u4f1a\u4f18\u5316\u4e3a\uff1a int x = 1 ; int y = 2 ; int a1 = x * 1 ; int a2 = x * 2 ; int b1 = y * 1 ; // a2, b1 \u7684\u987a\u5e8f\u8fdb\u884c\u4e86\u91cd\u6392 int b2 = y * 2 ; \u200b\u91cd\u6392\u53ef\u80fd\u4f7f\u5f97\u5728\u591a\u6838\u8fd0\u884c\u65f6\u51fa\u73b0\u4e0e\u671f\u671b\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165 Memory Barrier \uff1a\u5b83\u7528\u6765\u4fdd\u8bc1\u5176\u4e4b\u524d\u7684\u5185\u5b58\u8bbf\u95ee\u5148\u4e8e\u5176\u540e\u7684\u5b8c\u6210\u3002\u5373\uff0c\u6211\u4eec\u4fdd\u8bc1\u5728\u6b64\u524d\u5bf9\u5185\u5b58\u7684\u6539\u53d8\u5bf9\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u7684\u8fdb\u7a0b\u662f\u53ef\u89c1\u7684\u3002","title":"Memory Barrier"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#memory-model","text":"\u200b\u53e6\u5916\uff0c\u5728\u73b0\u4ee3\u7684\u4f53\u7cfb\u7ed3\u6784\u4e0a\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u5199\u4e86\u5bf9\u5e94\u7684\u53d8\u91cf\u540e\u6709\u53ef\u80fd\u4e0d\u4f1a\u7acb\u523b\u5199\u56de\u5185\u5b58\uff0c\u8fd9\u4e5f\u6709\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\uff1a How a computer architecture determines what memory guarantees it will provide to an application program is known as its memory model . In general, a memory model falls into one of two categories: Strongly ordered , where a memory modification on one processor is immediately visible to all other processors. Weakly ordered , where modifications to memory on one processor may not be immediately visible to other processors.","title":"Memory Model"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#64-\u786c\u4ef6\u6307\u4ee4","text":"\u200b\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u63d0\u4f9b\u786c\u4ef6\u6307\u4ee4\uff0c\u7528\u4e8e\u68c0\u6d4b\u548c\u4fee\u6539 word \u7684\u5185\u5bb9\uff0c\u6216\u8005\u7528\u4e8e atomically \uff08uniterruptably\uff0c\u4e0d\u53ef\u88ab\u6253\u65ad\u5730\uff09 \u4ea4\u6362\u4e24\u4e2a word\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u8ba8\u8bba\u7279\u5b9a\u673a\u5668\u7684\u7279\u5b9a\u6307\u4ee4\uff0c\u800c\u662f\u901a\u8fc7\u6307\u4ee4 test_and_set() \u548c compare_and_swap() \u62bd\u8c61\u4e86\u89e3\u8fd9\u4e9b\u6307\u4ee4\u80cc\u540e\u7684\u4e3b\u8981\u6982\u5ff5\u3002","title":"6.4 \u786c\u4ef6\u6307\u4ee4"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#641-test_and_set","text":"\u6307\u4ee4 test_and_set() \u7684\u529f\u80fd\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u6765\u5b9a\u4e49\uff1a 1 2 3 4 5 bool test_and_set ( bool * target ) { bool rv = * target ; * target = true ; return rv ; } \u4e0a\u8ff0\u7684\u300c\u5b9a\u4e49\u300d\u53ea\u8bf4\u660e\u4e86\u8fd9\u4e2a\u6307\u4ee4\u7684\u529f\u80fd\uff0c\u4f46\u662f\u8fd9\u4e00\u6307\u4ee4\u7684\u91cd\u8981\u7279\u5f81\u662f\uff0c \u5b83\u7684\u6267\u884c\u662f atomic \u7684 \u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u652f\u6301\u8fd9\u4e2a\u6307\u4ee4\u7684\u673a\u5668\u4e0a\u5b9e\u73b0 mutual exclusive\uff1a\u5b9a\u4e49\u4e00\u4e2a bool \u53d8\u91cf lock \uff0c\u521d\u59cb\u5316\u4e3a false\u3002\u8fdb\u7a0b\u7684\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 while ( true ) { /* Entry Section */ while ( test_and_set ( & lock )) ; /* do nothing */ /* Critical Section */ /* Exit Section */ lock = false ; /* Remainder Section */ } \u53ef\u89c1\uff0c\u5982\u679c lock \u5728 Entry Section \u65f6\u4e3a true\uff0c\u90a3\u4e48 test_and_set(&lock) \u5c06\u8fd4\u56de true\uff0c\u56e0\u6b64\u4f1a\u59cb\u7ec8\u5728 while \u5faa\u73af\u4e2d\u8be2\u95ee\u3002\u76f4\u5230\u67d0\u4e2a\u65f6\u523b lock \u4e3a false\uff0c\u90a3\u4e48 test_and_set(&lock) \u5c06\u8fd4\u56de false \u540c\u65f6\u5c06 lock \u7f6e\u4e3a true\uff0c\u8fdb\u7a0b\u8fdb\u5165 Critical Section\uff0c\u540c\u65f6\u4fdd\u8bc1\u5176\u4ed6\u8fdb\u7a0b\u65e0\u6cd5\u8fdb\u5165 Critical Section\u3002\u5f53\u6301\u9501\u7684\u8fdb\u7a0b\u5b8c\u6210 Critical Section \u7684\u8fd0\u884c\uff0c\u5b83\u5728 Exit Section \u4e2d\u91ca\u653e lock \uff0c\u4ece\u800c\u5141\u8bb8\u5176\u4ed6\u8fdb\u7a0b\u8fdb\u5165 Critical Section\u3002 \u800c\u5982\u679c\u67d0\u4e2a\u65f6\u523b lock \u4e3a false\uff0c\u800c\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\u51e0\u4e4e\u540c\u65f6\u8c03\u7528\u4e86 test_and_set(&lock) \u3002\u4f46\u7531\u4e8e\u5b83\u662f atomic \u7684\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u8fd4\u56de false\u3002 \u200b\u4f46\u662f\uff0c\u5982\u4e0a\u6240\u793a\u7684\u63a7\u5236\u4e0d\u80fd\u6ee1\u8db3 bounded waiting \u6761\u4ef6\uff1a \u200b\u6211\u4eec\u53ef\u4ee5\u4f5c\u5982\u4e0b\u66f4\u6539\u4ee5\u6ee1\u8db3 bounded waiting\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( true ) { /* Entry Section */ waiting [ i ] = true ; while ( waiting [ i ] && test_and_set ( & lock )) ; /* do nothing */ waiting [ i ] = false ; /* Critical Section */ /* Exit Section */ j = ( i + 1 ) % n ; while (( j != i ) && ! waiting [ j ])) j = ( j + 1 ) % n ; if ( j == i ) lock = false ; else waiting [ j ] = false ; /* Remainder Section */ } \u6211\u4eec\u5f15\u5165\u4e86 bool \u6570\u7ec4 waiting[] \u3002\u5728 Entry Section \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u7f6e waiting[i] \u4e3a true\uff1b\u5f53 waiting[i] \u6216\u8005 lock \u4e2d\u4efb\u610f\u4e00\u4e2a\u88ab\u91ca\u653e\u65f6\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u8fdb\u5165 Critical Section\u3002\u521d\u59cb\u65f6\uff0c lock \u4e3a false\uff0c\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165 CS \u7684\u8fdb\u7a0b\u53ef\u4ee5\u83b7\u8bb8\u8fd0\u884c\u3002\u5728 Exit Section \u4e2d\uff0c\u8fdb\u7a0b\u4ece\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\uff0c\u904d\u5386\u4e00\u904d\u6240\u6709\u8fdb\u7a0b\uff0c\u53d1\u73b0\u6b63\u5728\u7b49\u5f85\u7684\u8fdb\u7a0b\u65f6\u91ca\u653e\u5b83\u7684 waiting[j] \uff0c\u4f7f\u5176\u83b7\u8bb8\u8fdb\u5165 CS\uff0c\u5f53\u524d\u8fdb\u7a0b\u7ee7\u7eed Remainder Section \u7684\u8fd0\u884c\uff1b\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8fdb\u7a0b\u5728\u7b49\u5f85\uff0c\u90a3\u4e48\u5b83\u91ca\u653e lock \uff0c\u4f7f\u5f97\u4e4b\u540e\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u5165 CS \u7684\u8fdb\u7a0b\u53ef\u4ee5\u76f4\u63a5\u83b7\u8bb8\u3002 \u8fd9\u6837\u7684\u65b9\u5f0f\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u81f3\u591a\u7b49\u5f85 n-1 \u4e2a\u8fdb\u7a0b\u5728\u5176\u524d\u9762\u8fdb\u5165 CS\uff0c\u6ee1\u8db3\u4e86 bounded waiting \u6761\u4ef6\u3002","title":"6.4.1 test_and_set"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#642-compare_and_swap","text":"\u6307\u4ee4 compare_and_swap() \u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a 1 2 3 4 5 6 int compare_and_swap ( int * value , int expected , int new_value ) { int temp = * value ; if ( * value == expected ) * value = new_value ; return temp ; } \u540c\u6837\uff0c compare_and_swap() \u7684\u6267\u884c\u662f atomic \u7684\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf lock \uff0c\u521d\u59cb\u503c\u8bbe\u4e3a 0\u3002\u8fdb\u7a0b\u7684\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 while ( true ) { /* Entry Section */ while ( compare_and_swap ( & lock , 0 , 1 ) != 0 ) ; /* do nothing */ /* Critical Section */ /* Exit Section */ lock = 0 ; /* Remainder Section */ } \u53ef\u89c1\uff0c compare_and_swap() \u548c test_and_set() \u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002\u4e0a\u4f8b compare_and_swap() \u7684\u4f7f\u7528\u65b9\u6cd5\u540c\u6837\u65e0\u6cd5\u4fdd\u8bc1 bounded waiting\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0e test_and_set() \u540c\u6837\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002","title":"6.4.2 compare_and_swap"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#65-atomic-variables","text":"\u200b\u5982\u6211\u4eec\u5148\u524d\u6240\u8bf4\uff0c\u4e4b\u524d\u4ecb\u7ecd\u7684\u6307\u4ee4\u5e38\u88ab\u7528\u6765\u4f5c\u4e3a\u540c\u6b65\u5de5\u5177\u7684\u7ec4\u6210\u90e8\u5206\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 compare_and_swap() \u6307\u4ee4\u6765\u5b9e\u73b0\u4e00\u4e9b\u5de5\u5177\u3002\u5176\u4e2d\u4e00\u4e2a\u5de5\u5177\u5c31\u662f Atomic Variable \u3002 \u200b\u4e00\u4e2a\u53d8\u91cf\u5728\u66f4\u65b0\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e2a race condition\uff0c\u800c Atomic Variable \u53ef\u4ee5\u4e3a\u6570\u636e\u63d0\u4f9b atomic updates\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u53ef\u6253\u65ad\u7684 increment(&count) ; \u6307\u4ee4\u6765\u4ee3\u66ff\u53ef\u88ab\u6253\u65ad\u7684 count++ \u6307\u4ee4\u5c31\u53ef\u4ee5\u89e3\u51b3\u672c\u8282\u5f00\u5934\u7684 Bounded-buffer Problem\uff1a 1 2 3 4 5 6 void increment ( atomic_int * v ) { int temp ; do { temp = * v ; } while ( temp != compare_and_swap ( v , temp , temp + 1 )); } \u6ce8\u610f\u5230\uff0c\u7a0b\u5e8f\u5faa\u73af\u5c1d\u8bd5\u5c06 v \u8d4b\u503c\u4e3a temp+1 \uff0c\u5f53\u8d4b\u503c\u6210\u529f\u65f6\u8fd4\u56de\u3002\u7531\u4e8e CAS \u6307\u4ee4\u662f atomic \u7684\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u6253\u65ad\uff1b\u5728\u7a0b\u5e8f\u5176\u4ed6\u8fd0\u884c\u8fc7\u7a0b\u4e2d v \u7684\u503c\u90fd\u6ca1\u6709\u53d1\u751f\u6539\u53d8\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c buffer \u6709\u4e24\u4e2a consumer \u5728\u540c\u65f6\u7b49\u5f85\u8bfb\u53d6\uff0c\u90a3\u4e48\u5f53 count \u7531 0 \u53d8\u6210 1 \u7684\u65f6\u5019\u4e24\u4e2a consumer \u53ef\u80fd\u4f1a\u540c\u65f6\u8fdb\u5165\u6765\u8bfb\u53d6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u53ea\u6709 1 \u4e2a\u503c\u5728 buffer \u4e2d\u3002\u5373\uff0cAtomic Variable \u5e76\u4e0d\u80fd\u89e3\u51b3\u6240\u6709 race condition\uff0c\u56e0\u4e3a\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u4ec5\u662f\u53d8\u91cf\u66f4\u65b0\u8fc7\u7a0b\u4e2d\u7684 race condition\u3002","title":"6.5 Atomic Variables"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#66-mutex","text":"\u200b\u6211\u4eec\u5c1d\u8bd5\u8bbe\u8ba1\u8f6f\u4ef6\u5de5\u5177\u6765\u89e3\u51b3 CS problem\u3002\u6211\u4eec\u8ba8\u8bba Mutex (MUTual EXclusion) Lock \u7684\u5b9e\u73b0\uff0c\u5b83\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u6700\u7b80\u5355\u7684 synchronization tool\u3002 \u200b\u6211\u4eec\u8003\u8651\u8ba9\u8fdb\u7a0b\u5728 Entry Section \u7533\u8bf7 acquire() \u4e00\u4e2a\u9501\uff0c\u7136\u540e\u5728 Exit Section release() \u4e00\u4e2a\u9501\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u9501\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\u6765\u8868\u793a\u5b83\u662f\u5426 avaliable\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 while ( true ) { acquire (); /* critical section */ release (); /* remainder section */ } /* ------- */ void acquire () { while ( ! available ) ; /* busy waiting */ avaliable = false ; } void release () { avaliable = true ; } \u6211\u4eec\u9700\u8981\u4fdd\u8bc1 acquire() \u548c release() \u662f atomic \u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 test_and_set() \u548c compare_and_swap() \u6765\u5b9e\u73b0\uff1a void acquire () { while ( compare_and_swap ( & available , 1 , 0 ) != 1 ) ; /* busy waiting */ } void release () { available = true ; } \u4f46\u662f\u8fd9\u79cd\u5b9e\u73b0\u7684\u7f3a\u70b9\u662f\uff0c\u5b83\u9700\u8981 busy waiting \uff0c\u5373\u5f53\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\u65f6\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5728\u8bf7\u6c42\u8fdb\u5165\u4e34\u754c\u533a\u65f6\u5728 acquire() \u4e2d\u6301\u7eed\u7b49\u5f85\uff0c \u4f8b\u5982\u5f53\u4e24\u4e2a\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u4e00\u4e2a CPU \u65f6\uff1a T0 acquires lock -> INTERRUPT-> T1 runs, spin, spin spin \u2026 (till time's out) -> INTERRUPT-> T0 runs -> INTERRUPT->T1 runs, spin, spin spin \u2026 -> INTERRUPT-> T0 runs, release locks -> INTERRUPT -> T1 runs, enters CS \u53ef\u4ee5\u53d1\u73b0\uff0cT1 \u5728\u5b83\u7684 CPU \u65f6\u95f4\u5185\u4e0d\u65ad\u5faa\u73af\u7b49\u5f85\uff0c\u76f4\u5230 T0 \u91ca\u653e\u9501\u3002\u56e0\u6b64\u8fd9\u79cd\u9501\u4e5f\u6210\u4e3a spinlock \u3002\u53ef\u4ee5\u60f3\u8c61\uff0c\u5982\u679c\u6709 N \u4e2a\u8fdb\u7a0b\u540c\u65f6\u4f7f\u7528\u4e00\u4e2a CPU\uff0c\u90a3\u4e48\u5c06\u6709\u5927\u7ea6 \\(\\frac{N-1}{N}\\) \u7684\u65f6\u95f4\u88ab\u6d6a\u8d39\u3002\u5982\u679c\u6709\u8fdb\u7a0b\u5728\u4f01\u56fe acquire \u4e00\u4e2a\u9501\u65f6\u88ab\u963b\u6b62\uff0c\u6211\u4eec\u79f0\u5b83\u662f contended\uff08\u88ab\u4e89\u593a\uff09 \uff1b\u53cd\u4e4b\u6211\u4eec\u79f0\u5b83 uncontended \u3002\u5982\u6211\u4eec\u6240\u8ff0\uff0chighly contended locks \u4f1a\u964d\u4f4e\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u7684\u6574\u4f53\u6027\u80fd\u3002 \u200b\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u4e0b\u9762\u7684\u8bbe\u8ba1\uff0c\u5176\u4e2d yield() \u4f1a\u4f7f\u7a0b\u5e8f\u4ece running \u8f6c\u4e3a ready\uff0c\u4ece\u800c\u8ba9\u51fa CPU\uff1a void acquire () { while ( compare_and_swap ( & avaliable , 1 , 0 ) != 1 ) yield (); } void release () { avaliable = true ; } \u200b\u4e0d\u8fc7\uff0c\u5982\u679c\u6240\u9700\u7684\u7b49\u5f85\u65f6\u95f4\u4e00\u822c\u5c0f\u4e8e context switch \u6240\u9700\u7684\u65f6\u95f4\u7684\u8bdd\uff0c\u7528 spinlock \u53ef\u80fd\u662f\u66f4\u597d\u7684 4 \u3002","title":"6.6 Mutex"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#67-semaphores","text":"\u6211\u4eec\u7ed9\u51fa\u4e00\u79cd\u66f4\u5389\u5bb3\u7684 synchronization tool\uff0c\u79f0\u4e3a semaphore\u3002\u4e00\u4e2a semaphore S \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u5b83\u9664\u4e86\u521d\u59cb\u5316\u5916\u53ea\u80fd\u901a\u8fc7\u4e24\u4e2a atomic \u64cd\u4f5c wait() \u548c signal() \uff08\u539f\u79f0\u4e3a P() \u548c V() \uff09\u6765\u8bbf\u95ee\uff1a 1 2 3 4 5 6 7 8 9 void wait ( S ) { while ( S <= 0 ) ; /* busy waiting */ S -- ; } void signal ( S ) { S ++ ; } Tips \u9700\u8981\u91cd\u7533\u7684\u662f\uff0c wait() \u548c signal() \u7684\u5b9e\u73b0\u4e5f\u5e94\u662f atomic \u7684\u3002 \u6709 2 \u79cd semaphore\uff1a Counting semaphore - S \u7684\u503c\u4e0d\u53d7\u9650\u5236\uff1b Binary semaphore - S \u7684\u503c\u53ea\u80fd\u662f 0 \u6216 1\u3002\u7c7b\u4f3c\u4e8e\u4e92\u65a5\u9501\u3002 Example \u4f46\u662f\uff0c\u5982\u540c\u524d\u9762\u6211\u4eec\u6240\u8bf4\uff0csemaphore \u4e5f\u5177\u6709 busy waiting \u7684\u95ee\u9898\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a semaphore \u5f15\u5165 waiting queue \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 typedef struct { int value ; struct list_head * waiting_queue ; } semaphore ; wait ( semaphore * S ) { S -> value -- ; if ( S -> value < 0 ) { add this process to S -> list ; block (); } } signal ( semaphore * S ) { S -> value ++ ; if ( S -> value <= 0 ) { remove a process P from S -> list ; wakeup ( P ); } } \u64cd\u4f5c block() \u6302\u8d77\u8c03\u7528\u5b83\u7684\u8fdb\u7a0b\uff0c\u64cd\u4f5c wakeup(P) \u91cd\u65b0\u542f\u52a8 P \u7684\u6267\u884c\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u4f5c\u4e3a\u57fa\u672c\u7cfb\u7edf\u8c03\u7528\u63d0\u4f9b\u7684\u3002 The list of waiting processes can be easily implemented by a link field in each process control block (PCB). Each semaphore contains an integer value and a pointer to a list of PCBs. One way to add and remove processes from the list so as to ensure bounded waiting is to use a FIFO queue, where the semaphore contains both head and tail pointers to the queue. In general, however, the list can use any queuing strategy. Correct usage of semaphores does not depend on a particular queuing strategy for the semaphore lists. \u6211\u4eec\u5728\u7b2c 7 \u7ae0\u8ba8\u8bba semaphore \u7684\u82e5\u5e72\u4f7f\u7528\u6848\u4f8b\u3002 \u200b\u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9519\u8bef\u5730\u4f7f\u7528 semaphore \u53ef\u80fd\u4f1a\u5bfc\u81f4 deadlock\uff1a \u6211\u4eec\u5728\u7b2c 8 \u7ae0\u8ba8\u8bba deadlock \u7684\u66f4\u591a\u7ec6\u8282\u3002","title":"6.7 Semaphores"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/6_sync_tools/#68-priority-inversion","text":"\u200b\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a priority inversion \uff0c\u5373\u5177\u6709\u4e2d\u7b49\u4f18\u5148\u7ea7\u7684 M \u7684\u8fd0\u884c\u65f6\u95f4\u53cd\u800c\u5f71\u54cd\u4e86\u5177\u6709\u8f83\u9ad8\u4f18\u5148\u7ea7\u7684 H \u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u200b\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f18\u5148\u7ea7\u7ee7\u627f priority inheritance \u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff1a\u6240\u6709\u6b63\u5728\u8bbf\u95ee\u8d44\u6e90\uff08\u5982\u4e0a\u4f8b\u4e2d\uff0c\u4f4e\u4f18\u5148\u7ea7\u7684 L \u6240\u6301\u7684\u9501\uff09\u7684\u8fdb\u7a0b\u83b7\u5f97\u9700\u8981\u8bbf\u95ee\u8fd9\u4e2a\u8d44\u6e90\u7684\u66f4\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u5230\u5b83\u4eec\u7528\u5b8c\u6709\u5173\u8d44\u6e90\u4e3a\u6b62\u3002\uff08\u5982\u4e0a\u4f8b\u4e2d\uff0cpriority inheritance \u5c06\u5141\u8bb8 L \u4e34\u65f6\u7ee7\u627f H \u7684\u4f18\u5148\u7ea7\u4ece\u800c\u9632\u6b62\u88ab M \u62a2\u5360\uff1b\u5f53 L \u91ca\u653e\u9501\u540e\u5219\u56de\u5230\u539f\u6765\u7684\u4f18\u5148\u7ea7\uff0c\u6b64\u65f6 H \u5c06\u5728 M \u4e4b\u524d\u6267\u884c\u3002\uff09 What was the reason of the non-preemptivity of older Linux kernels? | StackExchange \u21a9 Giant lock | Wikipedia \u21a9 Peterson's algorithm #note | Wikipedia \u21a9 When to use busy waiting \u21a9","title":"6.8 Priority Inversion"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/","text":"7 Synchronization Examples \u00b6 7.1 \u7ecf\u5178\u540c\u6b65\u95ee\u9898 \u00b6 \u4e00\u822c\u6211\u4eec\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u4e3a\u4fe1\u53f7\u91cf\u76f8\u5bf9\u6765\u8bf4\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5f88\u591a\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4fe1\u53f7\u91cf\u505a\u4e86\u66f4\u591a\u8bbe\u8ba1\uff0c\u7528\u6765\u907f\u514d busy waiting \u7b49\u95ee\u9898\u3002 \u4fe1\u53f7\u91cf\u7684\u903b\u8f91\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff1a\u4e00\u4e2a\u4fe1\u53f7\u91cf\u7528\u6765\u8868\u793a \u4e00\u7c7b\u300c\u8d44\u6e90\u300d\u7684\u4f59\u91cf \uff1b wait() \u7b49\u5f85\u5230\u5176\u6709\u4f59\u91cf\u65f6\u4ece\u4e2d\u53d6\u8d70\u4e00\u4e2a\uff0c\u800c signal() \u91ca\u653e\u4e00\u4e2a\u8d44\u6e90\u3002\u56e0\u6b64\uff0c\u5728\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8003\u8651\u54ea\u4e9b\u4e1c\u897f\u5c5e\u4e8e\u8d44\u6e90\uff0c\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6709\u54ea\u4e9b\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8003\u8651\u5728\u54ea\u4e9b\u5730\u65b9\u9700\u8981\u7b49\u5f85\uff0c\u6211\u4eec\u4e5f\u80fd\u591f\u5f97\u5230\u4e00\u4e9b\u63d0\u793a\u3002 7.1.1 Bounded-Buffer Problem \u00b6 Bounded-Buffer Problem \u7ed9\u5b9a\u4e24\u4e2a\u8fdb\u7a0b\uff1aproducer \u548c consumer\uff0c\u5b83\u4eec\u5171\u7528\u5927\u5c0f\u4e3a \\(n\\) \u7684 buffer\u3002Producer \u751f\u4ea7\u6570\u636e\u653e\u5165 buffer\uff0cconsumer \u4ece buffer \u53d6\u51fa\u6570\u636e\u4ece\u800c\u4f7f\u7528\u4e4b\u3002 \u8be5\u95ee\u9898\u9700\u8981\u4fdd\u8bc1\uff1aproducer \u4e0d\u5e94\u5f53\u5728 buffer \u6ee1\u65f6\u653e\u5165\u6570\u636e\uff0cconsumer \u4e5f\u4e0d\u5e94\u5f53\u5728 buffer \u7a7a\u65f6\u53d6\u51fa\u6570\u636e\u3002 \u9996\u5148\uff0c\u6839\u636e\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e2d\u7684\u8ba8\u8bba\uff0cproduce \u548c consume \u7684\u8fc7\u7a0b\u4f1a\u8bbf\u95ee\u5230 buffer \u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u662f critical section\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u9501\uff08\u6216\u8005\u4fe1\u53f7\u91cf\uff0c\u540e\u540c\uff09\u6765\u63a7\u5236\u5bf9 buffer \u7684\u8bbf\u95ee\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 semaphore lock = 1 ; producer () { while ( true ) { // <1> If buffer is full, wait wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); } } consumer () { while ( true ) { // <2> If buffer is empty, wait wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); } } \u4e0d\u8fc7\uff0c\u4e0a\u9762\u4e24\u5904\u6ce8\u91ca\u4e2d\u8981\u6c42\u6839\u636e buffer \u7684\u5bb9\u91cf\u51b3\u5b9a\u662f\u5426\u9700\u8981\u7b49\u5f85\u7684\u9700\u6c42\u8fd8\u6ca1\u6709\u5b9e\u73b0\u3002 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf count \u6765\u8bb0\u5f55 buffer \u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff1b\u5982\u679c\u8fd9\u6837\u5b9e\u73b0\u7684\u8bdd\uff0c\u5bf9 count \u7684\u4fee\u6539\u4e5f\u662f critical section\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u9501\u7684\u63a7\u5236\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); while ( count == BUFFER_SIZE ) ; // If buffer is full, wait add_to_buffer ( next_produced ); count ++ ; signal ( lock ); } } consumer () { while ( true ) { wait ( lock ); while ( count == 0 ) ; // If buffer is empty, wait next_consumed = take_from_buffer (); count -- ; signal ( lock ); } } \u8fd9\u79cd\u65b9\u5f0f\u7684\u5b9e\u73b0\u95ee\u9898\u662f\u663e\u7136\u7684\uff1a\u6bd4\u5982\u5f53\u524d buffer \u4e3a\u7a7a\uff0c\u5373 count \u4e3a 0\uff0c consumer \u4f1a\u5728 16 \u884c\u5904\u7b49\u5f85\uff1b\u4f46\u56e0\u4e3a\u6b64\u65f6\u5b83\u6301\u6709\u7740 lock \uff0c\u4efb\u4f55 producer \u90fd\u4e0d\u80fd produce\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7b49\u5f85\u4f1a\u6c38\u4e45\u6301\u7eed\u4e0b\u53bb\u3002\u8fd9\u8fdd\u53cd\u4e86 Progress \u548c Bounded waiting \u7684\u8981\u6c42\u3002 \u6211\u4eec\u53ef\u4ee5\u7a0d\u4f5c\u4fee\u6539\uff0c\u5f53 count \u7684\u8981\u6c42\u4e0d\u6ee1\u8db3\u65f6\uff0c\u7acb\u5373\u91ca\u653e lock \u5e76\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u5373\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); if ( count == BUFFER_SIZE ) { // If buffer is full, give up signal ( lock ); continue ; } else { add_to_buffer ( next_produced ); count ++ ; signal ( lock ); } } } consumer () { while ( true ) { wait ( lock ); if ( count == 0 ) { // If buffer is empty, give up signal ( lock ); continue ; } else { next_consumed = take_from_buffer (); count -- ; signal ( lock ); } } } \u4e5f\u5c31\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); if ( count != BUFFER_SIZE ) { add_to_buffer ( next_produced ); count ++ ; } signal ( lock ); } } consumer () { while ( true ) { wait ( lock ); if ( count != 0 ) { next_consumed = take_from_buffer (); count -- ; } signal ( lock ); } } \u4f46\u662f\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u5f3a\u5236\u4e86 busy waiting\u3002\u6211\u4eec\u5728\u524d\u4e00\u8282\u8ba8\u8bba\u8fc7\u4e86 busy waiting \u53ca\u5176\u5229\u5f0a\uff1b\u5728\u8fd9\u91cc critical section \u7684\u8fd0\u884c\u65f6\u95f4\u660e\u663e\u6bd4 context switch \u7684\u65f6\u95f4\u8981\u957f\uff0c\u56e0\u6b64\u8fd9\u91cc\u4f7f\u7528 busy waiting \u662f\u6d6a\u8d39\u65f6\u95f4\u7684\u3002 \u800c\u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4fe1\u53f7\u91cf\u505a\u4e86\u4e00\u4e9b\u5904\u7406\uff0c\u4f7f\u5f97\u5176\u7b49\u5f85\u4e0d\u518d\u662f busy waiting\uff0c\u800c\u662f\u7c7b\u4f3c\u4e8e\u7b2c 6 \u8282\u4e2d\u8bb2\u5230\u7684\u89e3\u51b3\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u4fe1\u53f7\u91cf\u6765\u89e3\u51b3\u95ee\u9898\u3002 \u9996\u5148\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e2a lock \u548c\u4e00\u4e2a eslot (empty slot\uff0c\u7a7a\u95f2 buffer \u7684\u4e2a\u6570) \u6765\u89e3\u51b3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 semaphore lock = 1 ; semaphore eslot = BUFFER_SIZE ; producer () { while ( true ) { wait ( eslot ); // if buffer is full, i.e. eslot == 0, wait // else, eslot-- wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); } } consumer () { while ( true ) { // <2> If buffer is empty, i.e. eslot == BUFFER_SIZE, wait wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); signal ( eslot ); // eslot++ } } \u7531\u4e8e eslot \u4f5c\u4e3a\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u6211\u4eec\u5bf9\u5b83 ++ \u548c -- (\u5b9e\u9645\u4e0a\u662f wait \u548c signal ) \u662f atomic \u7684\uff0c\u4e0d\u9700\u8981\u8003\u8651\u540c\u6b65\u95ee\u9898\u3002 \u4f46\u662f\uff0c16 \u884c\u5904\u6211\u4eec\u5e0c\u671b\u8ba9 eslot == BUFFER_SIZE \u7684\u65f6\u5019\u5faa\u73af\u7b49\u5f85\uff0c\u4e0d\u8fc7\u4fe1\u53f7\u91cf\u672c\u8eab\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684 semaphore fslot (full slot) \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 semaphore lock = 1 ; semaphore eslot = BUFFER_SIZE ; semaphore fslot = 0 ; producer () { while ( true ) { wait ( eslot ); // if buffer is full, i.e. eslot == 0, wait // else, eslot-- wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); signal ( fslot ); // fslot++ } } consumer () { while ( true ) { wait ( fslot ); // if buffer is empty, i.e. fslot == 0, wait // else, fslot-- wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); signal ( eslot ); // eslot++ } } \u4e8b\u5b9e\u4e0a\uff0c\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5206\u6790\u4e24\u5904\u9700\u8981 wait \u7684\u60c5\u51b5\uff08\u5373 producer \u5728 buffer \u6ee1\u65f6\u3001consumer \u5728 buffer \u7a7a\u65f6\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u4f7f\u7528\u4fe1\u53f7\u91cf\u7684\u63d0\u793a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e producer \u6765\u8bf4\uff0c\u300c\u7a7a\u683c\u5b50\u300d\u662f\u5b83\u9700\u8981\u7684\u8d44\u6e90\uff1b\u800c\u5bf9\u4e8e consumer \u6765\u8bf4\uff0c\u300c\u6709\u4e1c\u897f\u7684\u683c\u5b50\u300d\u662f\u5b83\u9700\u8981\u7684\u8d44\u6e90\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u6837\u7684\u63d0\u793a\u6765\u8bbe\u8ba1\u4fe1\u53f7\u91cf\u3002 \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f wait \u4e4b\u95f4\u7684\u987a\u5e8f\u3002\u4f8b\u5982\u5982\u679c\u5c06 wait(lock) \u548c wait(fslot) \u7684\u987a\u5e8f\u8c03\u8f6c\u8fc7\u6765\uff0c\u5c31\u4f1a\u53d1\u751f\u548c\u524d\u9762\u63d0\u5230\u7684\u60c5\u51b5\u4e00\u6837\u7684\u6b7b\u9501\u3002 7.1.2 Readers-Writers Problem \u00b6 Readers-Writers Problem \u5bf9\u4e00\u4e2a\u6570\u636e\uff0creaders \u8bfb\uff0cwriters \u8bfb\u548c\u5199\u3002 \u8bbe\u8ba1\u65b9\u6848\u4fdd\u8bc1\uff1a\u591a\u4e2a readers \u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\uff0c\u4f46\u662f writer \u8fdb\u884c\u8bfb\u5199\u65f6\u4e0d\u80fd\u6709\u5176\u4ed6 writers \u548c readers\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7684\u65b9\u6848\u5927\u6982\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 writer () { while ( true ) { // if there is any reader or any other writer, wait read_and_write (); } } reader () { while ( true ) { // if there is any writer, wait read (); } } \u5206\u6790\u8fd9\u91cc\u6240\u9700\u8981\u7684\u4fe1\u53f7\u91cf\uff0c\u6216\u8005\u8bf4\u300c\u8d44\u6e90\u300d\u3002\u5f53\u4e00\u4e2a reader \u8fdb\u5165 critical section \u65f6\uff0c\u5b83\u4f1a\u62ff\u8d70 writer \u7684\u300c\u8d44\u6e90\u300d\uff0c\u4f46\u662f\u5f53 writer \u7684\u300c\u8d44\u6e90\u300d\u4e0d\u53ef\u7528\u65f6\uff0creader \u5e76\u4e0d\u9700\u8981\u7b49\u5f85\uff1b\u800c\u5f53\u4e00\u4e2a writer \u8fdb\u5165 critical section \u65f6\uff0c\u5b83\u4f1a\u7b49\u5f85\u5e76\u62ff\u8d70\u516c\u5171\u7684\u300c\u8d44\u6e90\u300d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u6982\u7684\u89e3\u51b3\u65b9\u6848\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 semaphore write_lock = 1 ; semaphore public_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { if ( write_lock available ) // take write_lock but not wait wait ( write_lock ); wait ( public_lock ); // guarantee no writers read (); if ( no other readers reading ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( public_lock ); } } \u53ef\u4ee5\u770b\u5230\uff0c reader() \u90e8\u5206\u6709\u4e24\u4e2a\u7528\u4f2a\u4ee3\u7801\u8868\u793a\u7684\u7247\u6bb5\uff0c\u7528\u9ad8\u4eae\u8868\u793a\u3002\u8fd9\u4e24\u4e2a\u7247\u6bb5\u7684\u96be\u70b9\u5206\u522b\u5728\u4e8e\uff1a\u6211\u4eec\u6682\u65f6\u6ca1\u6709\u624b\u6bb5\u4e0d\u963b\u585e\u5730\u68c0\u67e5\u67d0\u4e2a\u4fe1\u53f7\u91cf\u662f\u5426\u975e 0\uff1b\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u77e5\u9053\u662f\u5426\u5b58\u5728\u5176\u4ed6\u7684 readers\u3002 \u540e\u9762\u8fd9\u4e2a\u95ee\u9898\u6bd4\u8f83\u597d\u89e3\u51b3\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6574\u578b reader_count \u7528\u6765\u4fdd\u5b58\u6709\u591a\u5c11\u4e2a readers\uff0c\u5f53\u5176\u503c\u53d8\u4e3a 0 \u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u5176\u4ed6 readers \u5728\u8bfb\u4e86\u3002\u6211\u4eec\u540c\u65f6\u589e\u52a0\u4fdd\u8bc1\u5176\u540c\u6b65\u7684\u4fe1\u53f7\u91cf\u3002\u5373\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 semaphore write_lock = 1 ; semaphore public_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { if ( write_lock available ) // take write_lock but not wait wait ( write_lock ); wait ( public_lock ); // guarantee no writers wait ( reader_count_lock ); reader_count ++ ; signal ( reader_count_lock ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); signal ( public_lock ); } } \u800c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u300c\u5f53 write_lock \u6ca1\u6709\u88ab\u5360\u6709\u65f6\uff0c\u83b7\u53d6\u4e4b\uff1b\u4f46\u662f\u5982\u679c\u5df2\u7ecf\u88ab\u5360\u6709\uff0c\u4e0d\u5e94\u5f53\u7b49\u5f85\u300d\uff0c\u53c8\u8be5\u5982\u4f55\u89e3\u51b3\u5462\uff1f\u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4ecd\u7136\u5e94\u8be5\u662f if(cond) wait(write_lock); \u7684\u5f62\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5176\u4ed6\u83b7\u53d6\u4e00\u4e2a\u9501\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u5173\u952e\u5c31\u5728\u4e8e\u8fd9\u4e2a\u6761\u4ef6 cond \u4e86\u3002 \u65e2\u7136\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u4e0d\u963b\u585e\u5730\u5224\u65ad\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u662f\u5426\u4e3a 0\uff0c\u6211\u4eec\u4e0d\u59a8\u56de\u5230\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8ba9\u5b83\u53d8\u4e3a 0 \u7684\u8fd9\u4e2a\u95ee\u9898\u4e0a\u6765\u3002\u5f88\u663e\u7136\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\uff0c\u8ba9 \u7b2c\u4e00\u4e2a reader \u5728 entry section \u4e2d\u62ff\u8d70 write_lock \uff0c\u800c\u540e\u7eed\u7684 reader \u4e0d\u5e94\u5728\u6b64\u963b\u585e\u3002\uff08\u6ce8\u610f\uff0c\u5f53 write_lock \u88ab\u91ca\u653e\u540e\uff0c\u4e0b\u4e00\u6b21\u6765\u7684 reader \u4e5f\u662f\u300c\u7b2c\u4e00\u4e2a\u300d\u3002\uff09\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u9700\u8981\u5224\u65ad\u7684\u6838\u5fc3\u53ef\u4ee5\u662f\u300c\u7b2c\u4e00\u4e2a\u300dreader\uff0c\u8fd9\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u4e4b\u524d\u7684 reader_count \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 semaphore write_lock = 1 ; semaphore public_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) // first reader take write_lock wait ( write_lock ); signal ( reader_count_lock ); wait ( public_lock ); // guarantee no writers read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); signal ( public_lock ); } } \u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u8bc1\u660e\u5176\u80fd\u6ee1\u8db3\u8981\u6c42\uff1a \u5f53\u524d\u6709 writer \u5728 CS\uff1a \u65b0\u7684 writer \u4f1a\u5728 L8 wait(write_lock) \u88ab\u963b\u585e\uff1b \u63a5\u4e0b\u6765\u7684\u7b2c\u4e00\u4e2a reader \u4f1a\u5728 L21 wait(write_lock) \u88ab\u963b\u585e\uff0c\u5176\u4f59 reader \u4f1a\u5728 L18 wait(reader_count_lock) \u88ab\u963b\u585e\uff08\u5f53 writer \u9000\u51fa CS \u4e4b\u540e\uff0c\u8fd9\u4e9b reader \u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff09\uff1b \u5f53\u524d\u6709 reader \u5728 CS\uff1a \u65b0\u7684 writer \u4f1a\u5728 L8 wait(write_lock) \u88ab\u963b\u585e\uff1b \u63a5\u4e0b\u6765\u7684 reader \u53ea\u4f1a\u5728 L18 \u4ee5\u53ca L28 \u5904\u88ab\u77ed\u6682\u963b\u585e\uff0c\u4f46\u662f\u5728 reader_count \u5927\u4e8e 1 \u7684\u524d\u63d0\u4e0b\uff0c\u8fd9\u4e24\u5904\u5bf9\u5e94\u7684 CS \u90fd\u80fd\u5728\u6709\u9650\u65f6\u95f4\u5185\u5b8c\u6210\uff1b \u5f53\u524d\u6ca1\u6709\u8fdb\u7a0b\u5728 CS\uff0c\u5982\u679c\u6709\u4e00\u4e2a writer \u548c\u4e00\u4e2a reader \u540c\u65f6\u8fdb\u5165\uff0c\u90a3\u4e48\u5fc5\u6709\u5176\u4e2d\u4e4b\u4e00\u88ab wait(write_lock) \u963b\u585e\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u8ff0\u89e3\u6cd5\u80fd\u591f\u6ee1\u8db3 Critical-Section Problem \u7684\u57fa\u672c\u8981\u6c42\uff0c\u540c\u65f6\u80fd\u591f\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0a\u8ff0 1.b. \u6307\u51fa\uff0creader \u4f1a\u88ab wait(write_lock) \u963b\u585e\u800c\u4e0d\u662f\u88ab public_lock \u963b\u585e\uff0c\u8fd9\u548c\u6211\u4eec\u6700\u521d\u7684\u60f3\u6cd5\u4e0d\u540c\u3002\u4e8b\u5b9e\u786e\u5b9e\u5982\u6b64\uff1a\u5728\u6211\u4eec\u5f53\u521d\u7684\u8bbe\u60f3\u4e2d\uff0creader \u5e94\u5f53\u76f4\u63a5\u53d6\u8d70 write_lock \u800c\u4e0d\u5e94\u88ab\u5176\u963b\u585e\uff0c\u56e0\u800c\u9700\u8981\u4e00\u4e2a public_lock \u7528\u6765\u963b\u585e\u6709 writer \u60c5\u5f62\u4e0b\u7684 reader\u3002\u4f46\u662f\u7531\u4e8e\u4fe1\u53f7\u91cf\u53d6\u5f97\u5fc5\u987b\u4f7f\u7528\u539f\u8bed wait \uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u963b\u585e\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u53cd\u800c\u5e2e\u52a9\u6211\u4eec\u4ee3\u66ff\u4e86 public_lock \u7684\u4f5c\u7528\u3002\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u53bb\u6389\u5b83\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u4ee3\u7801\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 semaphore write_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); read_and_write (); signal ( write_lock ); } } reader () { while ( true ) { wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) // first reader take write_lock wait ( write_lock ); signal ( reader_count_lock ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); } } \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u5b9e\u73b0\u7684\u7ed3\u679c\u662f\uff1a\u5f53\u5b58\u5728\u8bfb\u8fdb\u7a0b\u65f6\uff0c\u5199\u8fdb\u7a0b\u5c06\u88ab\u5ef6\u8fdf\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5199\u8fdb\u7a0b\u53d1\u751f starvation \u3002 \u5982\u679c\u5e0c\u671b\u5199\u8fdb\u7a0b\u4f18\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u89c4\u5b9a\uff0c\u5982\u679c\u5199\u8fdb\u7a0b ready\uff0c\u90a3\u4e48\u5176\u4ed6\u8bfb\u8fdb\u7a0b\u5e94\u5f53\u7b49\u5f85\uff0c\u76f4\u5230\u5199\u8fdb\u7a0b\u7ed3\u675f\uff1b\u5373\u4f7f\u5f97\u5199\u8fdb\u7a0b\u5c3d\u53ef\u80fd\u65e9\u5730\u5f00\u59cb\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u65b0\u589e\u4e00\u4e2a\u4fe1\u53f7\u91cf\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 semaphore write_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; semaphore writer_first = 1 ; writer () { while ( true ) { wait ( writer_first ); wait ( write_lock ); read_and_write (); signal ( write_lock ); signal ( writer_first ); } } reader () { while ( true ) { wait ( writer_first ); wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) wait ( write_lock ); signal ( reader_count_lock ); signal ( writer_first ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) signal ( write_lock ); signal ( reader_count_lock ); } } 7.1.3 Dining-Philosophers Problem \u00b6 Dining-Philosophers Problem 5 \u4e2a\u54f2\u5b66\u5bb6\u4e00\u8d77\u5403\u996d\uff01\u6bcf\u4e24\u4e2a\u54f2\u5b66\u5bb6\u4e4b\u95f4\u6709\u4e00\u6839\u7b77\u5b50\uff0c\u6bcf\u4e2a\u4eba\u4e00\u6b21\u53ef\u4ee5\u62ff\u8d77\u6765\u4e00\u6839\u7b77\u5b50\uff0c\u62ff\u5230\u4e24\u6839\u7b77\u5b50\u7684\u5c31\u53ef\u4ee5\u5403\u4e00\u6bb5\u65f6\u95f4\u3002\u5403\u5b8c\u601d\u8003\u4e00\u6bb5\u65f6\u95f4\u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u89e3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < semaphore > chopstick ( 5 , 1 ); // initialize semaphores to all 1 philosopher ( int index ) { while ( true ) { wait ( chopstick [ i ]); wait ( chopstick [( i + 1 ) % 5 ]); eat (); signal ( chopstick [ i ]); signal ( chopstick [( i + 1 ) % 5 ]); think (); } } \u95ee\u9898\u662f\uff0c\u53ef\u80fd\u67d0\u65f6\u523b\u6bcf\u4e2a\u4eba\u540c\u65f6\u62ff\u8d77\u5de6\u8fb9\u7684\u7b77\u5b50\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6b7b\u9501\u3002 \u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u662f\uff0c\u53ea\u5141\u8bb8\u540c\u65f6\u62ff\u8d77\u4e24\u6839\u7b77\u5b50\uff1b\u8fd9\u79cd\u65b9\u6848\u7684\u5b9e\u73b0\u662f\uff0c\u8f6e\u6d41\u8be2\u95ee\u6bcf\u4e2a\u4eba\u662f\u5426\u80fd\u591f\u62ff\u8d77\u4e24\u6839\u7b77\u5b50\uff0c\u5982\u679c\u80fd\u5219\u62ff\u8d77\uff0c\u5982\u679c\u4e0d\u80fd\u5219\u9700\u8981\u7b49\u5f85\u90a3\u4e9b\u7b77\u5b50\u653e\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector < semaphore > chopstick ( 5 , 1 ); // initialize semaphores to all 1 semaphore lock = 1 ; philosopher ( int index ) { while ( true ) { wait ( lock ); wait ( chopstick [ i ]); wait ( chopstick [( i + 1 ) % 5 ]); signal ( lock ); eat (); signal ( chopstick [ i ]); signal ( chopstick [( i + 1 ) % 5 ]); think (); } } \u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u5947\u6570\u53f7\u4eba\u5148\u62ff\u5de6\u8fb9\u7b77\u5b50\uff0c\u5076\u6570\u53f7\u4eba\u5148\u62ff\u53f3\u8fb9\u7b77\u5b50\uff0c\u8fd9\u6837\u4e5f\u80fd\u907f\u514d\u6b7b\u9501\u3002 7.2 Linux Sync \u00b6 2.6 \u4ee5\u524d\u7684\u7248\u672c\u7684 kernel \u4e2d\u901a\u8fc7\u7981\u7528\u4e2d\u65ad\u6765\u5b9e\u73b0\u4e00\u4e9b\u77ed\u7684 critical section\uff1b2.6 \u53ca\u4e4b\u540e\u7684\u7248\u672c\u7684 kernel \u662f\u62a2\u5360\u5f0f\u7684\u3002 Linux \u63d0\u4f9b\uff1a Atomic integers Spinlocks Semaphores Reader-writer locks 7.3 POSIX Sync \u00b6","title":"7 \u7ecf\u5178\u540c\u6b65\u95ee\u9898"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#7-synchronization-examples","text":"","title":"7 Synchronization Examples"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#71-\u7ecf\u5178\u540c\u6b65\u95ee\u9898","text":"\u4e00\u822c\u6211\u4eec\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u4e3a\u4fe1\u53f7\u91cf\u76f8\u5bf9\u6765\u8bf4\u529f\u80fd\u66f4\u591a\uff0c\u800c\u4e14\u5f88\u591a\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4fe1\u53f7\u91cf\u505a\u4e86\u66f4\u591a\u8bbe\u8ba1\uff0c\u7528\u6765\u907f\u514d busy waiting \u7b49\u95ee\u9898\u3002 \u4fe1\u53f7\u91cf\u7684\u903b\u8f91\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff1a\u4e00\u4e2a\u4fe1\u53f7\u91cf\u7528\u6765\u8868\u793a \u4e00\u7c7b\u300c\u8d44\u6e90\u300d\u7684\u4f59\u91cf \uff1b wait() \u7b49\u5f85\u5230\u5176\u6709\u4f59\u91cf\u65f6\u4ece\u4e2d\u53d6\u8d70\u4e00\u4e2a\uff0c\u800c signal() \u91ca\u653e\u4e00\u4e2a\u8d44\u6e90\u3002\u56e0\u6b64\uff0c\u5728\u7528\u4fe1\u53f7\u91cf\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u8003\u8651\u54ea\u4e9b\u4e1c\u897f\u5c5e\u4e8e\u8d44\u6e90\uff0c\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u6709\u54ea\u4e9b\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8003\u8651\u5728\u54ea\u4e9b\u5730\u65b9\u9700\u8981\u7b49\u5f85\uff0c\u6211\u4eec\u4e5f\u80fd\u591f\u5f97\u5230\u4e00\u4e9b\u63d0\u793a\u3002","title":"7.1 \u7ecf\u5178\u540c\u6b65\u95ee\u9898"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#711-bounded-buffer-problem","text":"Bounded-Buffer Problem \u7ed9\u5b9a\u4e24\u4e2a\u8fdb\u7a0b\uff1aproducer \u548c consumer\uff0c\u5b83\u4eec\u5171\u7528\u5927\u5c0f\u4e3a \\(n\\) \u7684 buffer\u3002Producer \u751f\u4ea7\u6570\u636e\u653e\u5165 buffer\uff0cconsumer \u4ece buffer \u53d6\u51fa\u6570\u636e\u4ece\u800c\u4f7f\u7528\u4e4b\u3002 \u8be5\u95ee\u9898\u9700\u8981\u4fdd\u8bc1\uff1aproducer \u4e0d\u5e94\u5f53\u5728 buffer \u6ee1\u65f6\u653e\u5165\u6570\u636e\uff0cconsumer \u4e5f\u4e0d\u5e94\u5f53\u5728 buffer \u7a7a\u65f6\u53d6\u51fa\u6570\u636e\u3002 \u9996\u5148\uff0c\u6839\u636e\u6211\u4eec\u5728\u524d\u4e00\u8282\u4e2d\u7684\u8ba8\u8bba\uff0cproduce \u548c consume \u7684\u8fc7\u7a0b\u4f1a\u8bbf\u95ee\u5230 buffer \u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u662f critical section\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u9501\uff08\u6216\u8005\u4fe1\u53f7\u91cf\uff0c\u540e\u540c\uff09\u6765\u63a7\u5236\u5bf9 buffer \u7684\u8bbf\u95ee\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 semaphore lock = 1 ; producer () { while ( true ) { // <1> If buffer is full, wait wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); } } consumer () { while ( true ) { // <2> If buffer is empty, wait wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); } } \u4e0d\u8fc7\uff0c\u4e0a\u9762\u4e24\u5904\u6ce8\u91ca\u4e2d\u8981\u6c42\u6839\u636e buffer \u7684\u5bb9\u91cf\u51b3\u5b9a\u662f\u5426\u9700\u8981\u7b49\u5f85\u7684\u9700\u6c42\u8fd8\u6ca1\u6709\u5b9e\u73b0\u3002 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf count \u6765\u8bb0\u5f55 buffer \u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff1b\u5982\u679c\u8fd9\u6837\u5b9e\u73b0\u7684\u8bdd\uff0c\u5bf9 count \u7684\u4fee\u6539\u4e5f\u662f critical section\uff0c\u56e0\u6b64\u4e5f\u9700\u8981\u9501\u7684\u63a7\u5236\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); while ( count == BUFFER_SIZE ) ; // If buffer is full, wait add_to_buffer ( next_produced ); count ++ ; signal ( lock ); } } consumer () { while ( true ) { wait ( lock ); while ( count == 0 ) ; // If buffer is empty, wait next_consumed = take_from_buffer (); count -- ; signal ( lock ); } } \u8fd9\u79cd\u65b9\u5f0f\u7684\u5b9e\u73b0\u95ee\u9898\u662f\u663e\u7136\u7684\uff1a\u6bd4\u5982\u5f53\u524d buffer \u4e3a\u7a7a\uff0c\u5373 count \u4e3a 0\uff0c consumer \u4f1a\u5728 16 \u884c\u5904\u7b49\u5f85\uff1b\u4f46\u56e0\u4e3a\u6b64\u65f6\u5b83\u6301\u6709\u7740 lock \uff0c\u4efb\u4f55 producer \u90fd\u4e0d\u80fd produce\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7b49\u5f85\u4f1a\u6c38\u4e45\u6301\u7eed\u4e0b\u53bb\u3002\u8fd9\u8fdd\u53cd\u4e86 Progress \u548c Bounded waiting \u7684\u8981\u6c42\u3002 \u6211\u4eec\u53ef\u4ee5\u7a0d\u4f5c\u4fee\u6539\uff0c\u5f53 count \u7684\u8981\u6c42\u4e0d\u6ee1\u8db3\u65f6\uff0c\u7acb\u5373\u91ca\u653e lock \u5e76\u8fdb\u5165\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u5373\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); if ( count == BUFFER_SIZE ) { // If buffer is full, give up signal ( lock ); continue ; } else { add_to_buffer ( next_produced ); count ++ ; signal ( lock ); } } } consumer () { while ( true ) { wait ( lock ); if ( count == 0 ) { // If buffer is empty, give up signal ( lock ); continue ; } else { next_consumed = take_from_buffer (); count -- ; signal ( lock ); } } } \u4e5f\u5c31\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 semaphore lock = 1 ; int count = 0 ; producer () { while ( true ) { wait ( lock ); if ( count != BUFFER_SIZE ) { add_to_buffer ( next_produced ); count ++ ; } signal ( lock ); } } consumer () { while ( true ) { wait ( lock ); if ( count != 0 ) { next_consumed = take_from_buffer (); count -- ; } signal ( lock ); } } \u4f46\u662f\uff0c\u8fd9\u79cd\u5b9e\u73b0\u65b9\u6cd5\u5f3a\u5236\u4e86 busy waiting\u3002\u6211\u4eec\u5728\u524d\u4e00\u8282\u8ba8\u8bba\u8fc7\u4e86 busy waiting \u53ca\u5176\u5229\u5f0a\uff1b\u5728\u8fd9\u91cc critical section \u7684\u8fd0\u884c\u65f6\u95f4\u660e\u663e\u6bd4 context switch \u7684\u65f6\u95f4\u8981\u957f\uff0c\u56e0\u6b64\u8fd9\u91cc\u4f7f\u7528 busy waiting \u662f\u6d6a\u8d39\u65f6\u95f4\u7684\u3002 \u800c\u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u8bb8\u591a\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4fe1\u53f7\u91cf\u505a\u4e86\u4e00\u4e9b\u5904\u7406\uff0c\u4f7f\u5f97\u5176\u7b49\u5f85\u4e0d\u518d\u662f busy waiting\uff0c\u800c\u662f\u7c7b\u4f3c\u4e8e\u7b2c 6 \u8282\u4e2d\u8bb2\u5230\u7684\u89e3\u51b3\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u4fe1\u53f7\u91cf\u6765\u89e3\u51b3\u95ee\u9898\u3002 \u9996\u5148\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u4e00\u4e2a lock \u548c\u4e00\u4e2a eslot (empty slot\uff0c\u7a7a\u95f2 buffer \u7684\u4e2a\u6570) \u6765\u89e3\u51b3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 semaphore lock = 1 ; semaphore eslot = BUFFER_SIZE ; producer () { while ( true ) { wait ( eslot ); // if buffer is full, i.e. eslot == 0, wait // else, eslot-- wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); } } consumer () { while ( true ) { // <2> If buffer is empty, i.e. eslot == BUFFER_SIZE, wait wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); signal ( eslot ); // eslot++ } } \u7531\u4e8e eslot \u4f5c\u4e3a\u4e00\u4e2a\u4fe1\u53f7\u91cf\uff0c\u6211\u4eec\u5bf9\u5b83 ++ \u548c -- (\u5b9e\u9645\u4e0a\u662f wait \u548c signal ) \u662f atomic \u7684\uff0c\u4e0d\u9700\u8981\u8003\u8651\u540c\u6b65\u95ee\u9898\u3002 \u4f46\u662f\uff0c16 \u884c\u5904\u6211\u4eec\u5e0c\u671b\u8ba9 eslot == BUFFER_SIZE \u7684\u65f6\u5019\u5faa\u73af\u7b49\u5f85\uff0c\u4e0d\u8fc7\u4fe1\u53f7\u91cf\u672c\u8eab\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684 semaphore fslot (full slot) \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 semaphore lock = 1 ; semaphore eslot = BUFFER_SIZE ; semaphore fslot = 0 ; producer () { while ( true ) { wait ( eslot ); // if buffer is full, i.e. eslot == 0, wait // else, eslot-- wait ( lock ); add_to_buffer ( next_produced ); signal ( lock ); signal ( fslot ); // fslot++ } } consumer () { while ( true ) { wait ( fslot ); // if buffer is empty, i.e. fslot == 0, wait // else, fslot-- wait ( lock ); next_consumed = take_from_buffer (); signal ( lock ); signal ( eslot ); // eslot++ } } \u4e8b\u5b9e\u4e0a\uff0c\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5206\u6790\u4e24\u5904\u9700\u8981 wait \u7684\u60c5\u51b5\uff08\u5373 producer \u5728 buffer \u6ee1\u65f6\u3001consumer \u5728 buffer \u7a7a\u65f6\uff09\u5c31\u53ef\u4ee5\u5f97\u5230\u4f7f\u7528\u4fe1\u53f7\u91cf\u7684\u63d0\u793a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e producer \u6765\u8bf4\uff0c\u300c\u7a7a\u683c\u5b50\u300d\u662f\u5b83\u9700\u8981\u7684\u8d44\u6e90\uff1b\u800c\u5bf9\u4e8e consumer \u6765\u8bf4\uff0c\u300c\u6709\u4e1c\u897f\u7684\u683c\u5b50\u300d\u662f\u5b83\u9700\u8981\u7684\u8d44\u6e90\u3002\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u6837\u7684\u63d0\u793a\u6765\u8bbe\u8ba1\u4fe1\u53f7\u91cf\u3002 \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f wait \u4e4b\u95f4\u7684\u987a\u5e8f\u3002\u4f8b\u5982\u5982\u679c\u5c06 wait(lock) \u548c wait(fslot) \u7684\u987a\u5e8f\u8c03\u8f6c\u8fc7\u6765\uff0c\u5c31\u4f1a\u53d1\u751f\u548c\u524d\u9762\u63d0\u5230\u7684\u60c5\u51b5\u4e00\u6837\u7684\u6b7b\u9501\u3002","title":"7.1.1 Bounded-Buffer Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#712-readers-writers-problem","text":"Readers-Writers Problem \u5bf9\u4e00\u4e2a\u6570\u636e\uff0creaders \u8bfb\uff0cwriters \u8bfb\u548c\u5199\u3002 \u8bbe\u8ba1\u65b9\u6848\u4fdd\u8bc1\uff1a\u591a\u4e2a readers \u53ef\u4ee5\u540c\u65f6\u8bfb\u53d6\uff0c\u4f46\u662f writer \u8fdb\u884c\u8bfb\u5199\u65f6\u4e0d\u80fd\u6709\u5176\u4ed6 writers \u548c readers\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7684\u65b9\u6848\u5927\u6982\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 writer () { while ( true ) { // if there is any reader or any other writer, wait read_and_write (); } } reader () { while ( true ) { // if there is any writer, wait read (); } } \u5206\u6790\u8fd9\u91cc\u6240\u9700\u8981\u7684\u4fe1\u53f7\u91cf\uff0c\u6216\u8005\u8bf4\u300c\u8d44\u6e90\u300d\u3002\u5f53\u4e00\u4e2a reader \u8fdb\u5165 critical section \u65f6\uff0c\u5b83\u4f1a\u62ff\u8d70 writer \u7684\u300c\u8d44\u6e90\u300d\uff0c\u4f46\u662f\u5f53 writer \u7684\u300c\u8d44\u6e90\u300d\u4e0d\u53ef\u7528\u65f6\uff0creader \u5e76\u4e0d\u9700\u8981\u7b49\u5f85\uff1b\u800c\u5f53\u4e00\u4e2a writer \u8fdb\u5165 critical section \u65f6\uff0c\u5b83\u4f1a\u7b49\u5f85\u5e76\u62ff\u8d70\u516c\u5171\u7684\u300c\u8d44\u6e90\u300d\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5927\u6982\u7684\u89e3\u51b3\u65b9\u6848\u7c7b\u4f3c\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 semaphore write_lock = 1 ; semaphore public_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { if ( write_lock available ) // take write_lock but not wait wait ( write_lock ); wait ( public_lock ); // guarantee no writers read (); if ( no other readers reading ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( public_lock ); } } \u53ef\u4ee5\u770b\u5230\uff0c reader() \u90e8\u5206\u6709\u4e24\u4e2a\u7528\u4f2a\u4ee3\u7801\u8868\u793a\u7684\u7247\u6bb5\uff0c\u7528\u9ad8\u4eae\u8868\u793a\u3002\u8fd9\u4e24\u4e2a\u7247\u6bb5\u7684\u96be\u70b9\u5206\u522b\u5728\u4e8e\uff1a\u6211\u4eec\u6682\u65f6\u6ca1\u6709\u624b\u6bb5\u4e0d\u963b\u585e\u5730\u68c0\u67e5\u67d0\u4e2a\u4fe1\u53f7\u91cf\u662f\u5426\u975e 0\uff1b\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u77e5\u9053\u662f\u5426\u5b58\u5728\u5176\u4ed6\u7684 readers\u3002 \u540e\u9762\u8fd9\u4e2a\u95ee\u9898\u6bd4\u8f83\u597d\u89e3\u51b3\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u6574\u578b reader_count \u7528\u6765\u4fdd\u5b58\u6709\u591a\u5c11\u4e2a readers\uff0c\u5f53\u5176\u503c\u53d8\u4e3a 0 \u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u5176\u4ed6 readers \u5728\u8bfb\u4e86\u3002\u6211\u4eec\u540c\u65f6\u589e\u52a0\u4fdd\u8bc1\u5176\u540c\u6b65\u7684\u4fe1\u53f7\u91cf\u3002\u5373\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 semaphore write_lock = 1 ; semaphore public_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { if ( write_lock available ) // take write_lock but not wait wait ( write_lock ); wait ( public_lock ); // guarantee no writers wait ( reader_count_lock ); reader_count ++ ; signal ( reader_count_lock ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); signal ( public_lock ); } } \u800c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e0c\u671b\u300c\u5f53 write_lock \u6ca1\u6709\u88ab\u5360\u6709\u65f6\uff0c\u83b7\u53d6\u4e4b\uff1b\u4f46\u662f\u5982\u679c\u5df2\u7ecf\u88ab\u5360\u6709\uff0c\u4e0d\u5e94\u5f53\u7b49\u5f85\u300d\uff0c\u53c8\u8be5\u5982\u4f55\u89e3\u51b3\u5462\uff1f\u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4ecd\u7136\u5e94\u8be5\u662f if(cond) wait(write_lock); \u7684\u5f62\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5176\u4ed6\u83b7\u53d6\u4e00\u4e2a\u9501\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u5173\u952e\u5c31\u5728\u4e8e\u8fd9\u4e2a\u6761\u4ef6 cond \u4e86\u3002 \u65e2\u7136\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u4e0d\u963b\u585e\u5730\u5224\u65ad\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u662f\u5426\u4e3a 0\uff0c\u6211\u4eec\u4e0d\u59a8\u56de\u5230\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8ba9\u5b83\u53d8\u4e3a 0 \u7684\u8fd9\u4e2a\u95ee\u9898\u4e0a\u6765\u3002\u5f88\u663e\u7136\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\uff0c\u8ba9 \u7b2c\u4e00\u4e2a reader \u5728 entry section \u4e2d\u62ff\u8d70 write_lock \uff0c\u800c\u540e\u7eed\u7684 reader \u4e0d\u5e94\u5728\u6b64\u963b\u585e\u3002\uff08\u6ce8\u610f\uff0c\u5f53 write_lock \u88ab\u91ca\u653e\u540e\uff0c\u4e0b\u4e00\u6b21\u6765\u7684 reader \u4e5f\u662f\u300c\u7b2c\u4e00\u4e2a\u300d\u3002\uff09\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u9700\u8981\u5224\u65ad\u7684\u6838\u5fc3\u53ef\u4ee5\u662f\u300c\u7b2c\u4e00\u4e2a\u300dreader\uff0c\u8fd9\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u4e4b\u524d\u7684 reader_count \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 semaphore write_lock = 1 ; semaphore public_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); // guarantee no readers wait ( public_lock ); // guarantee no readers or other writers read_and_write (); signal ( public_lock ); signal ( write_lock ); } } reader () { while ( true ) { wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) // first reader take write_lock wait ( write_lock ); signal ( reader_count_lock ); wait ( public_lock ); // guarantee no writers read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); signal ( public_lock ); } } \u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u8bc1\u660e\u5176\u80fd\u6ee1\u8db3\u8981\u6c42\uff1a \u5f53\u524d\u6709 writer \u5728 CS\uff1a \u65b0\u7684 writer \u4f1a\u5728 L8 wait(write_lock) \u88ab\u963b\u585e\uff1b \u63a5\u4e0b\u6765\u7684\u7b2c\u4e00\u4e2a reader \u4f1a\u5728 L21 wait(write_lock) \u88ab\u963b\u585e\uff0c\u5176\u4f59 reader \u4f1a\u5728 L18 wait(reader_count_lock) \u88ab\u963b\u585e\uff08\u5f53 writer \u9000\u51fa CS \u4e4b\u540e\uff0c\u8fd9\u4e9b reader \u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff09\uff1b \u5f53\u524d\u6709 reader \u5728 CS\uff1a \u65b0\u7684 writer \u4f1a\u5728 L8 wait(write_lock) \u88ab\u963b\u585e\uff1b \u63a5\u4e0b\u6765\u7684 reader \u53ea\u4f1a\u5728 L18 \u4ee5\u53ca L28 \u5904\u88ab\u77ed\u6682\u963b\u585e\uff0c\u4f46\u662f\u5728 reader_count \u5927\u4e8e 1 \u7684\u524d\u63d0\u4e0b\uff0c\u8fd9\u4e24\u5904\u5bf9\u5e94\u7684 CS \u90fd\u80fd\u5728\u6709\u9650\u65f6\u95f4\u5185\u5b8c\u6210\uff1b \u5f53\u524d\u6ca1\u6709\u8fdb\u7a0b\u5728 CS\uff0c\u5982\u679c\u6709\u4e00\u4e2a writer \u548c\u4e00\u4e2a reader \u540c\u65f6\u8fdb\u5165\uff0c\u90a3\u4e48\u5fc5\u6709\u5176\u4e2d\u4e4b\u4e00\u88ab wait(write_lock) \u963b\u585e\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0a\u8ff0\u89e3\u6cd5\u80fd\u591f\u6ee1\u8db3 Critical-Section Problem \u7684\u57fa\u672c\u8981\u6c42\uff0c\u540c\u65f6\u80fd\u591f\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002 \u4e0d\u8fc7\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0a\u8ff0 1.b. \u6307\u51fa\uff0creader \u4f1a\u88ab wait(write_lock) \u963b\u585e\u800c\u4e0d\u662f\u88ab public_lock \u963b\u585e\uff0c\u8fd9\u548c\u6211\u4eec\u6700\u521d\u7684\u60f3\u6cd5\u4e0d\u540c\u3002\u4e8b\u5b9e\u786e\u5b9e\u5982\u6b64\uff1a\u5728\u6211\u4eec\u5f53\u521d\u7684\u8bbe\u60f3\u4e2d\uff0creader \u5e94\u5f53\u76f4\u63a5\u53d6\u8d70 write_lock \u800c\u4e0d\u5e94\u88ab\u5176\u963b\u585e\uff0c\u56e0\u800c\u9700\u8981\u4e00\u4e2a public_lock \u7528\u6765\u963b\u585e\u6709 writer \u60c5\u5f62\u4e0b\u7684 reader\u3002\u4f46\u662f\u7531\u4e8e\u4fe1\u53f7\u91cf\u53d6\u5f97\u5fc5\u987b\u4f7f\u7528\u539f\u8bed wait \uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u963b\u585e\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u53cd\u800c\u5e2e\u52a9\u6211\u4eec\u4ee3\u66ff\u4e86 public_lock \u7684\u4f5c\u7528\u3002\u6240\u4ee5\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u53bb\u6389\u5b83\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u4ee3\u7801\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 semaphore write_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; writer () { while ( true ) { wait ( write_lock ); read_and_write (); signal ( write_lock ); } } reader () { while ( true ) { wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) // first reader take write_lock wait ( write_lock ); signal ( reader_count_lock ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) // release write_lock when ... signal ( write_lock ); // ... no other readers reading signal ( reader_count_lock ); } } \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u79cd\u5b9e\u73b0\u7684\u7ed3\u679c\u662f\uff1a\u5f53\u5b58\u5728\u8bfb\u8fdb\u7a0b\u65f6\uff0c\u5199\u8fdb\u7a0b\u5c06\u88ab\u5ef6\u8fdf\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5199\u8fdb\u7a0b\u53d1\u751f starvation \u3002 \u5982\u679c\u5e0c\u671b\u5199\u8fdb\u7a0b\u4f18\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u89c4\u5b9a\uff0c\u5982\u679c\u5199\u8fdb\u7a0b ready\uff0c\u90a3\u4e48\u5176\u4ed6\u8bfb\u8fdb\u7a0b\u5e94\u5f53\u7b49\u5f85\uff0c\u76f4\u5230\u5199\u8fdb\u7a0b\u7ed3\u675f\uff1b\u5373\u4f7f\u5f97\u5199\u8fdb\u7a0b\u5c3d\u53ef\u80fd\u65e9\u5730\u5f00\u59cb\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u65b0\u589e\u4e00\u4e2a\u4fe1\u53f7\u91cf\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 semaphore write_lock = 1 ; int reader_count = 0 ; semaphore reader_count_lock = 1 ; semaphore writer_first = 1 ; writer () { while ( true ) { wait ( writer_first ); wait ( write_lock ); read_and_write (); signal ( write_lock ); signal ( writer_first ); } } reader () { while ( true ) { wait ( writer_first ); wait ( reader_count_lock ); reader_count ++ ; if ( reader_count == 1 ) wait ( write_lock ); signal ( reader_count_lock ); signal ( writer_first ); read (); wait ( reader_count_lock ); reader_count -- ; if ( reader_count == 0 ) signal ( write_lock ); signal ( reader_count_lock ); } }","title":"7.1.2 Readers-Writers Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#713-dining-philosophers-problem","text":"Dining-Philosophers Problem 5 \u4e2a\u54f2\u5b66\u5bb6\u4e00\u8d77\u5403\u996d\uff01\u6bcf\u4e24\u4e2a\u54f2\u5b66\u5bb6\u4e4b\u95f4\u6709\u4e00\u6839\u7b77\u5b50\uff0c\u6bcf\u4e2a\u4eba\u4e00\u6b21\u53ef\u4ee5\u62ff\u8d77\u6765\u4e00\u6839\u7b77\u5b50\uff0c\u62ff\u5230\u4e24\u6839\u7b77\u5b50\u7684\u5c31\u53ef\u4ee5\u5403\u4e00\u6bb5\u65f6\u95f4\u3002\u5403\u5b8c\u601d\u8003\u4e00\u6bb5\u65f6\u95f4\u3002 \u4e00\u4e2a\u6734\u7d20\u7684\u89e3\u6cd5\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 vector < semaphore > chopstick ( 5 , 1 ); // initialize semaphores to all 1 philosopher ( int index ) { while ( true ) { wait ( chopstick [ i ]); wait ( chopstick [( i + 1 ) % 5 ]); eat (); signal ( chopstick [ i ]); signal ( chopstick [( i + 1 ) % 5 ]); think (); } } \u95ee\u9898\u662f\uff0c\u53ef\u80fd\u67d0\u65f6\u523b\u6bcf\u4e2a\u4eba\u540c\u65f6\u62ff\u8d77\u5de6\u8fb9\u7684\u7b77\u5b50\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6b7b\u9501\u3002 \u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u662f\uff0c\u53ea\u5141\u8bb8\u540c\u65f6\u62ff\u8d77\u4e24\u6839\u7b77\u5b50\uff1b\u8fd9\u79cd\u65b9\u6848\u7684\u5b9e\u73b0\u662f\uff0c\u8f6e\u6d41\u8be2\u95ee\u6bcf\u4e2a\u4eba\u662f\u5426\u80fd\u591f\u62ff\u8d77\u4e24\u6839\u7b77\u5b50\uff0c\u5982\u679c\u80fd\u5219\u62ff\u8d77\uff0c\u5982\u679c\u4e0d\u80fd\u5219\u9700\u8981\u7b49\u5f85\u90a3\u4e9b\u7b77\u5b50\u653e\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 vector < semaphore > chopstick ( 5 , 1 ); // initialize semaphores to all 1 semaphore lock = 1 ; philosopher ( int index ) { while ( true ) { wait ( lock ); wait ( chopstick [ i ]); wait ( chopstick [( i + 1 ) % 5 ]); signal ( lock ); eat (); signal ( chopstick [ i ]); signal ( chopstick [( i + 1 ) % 5 ]); think (); } } \u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u5947\u6570\u53f7\u4eba\u5148\u62ff\u5de6\u8fb9\u7b77\u5b50\uff0c\u5076\u6570\u53f7\u4eba\u5148\u62ff\u53f3\u8fb9\u7b77\u5b50\uff0c\u8fd9\u6837\u4e5f\u80fd\u907f\u514d\u6b7b\u9501\u3002","title":"7.1.3 Dining-Philosophers Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#72-linux-sync","text":"2.6 \u4ee5\u524d\u7684\u7248\u672c\u7684 kernel \u4e2d\u901a\u8fc7\u7981\u7528\u4e2d\u65ad\u6765\u5b9e\u73b0\u4e00\u4e9b\u77ed\u7684 critical section\uff1b2.6 \u53ca\u4e4b\u540e\u7684\u7248\u672c\u7684 kernel \u662f\u62a2\u5360\u5f0f\u7684\u3002 Linux \u63d0\u4f9b\uff1a Atomic integers Spinlocks Semaphores Reader-writer locks","title":"7.2 Linux Sync"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/7_sync_examples/#73-posix-sync","text":"","title":"7.3 POSIX Sync"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/","text":"8 Deadlocks \u00b6 8.1 \u6b7b\u9501\u7684\u5b9a\u4e49\u548c\u4f8b\u5b50 \u00b6 \u6b7b\u9501 (Deadlock) \u662f\u6307\uff0c\u591a\u4e2a\u8fdb\u7a0b\u56e0\u7ade\u4e89\u8d44\u6e90\u5bfc\u81f4\u7684\u4e00\u79cd\u50f5\u5c40\uff0c\u5373\u82e5\u5e72\u8fdb\u7a0b\u5404\u81ea\u6301\u6709\u4e00\u4e9b\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u83b7\u53d6\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\uff0c\u5f62\u6210\u7684\u4e92\u76f8\u7b49\u5f85\u7684\u5c40\u9762\u3002 Example \u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u4e00\u4e2a\u7cfb\u7edf\u91cc\u6709\u4e24\u4e2a\u8fdb\u7a0b \\(P_1\\) \u548c \\(P_2\\) \uff0c\u5206\u522b\u5b8c\u6210\u4ece\u4e00\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u62f7\u8d1d\u5185\u5bb9\u5230\u53e6\u4e00\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u64cd\u4f5c\uff0c\u5373\u5404\u81ea\u9700\u8981\u4e24\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u3002\u7cfb\u7edf\u91cc\u4e24\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668 \\(A\\) \u548c \\(B\\) \u3002\u5f53\u524d\uff0c \\(P_1\\) \u6301\u6709 \\(A\\) \u5e76\u5e0c\u671b\u83b7\u53d6 \\(B\\) \uff0c\u540c\u65f6 \\(P_2\\) \u6301\u6709 \\(B\\) \u5e76\u5e0c\u671b\u83b7\u53d6 \\(A\\) \uff0c\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u5c31\u4f1a\u76f8\u4e92\u7b49\u5f85\uff0c\u9677\u5165\u6b7b\u9501\u3002 \u5373\uff1a semaphore first_mutex = 1 ; semaphore second_mutex = 1 ; thread_one () { wait ( first_mutex ); wait ( second_mutex ); // ...... } thread_two () { wait ( second_mutex ); wait ( first_mutex ); // ...... } Bridge Crossing Example \u4e0a\u56fe\u6240\u793a\u7684\u60c5\u5f62\u4e5f\u5c55\u793a\u4e86\u4e00\u79cd\u6b7b\u9501\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6865\u4e0a\u7684\u4efb\u4e00\u8f86\u8f66\u613f\u610f\u5012\u8f66\u56de\u53bb\uff0c\u5c31\u80fd\u591f\u89e3\u51b3\u6b7b\u9501\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u914d\u4f18\u5148\u7ea7\u7684\u65b9\u5f0f\u8981\u6c42\u54ea\u8f86\u8f66\u5012\u8f66\u3002 \u4f18\u5148\u7ea7\u53ef\u80fd\u5bfc\u81f4 starvation\u3002 8.2 \u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u56fe \u00b6 \u6211\u4eec\u5bf9\u7cfb\u7edf\u8fdb\u884c\u5efa\u6a21\u3002\u5047\u8bbe\u6709 \\(m\\) \u79cd\u4e0d\u540c\u7c7b\u578b\u7684 \u8d44\u6e90 (resources) \\(R_1, \\dots, R_m\\) \uff0c\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b \\(R_i\\) \u6709 \\(W_i\\) \u4e2a \u5b9e\u4f8b (instance) \u3002\u5404\u4e2a\u6d3b\u52a8\u8fdb\u7a0b \\(P_1, \\dots, P_n\\) \u4f1a\u5229\u7528\u8fd9\u4e9b\u8d44\u6e90\u5b9e\u4f8b\uff0c\u6bcf\u4e2a\u8d44\u6e90\u7684\u5229\u7528\u7531 request, use, release \u4e09\u6b65\u7ec4\u6210\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u56fe ( system resource-allocation graph , \u7b80\u79f0\u4e3a \u8d44\u6e90\u5206\u914d\u56fe \u6216 \u5206\u914d\u56fe ) \u523b\u753b\u7cfb\u7edf\u8d44\u6e90\u7684\u60c5\u51b5\u3002\u8d44\u6e90\u5206\u914d\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe\u3002\u70b9\u96c6 \\(V = P \\cup R\\) \uff0c\u5176\u4e2d \\(P = \\{P_1, \\dots, P_n\\}\\) \u662f\u6240\u6709\u6d3b\u52a8\u8fdb\u7a0b\u7684\u96c6\u5408\uff0c \\(R = \\{R_1, \\dots, R_m\\}\\) \u662f\u6240\u6709\u8d44\u6e90\u7c7b\u578b\u7684\u96c6\u5408\u3002\u8fb9\u96c6 \\(E\\) \u4e2d\u5305\u542b \u7533\u8bf7\u8fb9 (request edge) \uff0c\u5373\u5f62\u5982 \\(P_i\\to R_j\\) \u7684\u8fb9\uff0c\u8868\u793a\u8fdb\u7a0b \\(P_i\\) \u5df2\u7ecf\u7533\u8bf7\u4e86\u8d44\u6e90\u7c7b\u578b \\(R_j\\) \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u6b63\u5728\u7b49\u5f85\u8fd9\u4e2a\u8d44\u6e90\uff1b\u4ee5\u53ca \u5206\u914d\u8fb9 (assignment edge) \uff0c\u5373\u5f62\u5982 \\(R_j\\to P_i\\) \u7684\u8fb9\uff0c\u8868\u793a\u8d44\u6e90\u7c7b\u578b \\(R_j\\) \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5df2\u7ecf\u5206\u914d\u7ed9\u4e86\u8fdb\u7a0b \\(P_i\\) \u3002 \u5728\u56fe\u5f62\u4e0a\uff0c\u6211\u4eec\u7528\u5706\u8868\u793a\u8fdb\u7a0b\uff0c\u7528\u77e9\u5f62\u8868\u793a\u8d44\u6e90\u7c7b\u578b\u3002\u7531\u4e8e\u8d44\u6e90\u7c7b\u578b\u53ef\u80fd\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u5728\u77e9\u5f62\u5185\u7528\u6570\u91cf\u7b49\u540c\u4e8e\u5b9e\u4f8b\u6570\u91cf\u7684\u5706\u70b9\u8868\u793a\u5404\u4e2a\u5b9e\u4f8b\u3002\u6bcf\u6761\u7533\u8bf7\u8fb9\u7531\u4e00\u4e2a\u5706\u6307\u5411\u4e00\u4e2a\u77e9\u5f62\uff0c\u800c\u6bcf\u6761\u5206\u914d\u8fb9\u7531\u77e9\u5f62\u4e2d\u7684\u4e00\u4e2a\u5706\u70b9\u6307\u5411\u4e00\u4e2a\u77e9\u5f62\u3002 Example Example \u672c\u8282\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u8d44\u6e90\u5206\u914d\u56fe\u523b\u753b\uff1a \u5f53\u8fdb\u7a0b\u7533\u8bf7\u4e00\u4e2a\u8d44\u6e90\u65f6\uff0c\u5e94\u5f53\u6dfb\u52a0\u4e00\u6761\u7533\u8bf7\u8fb9\uff1b\u5f53\u8be5\u7533\u8bf7\u53ef\u4ee5\u5f97\u5230\u6ee1\u8db3\u65f6\uff0c\u8fd9\u6761\u7533\u8bf7\u8fb9\u5e94\u5f53 \u7acb\u5373 \u8f6c\u6362\u4e3a\u5206\u914d\u8fb9\uff1b\u5f53\u8fdb\u7a0b\u4e0d\u518d\u9700\u8981\u67d0\u4e2a\u8d44\u6e90\u65f6\uff0c\u5c31\u5220\u9664\u5bf9\u5e94\u5206\u914d\u8fb9\u3002 \u6839\u636e\u8d44\u6e90\u5206\u914d\u56fe\u7684\u5b9a\u4e49\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u8d44\u6e90\u5206\u914d\u56fe\u5f53\u524d\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5f53\u524d \u4e00\u5b9a \u6ca1\u6709\u6b7b\u9501\uff1b\u5982\u679c\u5206\u914d\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5f53\u524d \u53ef\u80fd \u5b58\u5728\u6b7b\u9501\u3002\u4f46\u662f\uff0c\u5982\u679c\u5206\u914d\u56fe\u6709\u73af\uff0c\u4e14\u6bcf\u4e2a\u8d44\u6e90\u7c7b\u578b\u53ea\u6709 1 \u4e2a\u5b9e\u4f8b\uff0c\u90a3\u4e48 \u5fc5\u5b9a \u5b58\u5728\u6b7b\u9501\u3002 \u5206\u914d\u56fe\u6709\u73af\u4e0d\u4e00\u5b9a\u5b58\u5728\u6b7b\u9501 8.3 \u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6 \u00b6 \u4e8b\u5b9e\u4e0a\uff0c\u5f53\u4e0b\u9762\u56db\u4e2a\u6761\u4ef6 \u540c\u65f6 \u6210\u7acb\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u51fa\u73b0\u6b7b\u9501\uff1a Mutual exclusion : \u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\u5904\u4e8e\u975e\u5171\u4eab\u6a21\u5f0f\uff1b Hold and wait : \u4e00\u4e2a\u8fdb\u7a0b\u5e94 \u5360\u6709 \u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76 \u7b49\u5f85 \u53e6\u4e00\u4e2a\u4e3a\u5176\u4ed6\u8fdb\u7a0b\u5360\u6709\u7684\u8d44\u6e90\uff1b No preemption : \u8d44\u6e90\u4e0d\u80fd\u88ab\u62a2\u5360\uff0c\u53ea\u80fd\u5728\u8fdb\u7a0b\u7ed3\u675f\u540e\u4e3b\u52a8\u91ca\u653e\uff1b Circular wait : \u6709\u4e00\u7ec4\u7b49\u5f85\u8fdb\u7a0b {T0, T1, ..., Tn}\uff0cT0 is waiting for a resource held by T1, T1 is waiting for a resource held by T2, ..., Tn\u22121 is waiting for a resource held by Tn, and Tn is waiting for a resource held by T0. \u8fd9\u56db\u4e2a\u6761\u4ef6\u5e76\u4e0d\u5b8c\u5168\u72ec\u7acb\u3002 Example \u4e0b\u56fe\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6b7b\u9501\u72b6\u6001\uff1a \u6211\u4eec\u9a8c\u8bc1\u5b83\u7b26\u5408\u4e0a\u8ff0\u56db\u4e2a\u6761\u4ef6\uff1a mutual exclusive\uff1a\u6bcf\u4e2a\u8def\u53e3\uff08\u8d44\u6e90\uff09 1 ~ 4 \u540c\u65f6\u53ea\u80fd\u6709\u4e00\u8f86\u8f66\u7b49\u5f85\u6216\u901a\u884c hold and wait\uff1a\u4f4d\u4e8e 1, 2, 3, 4 \u8def\u53e3\u7684\u8f66\u5206\u522b\u6301\u6709\u5f53\u524d\u8def\u53e3\uff0c\u5e76\u4e14\u7b49\u5f85 2, 3, 4, 1\u8def\u53e3\u7684\u8f66\u7ecf\u8fc7 no preemption\uff1a\u663e\u7136\uff0c\u4efb\u4f55\u4e00\u4e2a\u8def\u53e3\u8fb9\u7b49\u5f85\u7684\u8f66\u4e0d\u80fd\u5148\u4e8e\u5f53\u524d\u5728\u8def\u53e3\u7b49\u5f85\u7684\u8f66\u7ecf\u8fc7\u8def\u53e3 circular wait\uff1a\u4f4d\u4e8e 1, 2, 3, 4 \u8def\u53e3\u7684\u8f66\u5206\u522b\u7b49\u5f85 2, 3, 4, 1\u8def\u53e3\u7684\u8f66\u7ecf\u8fc7 8.4 \u6b7b\u9501\u7684\u5904\u7406\u7b56\u7565 \u00b6 \u5982\u4f55\u5904\u7406\u6b7b\u9501\u5462\uff1f\u6709\u56db\u79cd\u65b9\u6cd5\uff1a \u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u5165\u6b7b\u9501\u72b6\u6001 \u6b7b\u9501\u9884\u9632 (deadlock prevention) \u6b7b\u9501\u907f\u514d (deadlock avoidance) \u5728\u7cfb\u7edf\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\u540e\u6062\u590d \u6b7b\u9501\u68c0\u6d4b\u548c\u6062\u590d (deadlock detection and recovery) \uff1a\u4f8b\u5982\u6570\u636e\u5e93 \u5047\u88c5\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff0c\u771f\u7684\u53d1\u751f\u4e86\u5c31\u5bc4 \u4e8b\u5b9e\u4e0a\uff0c\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\uff08\u5305\u62ec Linux \u548c Windows\uff09\u9009\u62e9\u7684\u662f\u6700\u540e\u4e00\u79cd\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\u6765\u5904\u7406\u6b7b\u9501\u3002 \u4f46\u662f\u524d\u9762\u4e09\u79cd\u8fd8\u662f\u8981\u5b66\ud83d\udc49\ud83d\udc48 8.4.1 \u6b7b\u9501\u9884\u9632 \u00b6 \u6b7b\u9501\u9884\u9632\u7684\u6838\u5fc3\u601d\u8def\u662f\uff0c\u786e\u4fdd 8.3 \u8282\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8981\u6761\u4ef6\u6c38\u4e0d\u6210\u7acb\uff0c\u6765\u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u6211\u4eec\u5206\u522b\u8ba8\u8bba\u56db\u4e2a\u6761\u4ef6\u5982\u4f55\u7834\u574f\u3002 8.4.1.1 Mutual Exclusion \u00b6 \u5982\u679c\u4fdd\u8bc1\u7cfb\u7edf\u8d44\u6e90\u90fd\u80fd\u5171\u4eab\uff0c\u5219\u8be5\u6761\u4ef6\u7528\u4e0d\u6210\u7acb\u3002 \u4f46\u662f\u8fd9\u53ea\u662f\u4e2a\u7f8e\u597d\u7684\u613f\u671b\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u8d44\u6e90\u5929\u751f\u5c31\u4e0d\u80fd\u5171\u4eab\uff0c\u6bd4\u5982\u4fe1\u53f7\u91cf\u3002 8.4.1.2 Hold and Wait \u00b6 \u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u7533\u8bf7\u8d44\u6e90\u65f6\u4e0d\u80fd\u5360\u6709\u5176\u4ed6\u8d44\u6e90\u3002 \u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\u662f\uff0c\u5728\u5f00\u59cb\u6267\u884c\u524d\u7533\u8bf7\u5e76\u83b7\u5f97\u6240\u6709\u8d44\u6e90\u3002\u6216\u8005\uff0c\u53ea\u5141\u8bb8\u8fdb\u7a0b\u5728\u6ca1\u6709\u8d44\u6e90\u65f6\u624d\u80fd\u7533\u8bf7\u8d44\u6e90\u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u95ee\u9898\u662f\uff0c\u8d44\u6e90\u5229\u7528\u7387\u8f83\u4f4e\uff0c\u800c\u4e14\u9700\u8981\u8d44\u6e90\u8f83\u591a\u7684\u8fdb\u7a0b\u53ef\u80fd\u53d1\u751f starvation\u3002 8.4.1.3 No Preemption \u00b6 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u4e00\u4e2a\u8d44\u6e90\u4f46\u662f\u6ca1\u6709\u7acb\u523b\u5f97\u5230\u6ee1\u8db3\u65f6\uff0c\u5b83\u5fc5\u987b\u91ca\u653e\u5df2\u7ecf\u6301\u6709\u7684\u6240\u6709\u8d44\u6e90\uff1b\u76f4\u5230\u5b83\u9700\u6c42\u7684\u6240\u6709\u8d44\u6e90\uff08\u5305\u62ec\u521a\u624d\u91ca\u653e\u7684\u90a3\u4e9b\u8d44\u6e90\uff09\u90fd\u53ef\u7528\u65f6\u624d\u80fd\u4e00\u5e76\u83b7\u53d6\u5b83\u4eec\u5e76\u7ee7\u7eed\u6267\u884c\u3002 \u4f46\u662f\u4fe1\u53f7\u91cf\u4e4b\u7c7b\u7684\u8d44\u6e90\u4e5f\u4e0d\u80fd\u8fd9\u6837\u7528\uff1b\u540c\u65f6\u4e5f\u4f1a\u964d\u4f4e\u8d44\u6e90\u5229\u7528\u7387\u3002 8.4.1.4 Circular Wait \u00b6 \u5bf9\u6240\u6709\u8d44\u6e90\u7c7b\u578b\u8fdb\u884c\u6392\u5e8f\uff0c\u8981\u6c42\u6bcf\u4e2a\u8fdb\u7a0b\u6309\u7167\u9012\u589e\u987a\u5e8f\u7533\u8bf7\u8d44\u6e90\u3002 \u7a0b\u5e8f\u5458\u9700\u8981\u4fdd\u8bc1\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u7533\u8bf7\u8d44\u6e90\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u542c\u8bdd\uff0c\u8fd8\u662f\u4f1a\u53d1\u751f\u6b7b\u9501\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u80fd\u5f71\u54cd\u8d44\u6e90\u5229\u7528\u7387\u3002 8.4.2 \u6b7b\u9501\u907f\u514d \u00b6 \u907f\u514d\u6b7b\u9501\u9700\u8981\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u8fdb\u7a0b\u672a\u6765\u9700\u8981\u4f7f\u7528\u54ea\u4e9b\u8d44\u6e90\u3001\u8d44\u6e90\u7684\u4f7f\u7528\u987a\u5e8f\u7b49\u3002\u5728\u6bcf\u6b21\u8bf7\u6c42\u5230\u6765\u65f6\uff0c\u5373\u4f7f\u5bf9\u5e94\u8d44\u6e90\u53ef\u7528\uff0c\u7cfb\u7edf\u4e5f\u5e94\u8be5\u7ed3\u5408\u73b0\u6709\u53ef\u7528\u8d44\u6e90\u3001\u73b0\u6709\u5df2\u5206\u914d\u8d44\u6e90\u4ee5\u53ca\u5404\u4e2a\u8fdb\u7a0b\u672a\u6765\u7533\u8bf7\u548c\u91ca\u653e\u7684\u8d44\u6e90\uff0c\u8003\u8651\u662f\u5426\u8ba9\u8fd9\u4e2a\u8bf7\u6c42\u7b49\u5f85\u4ece\u800c\u907f\u514d\u672a\u6765\u53ef\u80fd\u7684\u6b7b\u9501\u3002 \u4e0d\u540c\u6a21\u578b\u53ef\u80fd\u5bf9\u4e0a\u8ff0\u989d\u5916\u4fe1\u606f\u6709\u4e0d\u540c\u7684\u9700\u6c42\u3002\u6700\u7b80\u5355\u4e14\u6700\u6709\u7528\u7684\u6a21\u578b\u7ef4\u62a4\u8fd9\u6837\u7684 \u8d44\u6e90\u5206\u914d\u72b6\u6001 (resource allocation state): \u6bcf\u4e2a\u8fdb\u7a0b\u58f0\u660e\u53ef\u80fd\u5bf9\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b\u7684 \u6700\u5927\u9700\u6c42 (maximum demands) \u5f53\u524d\u7cfb\u7edf\u7684 available \u548c allocated \u7684\u8d44\u6e90\u6570\u76ee\u3002 8.4.2.1 \u8d44\u6e90\u5206\u914d\u56fe\u7b97\u6cd5 \u00b6 \u8fd9\u79cd\u7b97\u6cd5\u9002\u7528\u4e8e\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b\u53ea\u6709 1 \u4e2a\u5b9e\u4f8b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u5728\u8d44\u6e90\u5206\u914d\u56fe\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u79cd\u8fb9\uff0c\u53eb claim edge\uff0c\u8868\u793a\u67d0\u4e2a\u8fdb\u7a0b\u672a\u6765 \u53ef\u80fd \u4f1a\u9700\u6c42\u67d0\u79cd\u8d44\u6e90\uff0c\u7528\u865a\u7ebf\u8868\u793a\u3002 \u5f53\u8fd9\u4e2a\u9700\u6c42\u771f\u7684\u51fa\u73b0\u7684\u65f6\u5019\uff0cclaim edge \u8f6c\u4e3a request edge\uff1b\u5f53\u9700\u6c42\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\uff0crequest edge \u8f6c\u4e3a assignment edge\uff1b\u5f53\u8be5\u8fdb\u7a0b\u91ca\u653e\u8be5\u8d44\u6e90\u65f6\uff0cassignment edge \u8f6c\u4e3a claim edge\u3002 \u5f53\u4e00\u4e2a\u9700\u6c42\u6765\u4e86\u7684\u65f6\u5019\uff0c\u5982\u679c request edge \u8f6c\u4e3a assignment edge \u4e0d\u4f1a\u5bfc\u81f4\u56fe\u4e2d\u6709\u4e00\u4e2a cycle\uff0c\u5219\u8be5\u8981\u6c42\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff1b\u5426\u5219\u8be5\u8bf7\u6c42\u5e94\u5f53\u7b49\u5f85\u3002 8.4.2.2 \u5b89\u5168\u72b6\u6001 | Safe State \u00b6 \u5982\u679c\u7cfb\u7edf\u80fd\u591f\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u8d44\u6e90\uff0c\u540c\u65f6\u907f\u514d\u6b7b\u9501\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u5904\u5728 \u5b89\u5168\u72b6\u6001 (safe state) \u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u67d0\u4e2a\u8d44\u6e90\u5f53\u524d\u6709 \\(A\\) \u4e2a\u7a7a\u95f2\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6d3b\u52a8\u8fdb\u7a0b \\(P_i\\) \uff0c\u5b83\u4eec\u5404\u81ea\u6301\u6709 \\(C_i\\) \u4e2a\u8be5\u8d44\u6e90\uff0c\u5e76\u4ecd\u7136\u9700\u8981 \\(D_i\\) \u4e2a\u8be5\u8d44\u6e90\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217 \\(<P_1, \\dots, P_n>\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4e00 \\(P_i\\) \uff0c\u90fd\u6709 \\(A + \\sum_{j = 1}^{j < i} C_i \\ge D_i\\) \uff0c\u5219\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u3002 \u5b89\u5168\u72b6\u6001\u4fdd\u8bc1\u4e0d\u53d1\u751f\u6b7b\u9501\u3002 Proof \u7528\u5f52\u7eb3\u6cd5\u3002\u5982\u679c \\(P_i\\) \u7684\u9700\u6c42\u4e0d\u80fd\u7acb\u523b\u6ee1\u8db3\uff0c\u5b83\u53ea\u9700\u8981\u7b49\u5230 \\(\\{P_j\\ |\\ j < i\\}\\) \u5168\u90e8\u5b8c\u6210\uff0c \\(P_i\\) \u5c31\u80fd\u83b7\u53d6\u6240\u9700\u8d44\u6e90\u3002 Example \\(<P1, P0, P2>\\) \u662f\u4e00\u4e2a safe sequence\u3002\u56e0\u6b64\u7cfb\u7edf\u5904\u5728\u5b89\u5168\u72b6\u6001\u3002 \u6839\u636e\u8fd9\u4e00\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u6b7b\u9501\u907f\u514d\u7684\u7b97\u6cd5\uff1a\u8d77\u521d\uff0c\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u3002\u5f53\u6709\u8fdb\u7a0b\u7533\u8bf7\u4e00\u4e2a\u53ef\u7528\u8d44\u6e90\u65f6\uff0c\u7cfb\u7edf\u5e94\u786e\u5b9a\uff0c\u5982\u679c\u7acb\u523b\u8fdb\u884c\u8fd9\u4e00\u5206\u914d\u540e\u7cfb\u7edf\u4ecd\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u5219\u53ef\u4ee5\u5206\u914d\uff0c\u5426\u5219\u5e94\u5f53\u8ba9\u8fdb\u7a0b\u7b49\u5f85\u3002 8.4.2.3 \u94f6\u884c\u5bb6\u7b97\u6cd5 | Banker's Algorithm \u00b6 \u6211\u4eec\u901a\u8fc7 available, max, allocation, need \u8fd9\u56db\u4e2a\u77e9\u9635\u523b\u753b\u4e00\u4e2a\u65f6\u95f4\u5185\u5404\u4e2a\u8fdb\u7a0b\u5bf9\u5404\u79cd\u8d44\u6e90\u7684\u6301\u6709\u548c\u9700\u6c42\u60c5\u51b5\uff0c\u4ee5\u53ca\u5f53\u524d\u7cfb\u7edf\u7684\u8d44\u6e90\u60c5\u51b5\uff1b\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u4fdd\u6301\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\uff0c\u4ece\u800c\u51b3\u5b9a\u4e00\u4e2a\u9700\u6c42\u662f\u5426\u5e94\u5f53\u88ab\u7acb\u5373\u6ee1\u8db3\u3002 \u53c2\u8003\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u95ee\u9898 1 \u7406\u89e3\uff0c\u627e\u4e00\u4e2a\u5b89\u5168\u5e8f\u5217\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\uff1a\u9009\u53d6\u4e00\u4e2a need\uff08\u7684\u6bcf\u4e00\u9879\u90fd\u5bf9\u5e94\u5730\uff09\u5c0f\u4e8e available\uff08\u7684\u5bf9\u5e94\u9879\uff09\u7684\u8fdb\u7a0b\uff0c\u5176\u8fd0\u884c\u5b8c\u540e\u4f1a\u5c06 allocation \u91ca\u653e\u56de available\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u800c\u51b3\u5b9a\u4e00\u4e2a\u9700\u6c42\u662f\u5426\u5e94\u5f53\u88ab\u7acb\u5373\u6ee1\u8db3\u7684\u65b9\u6848\u662f\uff0c \u5047\u8bbe \u8fd9\u4e2a\u9700\u6c42\u88ab\u63a5\u53d7\u4e86\uff0c\u6839\u636e\u8be5\u9700\u6c42\u66f4\u65b0\u5bf9\u5e94\u7684 need, available, allocation\uff0c\u5728\u6b64\u72b6\u6001\u4e0b\u63a8\u6f14\u662f\u5426\u6709\u5408\u6cd5\u7684\u5b89\u5168\u5e8f\u5217\u3002\u5982\u679c\u6709\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\uff0c\u5426\u5219\u5e94\u7b49\u5f85\u3002\u53c2\u8003\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u95ee\u9898 2~4\u3002 Question 8.28 Consider the following snapshot of a system: Answer the following questions using the banker\u2019s algorithm: Illustrate that the system is in a safe state by demonstrating an order in which the threads may complete. If a request from thread T4 arrives for (2, 2, 2, 4), can the request be granted immediately? If a request from thread T2 arrives for (0, 1, 1, 0), can the request be granted immediately? If a request from thread T3 arrives for (2, 2, 1, 2), can the request be granted immediately? \u7b54\u6848 \u5982\u56fe\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u8ba9 T2 \u8fd0\u884c\uff08\u4e5f\u53ef\u4ee5\u662f T3\uff09\uff0c\u6b64\u540e\u53d8\u6210\uff1a \u73b0\u5728\u53ef\u4ee5\u8ba9\u6bcf\u4e2a thread \u8fd0\u884c\uff0c\u56e0\u6b64\u4e4b\u540e\u4efb\u4f55\u4e00\u79cd\u8fd0\u884c\u65b9\u5f0f\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u5982 T2->T4->T0->T1->T3\u3002\u56e0\u6b64\u5f53\u524d\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u53ef\u89c1\uff0c\u6b64\u65f6\u4efb\u4e00\u7ebf\u7a0b\u90fd\u65e0\u6cd5\u6267\u884c\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u4e0d\u80fd\u7acb\u5373\u6ee1\u8db3\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u8fd9\u4e0d\u5f71\u54cd\u6211\u4eec\u5982 1) \u90a3\u6837\u5b8c\u6210\u5168\u90e8\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c\u5373\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u6211\u4eec\u53ef\u4ee5\u6309 T3->T2->T4->T1->T0 \u7b49\u987a\u5e8f\u5b8c\u6210\u5168\u90e8\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c\u5373\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002 8.4.3 \u6b7b\u9501\u68c0\u6d4b \u00b6 8.4.3.1 Single Instance Resources \u00b6 \u53ef\u4ee5\u901a\u8fc7\u8d44\u6e90\u5206\u914d\u56fe\u7684\u53d8\u4f53 wait-for graph \u6765\u89e3\u51b3\uff1a \u5728\u8fd9\u4e2a\u56fe\u91cc\u627e\u73af\uff0c\u7528\u62d3\u6251\u6392\u5e8f\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(V + E)\\) \u7684\uff0c\u8fd9\u6700\u5dee\u60c5\u51b5\u4e0b\u662f \\(O(n^2)\\) \u7684\u3002 8.4.3.2 Multi-Instance Resources \u00b6 \u7c7b\u4f3c\u94f6\u884c\u5bb6\u7b97\u6cd5\u3002\u5982\u679c\u627e\u4e0d\u5230\u4efb\u4f55\u5b89\u5168\u5e8f\u5217\uff0c\u5219\u8bf4\u660e\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002 8.4.4 \u6b7b\u9501\u6062\u590d \u00b6 \u6b7b\u9501\u6062\u590d\u6709\u4e24\u4e2a\u9009\u62e9\uff1a 8.4.4.1 \u8fdb\u7a0b\u7ec8\u6b62 Treminate deadlocked processes \u00b6 \u7ec8\u6b62\u8fdb\u7a0b\u5e76\u4e0d\u7b80\u5355\uff0c\u5b83\u9700\u8981\u7ef4\u62a4\u7ec8\u6b62\u65f6\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u4e00\u4e9b\u5185\u5bb9\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u907f\u514d\u4ea7\u751f\u91cd\u590d\u7684\u526f\u4f5c\u7528\uff08\u5982\u8f93\u51fa\uff09\uff1b\u8fd9\u9700\u8981\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u3002 Options: \u653e\u5f03\u6240\u6709\u6b7b\u9501\u8fdb\u7a0b\u3002\u8fd9\u6837\u7684\u82b1\u8d39\u4f1a\u5f88\u5927\uff01 \u6bcf\u6b21\u653e\u5f03\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u76f4\u5230\u6b7b\u9501\u73af\u89e3\u9664\u3002\u8fd9\u6837\u7684\u82b1\u8d39\u4e5f\u5f88\u5927\uff0c\u56e0\u4e3a\u6bcf\u6b21\u653e\u5f03\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u540e\u90fd\u9700\u8981\u8c03\u7528\u6b7b\u9501\u68c0\u6d4b\u7b97\u6cd5\u3002 \u540c\u65f6\u540e\u8005\u9700\u8981\u8003\u8651\u7684\u662f\uff0c\u5982\u4f55\u9009\u62e9\u653e\u5f03\u7684\u8fdb\u7a0b\uff1f\u5e94\u5f53\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c\u53c2\u8003\u5982\u4e0b\u6307\u6807\u9009\u62e9\u9020\u6210\u7684\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fdb\u7a0b\u6765\u7ec8\u6b62\uff1a \u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7 \u5df2\u7ecf\u7b97\u4e86\u591a\u4e45\uff0c\u8fd8\u8981\u7b97\u591a\u4e45 \u7528\u4e86\u54ea\u4e9b\u3001\u591a\u5c11\u8d44\u6e90\uff0c\u662f\u5426\u5bb9\u6613\u62a2\u5360 \u8fd8\u9700\u8981\u591a\u5c11\u8d44\u6e90 \u7ec8\u6b62\u8fd9\u4e00\u8fdb\u7a0b\u7684\u8bdd\u8fd8\u9700\u8981\u7ec8\u6b62\u591a\u5c11\u8fdb\u7a0b \u8fdb\u7a0b\u662f\u4ea4\u4e92\u7684\u8fd8\u662f\u6279\u5904\u7406\u7684 8.4.4.2 \u8d44\u6e90\u62a2\u5360 Resource preemption \u00b6 \u4e0d\u65ad\u62a2\u5360\u8d44\u6e90\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u7528\uff0c\u76f4\u5230\u6d88\u9664\u6b7b\u9501\u73af\u4e3a\u6b62\u3002 \u9700\u8981\u8003\u8651\u4e09\u4e2a\u95ee\u9898\uff1a \u9009\u62e9\u727a\u7272\u8fdb\u7a0b (Select a victim) \u3002\u62a2\u5360\u54ea\u4e9b\u8fdb\u7a0b\u7684\u54ea\u4e9b\u8d44\u6e90\uff1f\u8fd9\u548c\u524d\u4e00\u8282\u7684\u8ba8\u8bba\u5dee\u4e0d\u591a\u3002 \u56de\u6eda (Rollback) \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7684\u82e5\u5e72\u8d44\u6e90\u88ab\u62a2\u5360\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u8fdb\u7a0b \u56de\u6eda \u5230\u67d0\u4e2a\u5b89\u5168\u72b6\u6001\uff0c\u5373\u56de\u6eda\u5230\u7533\u8bf7\u90a3\u4e9b\u88ab\u62a2\u5360\u7684\u8d44\u6e90\u4e4b\u524d\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u5f88\u96be\u786e\u5b9a\u4ec0\u4e48\u662f\u5b89\u5168\u72b6\u6001\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6848\u5c31\u662f\u5b8c\u5168\u56de\u6eda\uff0c\u4e5f\u5c31\u662f\u7ec8\u6b62\u8fdb\u7a0b\u5e76\u91cd\u65b0\u6267\u884c\u3002\u56de\u6eda\u5230\u8db3\u591f\u6253\u65ad\u6b7b\u9501\u7684\u72b6\u6001\u66f4\u52a0\u7ecf\u6d4e\uff0c\u4f46\u662f\u9700\u8981\u7cfb\u7edf\u4fdd\u5b58\u66f4\u591a\u8d44\u6e90\u3002 \u9965\u997f (Starvation) \u3002\u5982\u4f55\u4fdd\u8bc1\u4e0d\u4f1a\u6c38\u8fdc\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u62a2\u5360\u8d44\u6e90\uff1f\u5728\u4ee3\u4ef7\u8bc4\u4ef7\u4e2d\u589e\u52a0\u56de\u6eda\u6b21\u6570\uff0c\u4e5f\u7c7b\u4f3c\u4e8e priority aging\u3002","title":"8 \u6b7b\u9501"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8-deadlocks","text":"","title":"8 Deadlocks"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#81-\u6b7b\u9501\u7684\u5b9a\u4e49\u548c\u4f8b\u5b50","text":"\u6b7b\u9501 (Deadlock) \u662f\u6307\uff0c\u591a\u4e2a\u8fdb\u7a0b\u56e0\u7ade\u4e89\u8d44\u6e90\u5bfc\u81f4\u7684\u4e00\u79cd\u50f5\u5c40\uff0c\u5373\u82e5\u5e72\u8fdb\u7a0b\u5404\u81ea\u6301\u6709\u4e00\u4e9b\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u83b7\u53d6\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u7684\u8d44\u6e90\uff0c\u5f62\u6210\u7684\u4e92\u76f8\u7b49\u5f85\u7684\u5c40\u9762\u3002 Example \u4e00\u4e2a\u4f8b\u5b50\u662f\uff0c\u4e00\u4e2a\u7cfb\u7edf\u91cc\u6709\u4e24\u4e2a\u8fdb\u7a0b \\(P_1\\) \u548c \\(P_2\\) \uff0c\u5206\u522b\u5b8c\u6210\u4ece\u4e00\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u62f7\u8d1d\u5185\u5bb9\u5230\u53e6\u4e00\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u64cd\u4f5c\uff0c\u5373\u5404\u81ea\u9700\u8981\u4e24\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668\u3002\u7cfb\u7edf\u91cc\u4e24\u4e2a\u78c1\u76d8\u9a71\u52a8\u5668 \\(A\\) \u548c \\(B\\) \u3002\u5f53\u524d\uff0c \\(P_1\\) \u6301\u6709 \\(A\\) \u5e76\u5e0c\u671b\u83b7\u53d6 \\(B\\) \uff0c\u540c\u65f6 \\(P_2\\) \u6301\u6709 \\(B\\) \u5e76\u5e0c\u671b\u83b7\u53d6 \\(A\\) \uff0c\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u5c31\u4f1a\u76f8\u4e92\u7b49\u5f85\uff0c\u9677\u5165\u6b7b\u9501\u3002 \u5373\uff1a semaphore first_mutex = 1 ; semaphore second_mutex = 1 ; thread_one () { wait ( first_mutex ); wait ( second_mutex ); // ...... } thread_two () { wait ( second_mutex ); wait ( first_mutex ); // ...... } Bridge Crossing Example \u4e0a\u56fe\u6240\u793a\u7684\u60c5\u5f62\u4e5f\u5c55\u793a\u4e86\u4e00\u79cd\u6b7b\u9501\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6865\u4e0a\u7684\u4efb\u4e00\u8f86\u8f66\u613f\u610f\u5012\u8f66\u56de\u53bb\uff0c\u5c31\u80fd\u591f\u89e3\u51b3\u6b7b\u9501\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u914d\u4f18\u5148\u7ea7\u7684\u65b9\u5f0f\u8981\u6c42\u54ea\u8f86\u8f66\u5012\u8f66\u3002 \u4f18\u5148\u7ea7\u53ef\u80fd\u5bfc\u81f4 starvation\u3002","title":"8.1 \u6b7b\u9501\u7684\u5b9a\u4e49\u548c\u4f8b\u5b50"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#82-\u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u56fe","text":"\u6211\u4eec\u5bf9\u7cfb\u7edf\u8fdb\u884c\u5efa\u6a21\u3002\u5047\u8bbe\u6709 \\(m\\) \u79cd\u4e0d\u540c\u7c7b\u578b\u7684 \u8d44\u6e90 (resources) \\(R_1, \\dots, R_m\\) \uff0c\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b \\(R_i\\) \u6709 \\(W_i\\) \u4e2a \u5b9e\u4f8b (instance) \u3002\u5404\u4e2a\u6d3b\u52a8\u8fdb\u7a0b \\(P_1, \\dots, P_n\\) \u4f1a\u5229\u7528\u8fd9\u4e9b\u8d44\u6e90\u5b9e\u4f8b\uff0c\u6bcf\u4e2a\u8d44\u6e90\u7684\u5229\u7528\u7531 request, use, release \u4e09\u6b65\u7ec4\u6210\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u56fe ( system resource-allocation graph , \u7b80\u79f0\u4e3a \u8d44\u6e90\u5206\u914d\u56fe \u6216 \u5206\u914d\u56fe ) \u523b\u753b\u7cfb\u7edf\u8d44\u6e90\u7684\u60c5\u51b5\u3002\u8d44\u6e90\u5206\u914d\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe\u3002\u70b9\u96c6 \\(V = P \\cup R\\) \uff0c\u5176\u4e2d \\(P = \\{P_1, \\dots, P_n\\}\\) \u662f\u6240\u6709\u6d3b\u52a8\u8fdb\u7a0b\u7684\u96c6\u5408\uff0c \\(R = \\{R_1, \\dots, R_m\\}\\) \u662f\u6240\u6709\u8d44\u6e90\u7c7b\u578b\u7684\u96c6\u5408\u3002\u8fb9\u96c6 \\(E\\) \u4e2d\u5305\u542b \u7533\u8bf7\u8fb9 (request edge) \uff0c\u5373\u5f62\u5982 \\(P_i\\to R_j\\) \u7684\u8fb9\uff0c\u8868\u793a\u8fdb\u7a0b \\(P_i\\) \u5df2\u7ecf\u7533\u8bf7\u4e86\u8d44\u6e90\u7c7b\u578b \\(R_j\\) \u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u6b63\u5728\u7b49\u5f85\u8fd9\u4e2a\u8d44\u6e90\uff1b\u4ee5\u53ca \u5206\u914d\u8fb9 (assignment edge) \uff0c\u5373\u5f62\u5982 \\(R_j\\to P_i\\) \u7684\u8fb9\uff0c\u8868\u793a\u8d44\u6e90\u7c7b\u578b \\(R_j\\) \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5df2\u7ecf\u5206\u914d\u7ed9\u4e86\u8fdb\u7a0b \\(P_i\\) \u3002 \u5728\u56fe\u5f62\u4e0a\uff0c\u6211\u4eec\u7528\u5706\u8868\u793a\u8fdb\u7a0b\uff0c\u7528\u77e9\u5f62\u8868\u793a\u8d44\u6e90\u7c7b\u578b\u3002\u7531\u4e8e\u8d44\u6e90\u7c7b\u578b\u53ef\u80fd\u6709\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u5728\u77e9\u5f62\u5185\u7528\u6570\u91cf\u7b49\u540c\u4e8e\u5b9e\u4f8b\u6570\u91cf\u7684\u5706\u70b9\u8868\u793a\u5404\u4e2a\u5b9e\u4f8b\u3002\u6bcf\u6761\u7533\u8bf7\u8fb9\u7531\u4e00\u4e2a\u5706\u6307\u5411\u4e00\u4e2a\u77e9\u5f62\uff0c\u800c\u6bcf\u6761\u5206\u914d\u8fb9\u7531\u77e9\u5f62\u4e2d\u7684\u4e00\u4e2a\u5706\u70b9\u6307\u5411\u4e00\u4e2a\u77e9\u5f62\u3002 Example Example \u672c\u8282\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u8d44\u6e90\u5206\u914d\u56fe\u523b\u753b\uff1a \u5f53\u8fdb\u7a0b\u7533\u8bf7\u4e00\u4e2a\u8d44\u6e90\u65f6\uff0c\u5e94\u5f53\u6dfb\u52a0\u4e00\u6761\u7533\u8bf7\u8fb9\uff1b\u5f53\u8be5\u7533\u8bf7\u53ef\u4ee5\u5f97\u5230\u6ee1\u8db3\u65f6\uff0c\u8fd9\u6761\u7533\u8bf7\u8fb9\u5e94\u5f53 \u7acb\u5373 \u8f6c\u6362\u4e3a\u5206\u914d\u8fb9\uff1b\u5f53\u8fdb\u7a0b\u4e0d\u518d\u9700\u8981\u67d0\u4e2a\u8d44\u6e90\u65f6\uff0c\u5c31\u5220\u9664\u5bf9\u5e94\u5206\u914d\u8fb9\u3002 \u6839\u636e\u8d44\u6e90\u5206\u914d\u56fe\u7684\u5b9a\u4e49\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u8d44\u6e90\u5206\u914d\u56fe\u5f53\u524d\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5f53\u524d \u4e00\u5b9a \u6ca1\u6709\u6b7b\u9501\uff1b\u5982\u679c\u5206\u914d\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u7cfb\u7edf\u5f53\u524d \u53ef\u80fd \u5b58\u5728\u6b7b\u9501\u3002\u4f46\u662f\uff0c\u5982\u679c\u5206\u914d\u56fe\u6709\u73af\uff0c\u4e14\u6bcf\u4e2a\u8d44\u6e90\u7c7b\u578b\u53ea\u6709 1 \u4e2a\u5b9e\u4f8b\uff0c\u90a3\u4e48 \u5fc5\u5b9a \u5b58\u5728\u6b7b\u9501\u3002 \u5206\u914d\u56fe\u6709\u73af\u4e0d\u4e00\u5b9a\u5b58\u5728\u6b7b\u9501","title":"8.2 \u7cfb\u7edf\u8d44\u6e90\u5206\u914d\u56fe"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#83-\u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6","text":"\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u4e0b\u9762\u56db\u4e2a\u6761\u4ef6 \u540c\u65f6 \u6210\u7acb\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u51fa\u73b0\u6b7b\u9501\uff1a Mutual exclusion : \u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\u5904\u4e8e\u975e\u5171\u4eab\u6a21\u5f0f\uff1b Hold and wait : \u4e00\u4e2a\u8fdb\u7a0b\u5e94 \u5360\u6709 \u81f3\u5c11\u4e00\u4e2a\u8d44\u6e90\uff0c\u5e76 \u7b49\u5f85 \u53e6\u4e00\u4e2a\u4e3a\u5176\u4ed6\u8fdb\u7a0b\u5360\u6709\u7684\u8d44\u6e90\uff1b No preemption : \u8d44\u6e90\u4e0d\u80fd\u88ab\u62a2\u5360\uff0c\u53ea\u80fd\u5728\u8fdb\u7a0b\u7ed3\u675f\u540e\u4e3b\u52a8\u91ca\u653e\uff1b Circular wait : \u6709\u4e00\u7ec4\u7b49\u5f85\u8fdb\u7a0b {T0, T1, ..., Tn}\uff0cT0 is waiting for a resource held by T1, T1 is waiting for a resource held by T2, ..., Tn\u22121 is waiting for a resource held by Tn, and Tn is waiting for a resource held by T0. \u8fd9\u56db\u4e2a\u6761\u4ef6\u5e76\u4e0d\u5b8c\u5168\u72ec\u7acb\u3002 Example \u4e0b\u56fe\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6b7b\u9501\u72b6\u6001\uff1a \u6211\u4eec\u9a8c\u8bc1\u5b83\u7b26\u5408\u4e0a\u8ff0\u56db\u4e2a\u6761\u4ef6\uff1a mutual exclusive\uff1a\u6bcf\u4e2a\u8def\u53e3\uff08\u8d44\u6e90\uff09 1 ~ 4 \u540c\u65f6\u53ea\u80fd\u6709\u4e00\u8f86\u8f66\u7b49\u5f85\u6216\u901a\u884c hold and wait\uff1a\u4f4d\u4e8e 1, 2, 3, 4 \u8def\u53e3\u7684\u8f66\u5206\u522b\u6301\u6709\u5f53\u524d\u8def\u53e3\uff0c\u5e76\u4e14\u7b49\u5f85 2, 3, 4, 1\u8def\u53e3\u7684\u8f66\u7ecf\u8fc7 no preemption\uff1a\u663e\u7136\uff0c\u4efb\u4f55\u4e00\u4e2a\u8def\u53e3\u8fb9\u7b49\u5f85\u7684\u8f66\u4e0d\u80fd\u5148\u4e8e\u5f53\u524d\u5728\u8def\u53e3\u7b49\u5f85\u7684\u8f66\u7ecf\u8fc7\u8def\u53e3 circular wait\uff1a\u4f4d\u4e8e 1, 2, 3, 4 \u8def\u53e3\u7684\u8f66\u5206\u522b\u7b49\u5f85 2, 3, 4, 1\u8def\u53e3\u7684\u8f66\u7ecf\u8fc7","title":"8.3 \u6b7b\u9501\u7684\u5fc5\u8981\u6761\u4ef6"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#84-\u6b7b\u9501\u7684\u5904\u7406\u7b56\u7565","text":"\u5982\u4f55\u5904\u7406\u6b7b\u9501\u5462\uff1f\u6709\u56db\u79cd\u65b9\u6cd5\uff1a \u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u8fdb\u5165\u6b7b\u9501\u72b6\u6001 \u6b7b\u9501\u9884\u9632 (deadlock prevention) \u6b7b\u9501\u907f\u514d (deadlock avoidance) \u5728\u7cfb\u7edf\u8fdb\u5165\u6b7b\u9501\u72b6\u6001\u540e\u6062\u590d \u6b7b\u9501\u68c0\u6d4b\u548c\u6062\u590d (deadlock detection and recovery) \uff1a\u4f8b\u5982\u6570\u636e\u5e93 \u5047\u88c5\u7cfb\u7edf\u4e0d\u4f1a\u53d1\u751f\u6b7b\u9501\uff0c\u771f\u7684\u53d1\u751f\u4e86\u5c31\u5bc4 \u4e8b\u5b9e\u4e0a\uff0c\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\uff08\u5305\u62ec Linux \u548c Windows\uff09\u9009\u62e9\u7684\u662f\u6700\u540e\u4e00\u79cd\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u5df1\u7f16\u5199\u7a0b\u5e8f\u6765\u5904\u7406\u6b7b\u9501\u3002 \u4f46\u662f\u524d\u9762\u4e09\u79cd\u8fd8\u662f\u8981\u5b66\ud83d\udc49\ud83d\udc48","title":"8.4 \u6b7b\u9501\u7684\u5904\u7406\u7b56\u7565"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#841-\u6b7b\u9501\u9884\u9632","text":"\u6b7b\u9501\u9884\u9632\u7684\u6838\u5fc3\u601d\u8def\u662f\uff0c\u786e\u4fdd 8.3 \u8282\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8981\u6761\u4ef6\u6c38\u4e0d\u6210\u7acb\uff0c\u6765\u4fdd\u8bc1\u7cfb\u7edf\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u6211\u4eec\u5206\u522b\u8ba8\u8bba\u56db\u4e2a\u6761\u4ef6\u5982\u4f55\u7834\u574f\u3002","title":"8.4.1 \u6b7b\u9501\u9884\u9632"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8411-mutual-exclusion","text":"\u5982\u679c\u4fdd\u8bc1\u7cfb\u7edf\u8d44\u6e90\u90fd\u80fd\u5171\u4eab\uff0c\u5219\u8be5\u6761\u4ef6\u7528\u4e0d\u6210\u7acb\u3002 \u4f46\u662f\u8fd9\u53ea\u662f\u4e2a\u7f8e\u597d\u7684\u613f\u671b\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u8d44\u6e90\u5929\u751f\u5c31\u4e0d\u80fd\u5171\u4eab\uff0c\u6bd4\u5982\u4fe1\u53f7\u91cf\u3002","title":"8.4.1.1 Mutual Exclusion"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8412-hold-and-wait","text":"\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u7533\u8bf7\u8d44\u6e90\u65f6\u4e0d\u80fd\u5360\u6709\u5176\u4ed6\u8d44\u6e90\u3002 \u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\u662f\uff0c\u5728\u5f00\u59cb\u6267\u884c\u524d\u7533\u8bf7\u5e76\u83b7\u5f97\u6240\u6709\u8d44\u6e90\u3002\u6216\u8005\uff0c\u53ea\u5141\u8bb8\u8fdb\u7a0b\u5728\u6ca1\u6709\u8d44\u6e90\u65f6\u624d\u80fd\u7533\u8bf7\u8d44\u6e90\u3002 \u8fd9\u79cd\u65b9\u5f0f\u7684\u95ee\u9898\u662f\uff0c\u8d44\u6e90\u5229\u7528\u7387\u8f83\u4f4e\uff0c\u800c\u4e14\u9700\u8981\u8d44\u6e90\u8f83\u591a\u7684\u8fdb\u7a0b\u53ef\u80fd\u53d1\u751f starvation\u3002","title":"8.4.1.2 Hold and Wait"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8413-no-preemption","text":"\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u4e00\u4e2a\u8d44\u6e90\u4f46\u662f\u6ca1\u6709\u7acb\u523b\u5f97\u5230\u6ee1\u8db3\u65f6\uff0c\u5b83\u5fc5\u987b\u91ca\u653e\u5df2\u7ecf\u6301\u6709\u7684\u6240\u6709\u8d44\u6e90\uff1b\u76f4\u5230\u5b83\u9700\u6c42\u7684\u6240\u6709\u8d44\u6e90\uff08\u5305\u62ec\u521a\u624d\u91ca\u653e\u7684\u90a3\u4e9b\u8d44\u6e90\uff09\u90fd\u53ef\u7528\u65f6\u624d\u80fd\u4e00\u5e76\u83b7\u53d6\u5b83\u4eec\u5e76\u7ee7\u7eed\u6267\u884c\u3002 \u4f46\u662f\u4fe1\u53f7\u91cf\u4e4b\u7c7b\u7684\u8d44\u6e90\u4e5f\u4e0d\u80fd\u8fd9\u6837\u7528\uff1b\u540c\u65f6\u4e5f\u4f1a\u964d\u4f4e\u8d44\u6e90\u5229\u7528\u7387\u3002","title":"8.4.1.3 No Preemption"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8414-circular-wait","text":"\u5bf9\u6240\u6709\u8d44\u6e90\u7c7b\u578b\u8fdb\u884c\u6392\u5e8f\uff0c\u8981\u6c42\u6bcf\u4e2a\u8fdb\u7a0b\u6309\u7167\u9012\u589e\u987a\u5e8f\u7533\u8bf7\u8d44\u6e90\u3002 \u7a0b\u5e8f\u5458\u9700\u8981\u4fdd\u8bc1\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f\u7533\u8bf7\u8d44\u6e90\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u542c\u8bdd\uff0c\u8fd8\u662f\u4f1a\u53d1\u751f\u6b7b\u9501\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u80fd\u5f71\u54cd\u8d44\u6e90\u5229\u7528\u7387\u3002","title":"8.4.1.4 Circular Wait"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#842-\u6b7b\u9501\u907f\u514d","text":"\u907f\u514d\u6b7b\u9501\u9700\u8981\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u8fdb\u7a0b\u672a\u6765\u9700\u8981\u4f7f\u7528\u54ea\u4e9b\u8d44\u6e90\u3001\u8d44\u6e90\u7684\u4f7f\u7528\u987a\u5e8f\u7b49\u3002\u5728\u6bcf\u6b21\u8bf7\u6c42\u5230\u6765\u65f6\uff0c\u5373\u4f7f\u5bf9\u5e94\u8d44\u6e90\u53ef\u7528\uff0c\u7cfb\u7edf\u4e5f\u5e94\u8be5\u7ed3\u5408\u73b0\u6709\u53ef\u7528\u8d44\u6e90\u3001\u73b0\u6709\u5df2\u5206\u914d\u8d44\u6e90\u4ee5\u53ca\u5404\u4e2a\u8fdb\u7a0b\u672a\u6765\u7533\u8bf7\u548c\u91ca\u653e\u7684\u8d44\u6e90\uff0c\u8003\u8651\u662f\u5426\u8ba9\u8fd9\u4e2a\u8bf7\u6c42\u7b49\u5f85\u4ece\u800c\u907f\u514d\u672a\u6765\u53ef\u80fd\u7684\u6b7b\u9501\u3002 \u4e0d\u540c\u6a21\u578b\u53ef\u80fd\u5bf9\u4e0a\u8ff0\u989d\u5916\u4fe1\u606f\u6709\u4e0d\u540c\u7684\u9700\u6c42\u3002\u6700\u7b80\u5355\u4e14\u6700\u6709\u7528\u7684\u6a21\u578b\u7ef4\u62a4\u8fd9\u6837\u7684 \u8d44\u6e90\u5206\u914d\u72b6\u6001 (resource allocation state): \u6bcf\u4e2a\u8fdb\u7a0b\u58f0\u660e\u53ef\u80fd\u5bf9\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b\u7684 \u6700\u5927\u9700\u6c42 (maximum demands) \u5f53\u524d\u7cfb\u7edf\u7684 available \u548c allocated \u7684\u8d44\u6e90\u6570\u76ee\u3002","title":"8.4.2 \u6b7b\u9501\u907f\u514d"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8421-\u8d44\u6e90\u5206\u914d\u56fe\u7b97\u6cd5","text":"\u8fd9\u79cd\u7b97\u6cd5\u9002\u7528\u4e8e\u6bcf\u79cd\u8d44\u6e90\u7c7b\u578b\u53ea\u6709 1 \u4e2a\u5b9e\u4f8b\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u5728\u8d44\u6e90\u5206\u914d\u56fe\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u79cd\u8fb9\uff0c\u53eb claim edge\uff0c\u8868\u793a\u67d0\u4e2a\u8fdb\u7a0b\u672a\u6765 \u53ef\u80fd \u4f1a\u9700\u6c42\u67d0\u79cd\u8d44\u6e90\uff0c\u7528\u865a\u7ebf\u8868\u793a\u3002 \u5f53\u8fd9\u4e2a\u9700\u6c42\u771f\u7684\u51fa\u73b0\u7684\u65f6\u5019\uff0cclaim edge \u8f6c\u4e3a request edge\uff1b\u5f53\u9700\u6c42\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\uff0crequest edge \u8f6c\u4e3a assignment edge\uff1b\u5f53\u8be5\u8fdb\u7a0b\u91ca\u653e\u8be5\u8d44\u6e90\u65f6\uff0cassignment edge \u8f6c\u4e3a claim edge\u3002 \u5f53\u4e00\u4e2a\u9700\u6c42\u6765\u4e86\u7684\u65f6\u5019\uff0c\u5982\u679c request edge \u8f6c\u4e3a assignment edge \u4e0d\u4f1a\u5bfc\u81f4\u56fe\u4e2d\u6709\u4e00\u4e2a cycle\uff0c\u5219\u8be5\u8981\u6c42\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff1b\u5426\u5219\u8be5\u8bf7\u6c42\u5e94\u5f53\u7b49\u5f85\u3002","title":"8.4.2.1 \u8d44\u6e90\u5206\u914d\u56fe\u7b97\u6cd5"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8422-\u5b89\u5168\u72b6\u6001--safe-state","text":"\u5982\u679c\u7cfb\u7edf\u80fd\u591f\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u8d44\u6e90\uff0c\u540c\u65f6\u907f\u514d\u6b7b\u9501\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u5904\u5728 \u5b89\u5168\u72b6\u6001 (safe state) \u3002 \u5177\u4f53\u800c\u8a00\uff0c\u5982\u679c\u67d0\u4e2a\u8d44\u6e90\u5f53\u524d\u6709 \\(A\\) \u4e2a\u7a7a\u95f2\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6d3b\u52a8\u8fdb\u7a0b \\(P_i\\) \uff0c\u5b83\u4eec\u5404\u81ea\u6301\u6709 \\(C_i\\) \u4e2a\u8be5\u8d44\u6e90\uff0c\u5e76\u4ecd\u7136\u9700\u8981 \\(D_i\\) \u4e2a\u8be5\u8d44\u6e90\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217 \\(<P_1, \\dots, P_n>\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u4e00 \\(P_i\\) \uff0c\u90fd\u6709 \\(A + \\sum_{j = 1}^{j < i} C_i \\ge D_i\\) \uff0c\u5219\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u3002 \u5b89\u5168\u72b6\u6001\u4fdd\u8bc1\u4e0d\u53d1\u751f\u6b7b\u9501\u3002 Proof \u7528\u5f52\u7eb3\u6cd5\u3002\u5982\u679c \\(P_i\\) \u7684\u9700\u6c42\u4e0d\u80fd\u7acb\u523b\u6ee1\u8db3\uff0c\u5b83\u53ea\u9700\u8981\u7b49\u5230 \\(\\{P_j\\ |\\ j < i\\}\\) \u5168\u90e8\u5b8c\u6210\uff0c \\(P_i\\) \u5c31\u80fd\u83b7\u53d6\u6240\u9700\u8d44\u6e90\u3002 Example \\(<P1, P0, P2>\\) \u662f\u4e00\u4e2a safe sequence\u3002\u56e0\u6b64\u7cfb\u7edf\u5904\u5728\u5b89\u5168\u72b6\u6001\u3002 \u6839\u636e\u8fd9\u4e00\u6982\u5ff5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u6b7b\u9501\u907f\u514d\u7684\u7b97\u6cd5\uff1a\u8d77\u521d\uff0c\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u3002\u5f53\u6709\u8fdb\u7a0b\u7533\u8bf7\u4e00\u4e2a\u53ef\u7528\u8d44\u6e90\u65f6\uff0c\u7cfb\u7edf\u5e94\u786e\u5b9a\uff0c\u5982\u679c\u7acb\u523b\u8fdb\u884c\u8fd9\u4e00\u5206\u914d\u540e\u7cfb\u7edf\u4ecd\u5904\u4e8e\u5b89\u5168\u72b6\u6001\u5219\u53ef\u4ee5\u5206\u914d\uff0c\u5426\u5219\u5e94\u5f53\u8ba9\u8fdb\u7a0b\u7b49\u5f85\u3002","title":"8.4.2.2 \u5b89\u5168\u72b6\u6001 | Safe State"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8423-\u94f6\u884c\u5bb6\u7b97\u6cd5--bankers-algorithm","text":"\u6211\u4eec\u901a\u8fc7 available, max, allocation, need \u8fd9\u56db\u4e2a\u77e9\u9635\u523b\u753b\u4e00\u4e2a\u65f6\u95f4\u5185\u5404\u4e2a\u8fdb\u7a0b\u5bf9\u5404\u79cd\u8d44\u6e90\u7684\u6301\u6709\u548c\u9700\u6c42\u60c5\u51b5\uff0c\u4ee5\u53ca\u5f53\u524d\u7cfb\u7edf\u7684\u8d44\u6e90\u60c5\u51b5\uff1b\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u8fd9\u4e9b\u6570\u636e\u4fdd\u6301\u7cfb\u7edf\u5904\u4e8e\u5b89\u5168\u72b6\u6001\uff0c\u4ece\u800c\u51b3\u5b9a\u4e00\u4e2a\u9700\u6c42\u662f\u5426\u5e94\u5f53\u88ab\u7acb\u5373\u6ee1\u8db3\u3002 \u53c2\u8003\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u95ee\u9898 1 \u7406\u89e3\uff0c\u627e\u4e00\u4e2a\u5b89\u5168\u5e8f\u5217\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f\uff1a\u9009\u53d6\u4e00\u4e2a need\uff08\u7684\u6bcf\u4e00\u9879\u90fd\u5bf9\u5e94\u5730\uff09\u5c0f\u4e8e available\uff08\u7684\u5bf9\u5e94\u9879\uff09\u7684\u8fdb\u7a0b\uff0c\u5176\u8fd0\u884c\u5b8c\u540e\u4f1a\u5c06 allocation \u91ca\u653e\u56de available\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u800c\u51b3\u5b9a\u4e00\u4e2a\u9700\u6c42\u662f\u5426\u5e94\u5f53\u88ab\u7acb\u5373\u6ee1\u8db3\u7684\u65b9\u6848\u662f\uff0c \u5047\u8bbe \u8fd9\u4e2a\u9700\u6c42\u88ab\u63a5\u53d7\u4e86\uff0c\u6839\u636e\u8be5\u9700\u6c42\u66f4\u65b0\u5bf9\u5e94\u7684 need, available, allocation\uff0c\u5728\u6b64\u72b6\u6001\u4e0b\u63a8\u6f14\u662f\u5426\u6709\u5408\u6cd5\u7684\u5b89\u5168\u5e8f\u5217\u3002\u5982\u679c\u6709\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\uff0c\u5426\u5219\u5e94\u7b49\u5f85\u3002\u53c2\u8003\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u95ee\u9898 2~4\u3002 Question 8.28 Consider the following snapshot of a system: Answer the following questions using the banker\u2019s algorithm: Illustrate that the system is in a safe state by demonstrating an order in which the threads may complete. If a request from thread T4 arrives for (2, 2, 2, 4), can the request be granted immediately? If a request from thread T2 arrives for (0, 1, 1, 0), can the request be granted immediately? If a request from thread T3 arrives for (2, 2, 1, 2), can the request be granted immediately? \u7b54\u6848 \u5982\u56fe\uff1a \u6211\u4eec\u53ef\u4ee5\u5148\u8ba9 T2 \u8fd0\u884c\uff08\u4e5f\u53ef\u4ee5\u662f T3\uff09\uff0c\u6b64\u540e\u53d8\u6210\uff1a \u73b0\u5728\u53ef\u4ee5\u8ba9\u6bcf\u4e2a thread \u8fd0\u884c\uff0c\u56e0\u6b64\u4e4b\u540e\u4efb\u4f55\u4e00\u79cd\u8fd0\u884c\u65b9\u5f0f\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u5982 T2->T4->T0->T1->T3\u3002\u56e0\u6b64\u5f53\u524d\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u53ef\u89c1\uff0c\u6b64\u65f6\u4efb\u4e00\u7ebf\u7a0b\u90fd\u65e0\u6cd5\u6267\u884c\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u4e0d\u80fd\u7acb\u5373\u6ee1\u8db3\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u8fd9\u4e0d\u5f71\u54cd\u6211\u4eec\u5982 1) \u90a3\u6837\u5b8c\u6210\u5168\u90e8\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c\u5373\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002 \u5982\u679c\u6ee1\u8db3\u8fd9\u4e00\u8981\u6c42\uff0c\u4e4b\u540e\u7684\u72b6\u6001\u4e3a\uff1a \u6211\u4eec\u53ef\u4ee5\u6309 T3->T2->T4->T1->T0 \u7b49\u987a\u5e8f\u5b8c\u6210\u5168\u90e8\u7ebf\u7a0b\u7684\u8fd0\u884c\uff0c\u5373\u7cfb\u7edf\u662f\u5b89\u5168\u7684\u3002\u56e0\u6b64\u6b64\u8981\u6c42\u53ef\u4ee5\u7acb\u5373\u6ee1\u8db3\u3002","title":"8.4.2.3 \u94f6\u884c\u5bb6\u7b97\u6cd5 | Banker's Algorithm"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#843-\u6b7b\u9501\u68c0\u6d4b","text":"","title":"8.4.3 \u6b7b\u9501\u68c0\u6d4b"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8431-single-instance-resources","text":"\u53ef\u4ee5\u901a\u8fc7\u8d44\u6e90\u5206\u914d\u56fe\u7684\u53d8\u4f53 wait-for graph \u6765\u89e3\u51b3\uff1a \u5728\u8fd9\u4e2a\u56fe\u91cc\u627e\u73af\uff0c\u7528\u62d3\u6251\u6392\u5e8f\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(V + E)\\) \u7684\uff0c\u8fd9\u6700\u5dee\u60c5\u51b5\u4e0b\u662f \\(O(n^2)\\) \u7684\u3002","title":"8.4.3.1 Single Instance Resources"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8432-multi-instance-resources","text":"\u7c7b\u4f3c\u94f6\u884c\u5bb6\u7b97\u6cd5\u3002\u5982\u679c\u627e\u4e0d\u5230\u4efb\u4f55\u5b89\u5168\u5e8f\u5217\uff0c\u5219\u8bf4\u660e\u7cfb\u7edf\u5904\u4e8e\u6b7b\u9501\u72b6\u6001\u3002","title":"8.4.3.2 Multi-Instance Resources"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#844-\u6b7b\u9501\u6062\u590d","text":"\u6b7b\u9501\u6062\u590d\u6709\u4e24\u4e2a\u9009\u62e9\uff1a","title":"8.4.4 \u6b7b\u9501\u6062\u590d"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8441-\u8fdb\u7a0b\u7ec8\u6b62-treminate-deadlocked-processes","text":"\u7ec8\u6b62\u8fdb\u7a0b\u5e76\u4e0d\u7b80\u5355\uff0c\u5b83\u9700\u8981\u7ef4\u62a4\u7ec8\u6b62\u65f6\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u4e00\u4e9b\u5185\u5bb9\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u907f\u514d\u4ea7\u751f\u91cd\u590d\u7684\u526f\u4f5c\u7528\uff08\u5982\u8f93\u51fa\uff09\uff1b\u8fd9\u9700\u8981\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u3002 Options: \u653e\u5f03\u6240\u6709\u6b7b\u9501\u8fdb\u7a0b\u3002\u8fd9\u6837\u7684\u82b1\u8d39\u4f1a\u5f88\u5927\uff01 \u6bcf\u6b21\u653e\u5f03\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u76f4\u5230\u6b7b\u9501\u73af\u89e3\u9664\u3002\u8fd9\u6837\u7684\u82b1\u8d39\u4e5f\u5f88\u5927\uff0c\u56e0\u4e3a\u6bcf\u6b21\u653e\u5f03\u4e00\u4e2a\u8fdb\u7a0b\u4e4b\u540e\u90fd\u9700\u8981\u8c03\u7528\u6b7b\u9501\u68c0\u6d4b\u7b97\u6cd5\u3002 \u540c\u65f6\u540e\u8005\u9700\u8981\u8003\u8651\u7684\u662f\uff0c\u5982\u4f55\u9009\u62e9\u653e\u5f03\u7684\u8fdb\u7a0b\uff1f\u5e94\u5f53\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c\u53c2\u8003\u5982\u4e0b\u6307\u6807\u9009\u62e9\u9020\u6210\u7684\u4ee3\u4ef7\u6700\u5c0f\u7684\u8fdb\u7a0b\u6765\u7ec8\u6b62\uff1a \u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7 \u5df2\u7ecf\u7b97\u4e86\u591a\u4e45\uff0c\u8fd8\u8981\u7b97\u591a\u4e45 \u7528\u4e86\u54ea\u4e9b\u3001\u591a\u5c11\u8d44\u6e90\uff0c\u662f\u5426\u5bb9\u6613\u62a2\u5360 \u8fd8\u9700\u8981\u591a\u5c11\u8d44\u6e90 \u7ec8\u6b62\u8fd9\u4e00\u8fdb\u7a0b\u7684\u8bdd\u8fd8\u9700\u8981\u7ec8\u6b62\u591a\u5c11\u8fdb\u7a0b \u8fdb\u7a0b\u662f\u4ea4\u4e92\u7684\u8fd8\u662f\u6279\u5904\u7406\u7684","title":"8.4.4.1 \u8fdb\u7a0b\u7ec8\u6b62 Treminate deadlocked processes"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/III_process_sync/8_deadlocks/#8442-\u8d44\u6e90\u62a2\u5360-resource-preemption","text":"\u4e0d\u65ad\u62a2\u5360\u8d44\u6e90\u7ed9\u5176\u4ed6\u8fdb\u7a0b\u7528\uff0c\u76f4\u5230\u6d88\u9664\u6b7b\u9501\u73af\u4e3a\u6b62\u3002 \u9700\u8981\u8003\u8651\u4e09\u4e2a\u95ee\u9898\uff1a \u9009\u62e9\u727a\u7272\u8fdb\u7a0b (Select a victim) \u3002\u62a2\u5360\u54ea\u4e9b\u8fdb\u7a0b\u7684\u54ea\u4e9b\u8d44\u6e90\uff1f\u8fd9\u548c\u524d\u4e00\u8282\u7684\u8ba8\u8bba\u5dee\u4e0d\u591a\u3002 \u56de\u6eda (Rollback) \u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7684\u82e5\u5e72\u8d44\u6e90\u88ab\u62a2\u5360\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u8fdb\u7a0b \u56de\u6eda \u5230\u67d0\u4e2a\u5b89\u5168\u72b6\u6001\uff0c\u5373\u56de\u6eda\u5230\u7533\u8bf7\u90a3\u4e9b\u88ab\u62a2\u5360\u7684\u8d44\u6e90\u4e4b\u524d\u3002 \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\uff0c\u5f88\u96be\u786e\u5b9a\u4ec0\u4e48\u662f\u5b89\u5168\u72b6\u6001\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6848\u5c31\u662f\u5b8c\u5168\u56de\u6eda\uff0c\u4e5f\u5c31\u662f\u7ec8\u6b62\u8fdb\u7a0b\u5e76\u91cd\u65b0\u6267\u884c\u3002\u56de\u6eda\u5230\u8db3\u591f\u6253\u65ad\u6b7b\u9501\u7684\u72b6\u6001\u66f4\u52a0\u7ecf\u6d4e\uff0c\u4f46\u662f\u9700\u8981\u7cfb\u7edf\u4fdd\u5b58\u66f4\u591a\u8d44\u6e90\u3002 \u9965\u997f (Starvation) \u3002\u5982\u4f55\u4fdd\u8bc1\u4e0d\u4f1a\u6c38\u8fdc\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u62a2\u5360\u8d44\u6e90\uff1f\u5728\u4ee3\u4ef7\u8bc4\u4ef7\u4e2d\u589e\u52a0\u56de\u6eda\u6b21\u6570\uff0c\u4e5f\u7c7b\u4f3c\u4e8e priority aging\u3002","title":"8.4.4.2 \u8d44\u6e90\u62a2\u5360 Resource preemption"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/","text":"9 Main Memory | \u4e3b\u5b58 \u00b6 9.1 Background \u00b6 9.1.1 Memory \u00b6 \u5185\u5b58\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\uff0cCPU \u6839\u636e PC (Program Counter) \u7684\u503c\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u6307\u4ee4\u3002\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\uff0c\u81f3\u5c11\u90e8\u5206\u7a0b\u5e8f\u53ca\u5176\u8bbf\u95ee\u7684\u6570\u636e\u5e94\u5728\u5185\u5b58\u4e2d\uff08\u6216\u8005\u66f4\u660e\u786e\u5730\uff0c\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u91cc\uff09\u3002 CPU \u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7684\u901a\u7528\u5b58\u50a8\u53ea\u6709 main memory \u548c registers\u3002\u5bf9 registers \u7684\u8bbf\u95ee\u901a\u5e38\u53ef\u4ee5\u5728\u4e00\u4e2a CPU \u65f6\u949f\u5468\u671f\u4e2d\u5b8c\u6210\uff0c\u800c\u5b8c\u6210\u5185\u5b58\u7684\u8bbf\u95ee\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u65f6\u949f\u5468\u671f\u3002\u5728\u8fd9\u4e9b\u65f6\u949f\u5468\u671f\u91cc\uff0c\u7531\u4e8e\u6ca1\u6709\u7528\u6765\u5b8c\u6210\u6307\u4ee4\u7684\u6570\u636e\uff0c\u8fd9\u4f1a\u5f15\u8d77 stall \uff08\u6682\u505c\uff0c\u629b\u951a\uff09\u3002\u4e3a\u4e86\u8865\u6551\uff0c\u6211\u4eec\u5728 CPU \u82af\u7247\u4e0a\u589e\u8bbe\u66f4\u5feb\u7684\u5185\u5b58\uff0c\u79f0\u4e3a cache \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u62a4\u5185\u5b58\u7a7a\u95f4\uff0c\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u6216\u5176\u4ed6\u7528\u6237\u7a0b\u5e8f\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002 9.1.2 Address Binding \u00b6 \u5982\u6211\u4eec\u524d\u9762\u6240\u8bf4\uff0c\u6267\u884c\u7a0b\u5e8f\u5fc5\u987b\u5c06\u5176\u8c03\u5165\u5185\u5b58\u4ee5\u4f9b\u8fdb\u7a0b\u4f7f\u7528\u3002\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740\u901a\u5e38\u662f\u7528\u7b26\u53f7\u8868\u793a\uff08 symbolic , \u4f8b\u5982\u5404\u79cd\u53d8\u91cf\u3001\u51fd\u6570\u540d\uff1b\u6c47\u7f16\u4e2d\u7684 label \u7b49\uff09\uff1b\u7f16\u8bd1\u5668\u4f1a\u5c06\u5176\u7ed1\u5b9a\u5230 relocatable addresses \uff0c\u5373\u76f8\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u6bb5/\u6a21\u5757\u7b49\u7684\u504f\u79fb\uff0c\u4f8b\u5982 sp - 8 , ds:[0] \uff1b\u94fe\u63a5\u5668\u6216\u52a0\u8f7d\u5668\uff08linker / loader\uff09\u4f1a\u5c06 relocatable addresses \u7ed1\u5b9a\u5230 absolute addresses \u3002\u5f53\u7136\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u7a0b\u5e8f\u6240\u5904\u7684\u5185\u5b58\u5730\u5740\uff0c\u5219\u4f1a\u751f\u6210 absolute code \u3002 9.2 Contiguous Memory Allocation - Partitioning Strategies \u00b6 \u5728 Batch \u7cfb\u7edf\u4e2d\uff0c\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5165\u7269\u7406\u5185\u5b58\uff0c\u5e76\u88ab\u8fd0\u884c\u81f3\u7ed3\u675f\u3002\u5982\u679c\u7a0b\u5e8f\u6240\u9700\u7684\u5b58\u50a8\u7a7a\u95f4\u6bd4\u7269\u7406\u5185\u5b58\u5927\uff0c\u5219\u5c06\u7a0b\u5e8f\u5206\u5f00\u4e3a\u53ef\u4ee5\u8fd0\u884c\u81f3\u4ea7\u751f\u67d0\u4e2a\u7ed3\u679c\u4e14\u5927\u5c0f\u53ef\u4ee5\u653e\u5165\u7a7a\u4f59\u5185\u5b58\u7684\u90e8\u5206\uff0c\u9010\u4e2a\u8fd0\u884c\uff0c\u5c06\u8fd0\u884c\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u90e8\u5206\u3002 \u4e0e\u8fd9\u79cd \"prehistroy\"\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u628a\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u4e14\u652f\u6301\u5176\u5f7c\u6b64\u4e4b\u95f4\u7684\u5feb\u901f\u5207\u6362\u3002\u6700\u7b80\u5355\u7684\u5185\u5b58\u5206\u914d\u65b9\u6cd5\u4e4b\u4e00\uff0c\u5c31\u662f\u5c06\u5185\u5b58\u5206\u6210\u8bb8\u591a\u7684 partition\uff0c\u6bcf\u4e2a partition \u5305\u542b\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5176\u8981\u6c42\u6709\uff1a Protection: \u4fdd\u8bc1\u8fdb\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u4e92\u76f8\u95ef\u5165\u5bf9\u65b9\u7684\u5b58\u50a8\u3002 Fast execution: \u4e0d\u80fd\u7531\u4e8e protection \u964d\u4f4e\u8bbf\u95ee\u5185\u5b58\u7684\u6548\u7387\u3002 Fast context switch: \u6bcf\u5f53\u8fdb\u884c context switch \u65f6\uff0c\u53ef\u4ee5\u6bd4\u8f83\u5feb\u5730\u627e\u5230\u5e76\u8bbf\u95ee\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u5b58\u3002 \u5f53\u8fdb\u7a0b\u8fdb\u5165\u7cfb\u7edf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u5404\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u9700\u8981\u4ee5\u53ca\u5f53\u524d\u7684\u7a7a\u95f2\u5185\u5b58\u7a7a\u95f4\u6765\u51b3\u5b9a\u4e3a\u54ea\u4e9b\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u5206\u914d\u5230\u4e86\u7a7a\u95f4\uff0c\u4ed6\u5c06\u88ab\u8f7d\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u7ade\u4e89 CPU \u65f6\u95f4\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u5b83\u91ca\u653e\u5b83\u7684\u7a7a\u95f4\u3002 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u7a7a\u95f4\u6765\u8fd0\u884c\uff0c\u4f46\u8fd9\u91cc\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u6ee1\u8db3\u5176\u8981\u6c42\uff0c\u6709\u4e24\u79cd\u53ef\u9009\u7684\u89e3\u51b3\u529e\u6cd5\u3002\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u62d2\u7edd\u5176\u8bf7\u6c42\u5e76\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff1b\u53e6\u4e00\u79cd\u662f\u5c06\u5176\u52a0\u5165 waiting queue \u4e2d\uff0c\u5f53\u6709\u5185\u5b58\u88ab\u91ca\u653e\u65f6 CPU \u6765\u68c0\u67e5\u662f\u5426\u4e3a\u5176\u5206\u914d\u5185\u5b58\u3002 9.2.1 Fixed Partition \u00b6 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u56fa\u5b9a partition \u7684\u5927\u5c0f\uff08\u9664\u4e86 OS \u4f7f\u7528\u7684\u5185\u5b58\uff09\u3002\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a partition \u662f\u5426\u88ab\u5360\u7528\u5373\u53ef\u3002\u4f46\u663e\u7136\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u5185\u5b58\u6d6a\u8d39\u3002\u5982\u4e0b\u56fe\uff1a \u5982\u56fe Process 1 \u4f7f\u7528\u4e86 Partition 1\uff0c\u4f46\u5176\u6240\u9700\u7a7a\u95f4\u5c0f\u4e8e Partition 1 \u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u7ea2\u8272\u90e8\u5206\u7684\u5185\u5b58\u6ca1\u6709\u88ab\u4f7f\u7528\u4e14\u4e0d\u80fd\u88ab\u522b\u7684\u8fdb\u7a0b\u4f7f\u7528\uff08\u56e0\u4e3a\u6bcf\u4e2a partition \u53ea\u80fd\u88ab\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\uff09\u3002\u7531\u4e8e\u8fd9\u662f partition \u5185\u90e8\u7684\u4e0d\u53ef\u7528\u5185\u5b58\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Internal Fragmentation \u3002\u8fd9\u4f1a\u5e26\u6765\u6781\u5927\u7684\u5185\u5b58\u635f\u5931\uff0c\u5c24\u5176\u662f\u5728\u8fdb\u7a0b\u4e4b\u95f4\u6240\u9700\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u5dee\u8ddd\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff08\u56e0\u4e3a\u6211\u4eec\u603b\u662f\u9700\u8981\u6839\u636e\u6240\u9700\u7a7a\u95f4\u6700\u5927\u7684\u8fdb\u7a0b\u5207\u5206\u5185\u5b58\uff09\u3002 9.2.2 Variable Partition \u00b6 \u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u4e0d\u56fa\u5b9a partition \u7684\u5927\u5c0f\u3002\u5728\u8fd9\u79cd\u65b9\u6848\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u8868\uff0c\u8bb0\u5f55\u53ef\u7528\u548c\u5df2\u7528\u7684\u5185\u5b58\u3002\u6700\u5f00\u59cb\u65f6\u6574\u4e2a\u5185\u5b58\u5c31\u662f\u4e00\u5927\u5757\u53ef\u7528\u7684\u5185\u5b58\u5757\uff08\u5c06\u53ef\u7528\u5185\u5b58\u5757\u79f0\u4e3a hole \uff09\uff1b\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u8fd0\u884c\u540e\uff0c\u5185\u5b58\u53ef\u80fd\u4f1a\u5305\u542b\u4e00\u7cfb\u5217\u4e0d\u540c\u5927\u5c0f\u7684\u5b54\u3002\u4e0b\u56fe\u662f\u4e00\u4e2a\u793a\u4f8b\u3002 \u5f88\u53ef\u80fd\u5728\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u7684\u8fd0\u884c\u540e\uff0c\u7a7a\u95f2\u5185\u5b58\u7a7a\u95f4\u88ab\u5206\u4e3a\u5927\u91cf\u7684 hole\uff0c\u5b83\u4eec\u603b\u4f53\u52a0\u8d77\u6765\u53ef\u4ee5\u6ee1\u8db3\u8fdb\u7a0b\u8981\u6c42\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u8fde\u7eed\uff0c\u6bcf\u4e00\u4e2a\u5c0f\u7684 hole \u90fd\u4e0d\u53ef\u4ee5\u88ab\u5229\u7528\u3002\u6211\u4eec\u79f0\u8fd9\u79cd\u95ee\u9898\u4e3a External Fragmentation \uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e0d\u53ef\u7528\u5185\u5b58\u662f\u5206\u5e03\u5728 partition \u4e4b\u5916\u7684\u3002 9.2.3 Dynamic Storage-Allocation Problem \u00b6 \u6839\u636e\u4e00\u7ec4 hole \u6765\u5206\u914d\u5927\u5c0f\u4e3a n \u7684\u8bf7\u6c42\uff0c\u79f0\u4e3a dynamic storage-allocation problem \u3002\u8fd9\u4e2a\u95ee\u9898\u6700\u5e38\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u5305\u62ec\uff1a first-fit - \u5206\u914d\u9996\u4e2a\u8db3\u591f\u5927\u7684 hole\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u5206\u914d\u96c6\u4e2d\u5728\u4f4e\u5730\u5740\u533a\uff0c\u5e76\u5728\u6b64\u5904\u4ea7\u751f\u5927\u91cf\u7684\u788e\u7247\uff0c\u5728\u6bcf\u6b21\u5c1d\u8bd5\u5206\u914d\u7684\u65f6\u5019\u90fd\u4f1a\u904d\u5386\u5230\uff0c\u589e\u5927\u67e5\u627e\u7684\u5f00\u9500\u3002 best-fit - \u5206\u914d\u6700\u5c0f\u7684\u8db3\u591f\u5927\u7684 hole\u3002\u9664\u975e\u7a7a\u95f2\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\uff0c\u5426\u5219\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u5bf9\u6574\u4e2a\u5217\u8868\u8fdb\u884c\u904d\u5386\u3002\u8fd9\u79cd\u65b9\u6cd5\u540c\u6837\u4f1a\u7559\u4e0b\u8bb8\u591a\u788e\u7247\u3002 worst-fit - \u5206\u914d\u6700\u5927\u7684 hole\u3002\u540c\u6837\uff0c\u9664\u975e\u5217\u8868\u6709\u5e8f\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u904d\u5386\u6574\u4e2a\u5217\u8868\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u662f\u6bcf\u6b21\u5206\u914d\u540e\u901a\u5e38\u4e0d\u4f1a\u4f7f\u5269\u4e0b\u7684\u7a7a\u95f2\u5757\u592a\u5c0f\uff0c\u8fd9\u5728\u4e2d\u5c0f\u8fdb\u7a0b\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\u6027\u80fd\u8f83\u597d\uff0c\u5e76\u4e14\u4ea7\u751f\u788e\u7247\u7684\u51e0\u7387\u66f4\u5c0f\u3002 Simulations have shown that both first fit and best fit are better than worst fit in terms of decreasing time and storage utilization. Neither first fit nor best fit is clearly better than the other in terms of storage utilization, but first fit is generally faster. 9.2.4 Protection \u00b6 \u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u4e14\u4ec5\u80fd\u8bbf\u95ee\u81ea\u5df1\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u5957 base \u548c limit \u5bc4\u5b58\u5668\u6765\u786e\u5b9a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u7a7a\u95f4\uff1a \u6bcf\u5f53 context switch \u5230\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u65f6\uff0cCPU \u4f1a load \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u3002\u6bcf\u5f53 user mode \u60f3\u8981\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\u65f6\uff0cCPU \u90fd\u8981\u68c0\u67e5\u5176\u662f\u5426\u8bd5\u56fe\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\uff1b\u5982\u679c\u662f\uff0c\u5219\u4f1a\u5f15\u53d1\u4e00\u4e2a trap \u5e76\u88ab\u5f53\u505a\u81f4\u547d\u9519\u8bef\u5904\u7406\uff08\u901a\u5e38\u4f1a terminate \u6389\u8fdb\u7a0b\uff09\uff1a 9.3 Segmentation \u00b6 9.3.1 Basic Method \u00b6 \u867d\u7136\u6211\u4eec\u7a0b\u5e8f\u4e2d\u7684\u4e3b\u51fd\u6570\u3001\u6570\u7ec4\u3001\u7b26\u53f7\u8868\u3001\u5b50\u51fd\u6570\u7b49\u7b49\u5185\u90e8\u9700\u8981\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\uff0c\u4f46\u662f\u8fd9\u4e9b\u6a21\u5757\u4e4b\u95f4\u7684\u5148\u540e\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\u56e0\u6b64\uff0c\u867d\u7136\u5b9e\u9645\u4e0a\u5185\u5b58\u662f\u4e00\u4e2a\u7ebf\u6027\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u4f46\u662f\u5728\u7528\u6237\u770b\u6765\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u957f\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a \u5373\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u662f\u7531\u4e00\u7ec4 segment \uff08\u6bb5\uff09\u6784\u6210\u7684\uff0c\u6bcf\u4e2a segment \u90fd\u6709\u5176\u540d\u79f0\u548c\u957f\u5ea6\u3002\u6211\u4eec\u53ea\u8981\u77e5\u9053 segment \u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740 (base) \u548c\u6bb5\u5185\u504f\u79fb\u5730\u5740 (offset) \u5c31\u53ef\u4ee5\u5bf9\u5e94\u5230\u7269\u7406\u5730\u5740\u4e2d\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a segment\uff0c\u6211\u4eec\u7ed9\u5176\u4e00\u4e2a\u7f16\u53f7\u3002\u5373\uff0c\u6211\u4eec\u901a\u8fc7\u4e8c\u5143\u6709\u5e8f\u7ec4 \u8868\u793a\u4e86\u4e00\u4e2a\u5730\u5740\u3002\u8fd9\u79cd\u8868\u793a\u79f0\u4e3a logical address \uff08\u903b\u8f91\u5730\u5740\uff09\u6216 virtual address \uff08\u865a\u62df\u5730\u5740\uff09\u3002 \u901a\u5e38\uff0c\u5728\u7f16\u8bd1\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u6784\u9020\u6bb5\u3002 9.3.2 Logical Address & MMU \u00b6 \u8981\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u5230\u7269\u7406\u5730\u5740\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u627e\u5230\u6bb5\u7684\u57fa\u5730\u5740\u3002\u6211\u4eec\u6709\u4e00\u4e2a segment table \uff0c\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u4ee5 segment-number \u7d22\u5f15\uff0c\u5b58\u50a8\u5176 \u6bb5\u57fa\u5730\u5740 segment-base \u548c \u6bb5\u754c\u9650 segment-limit \uff08\u53ef\u80fd\u8fd8\u5305\u542b\u6743\u9650\u4f4d\uff09\u3002\u56e0\u6b64\u903b\u8f91\u5730\u5740\u7684\u6620\u5c04\u65b9\u5f0f\u5982\u4e0b\u56fe\uff1a \u8fd9\u4e00\u8fc7\u7a0b\u662f\u7531\u786c\u4ef6\u8bbe\u5907 MMU (Memory-Management Unit, \u5185\u5b58\u7ba1\u7406\u5355\u5143) \u5b8c\u6210\u7684\u3002CPU \u4f7f\u7528\u7684\u662f\u903b\u8f91\u5730\u5740\uff0c\u800c\u5185\u5b58\u5bfb\u5740\u4f7f\u7528\u7684\u662f\u7269\u7406\u5730\u5740\uff0cMMU \u5b8c\u6210\u7684\u662f\u7ffb\u8bd1\uff08\u6620\u5c04\uff09\u548c\u4fdd\u62a4\u5de5\u4f5c\uff1a \u8fd9\u91cc\u7684 relocation register \u5373\u4e3a base register\u3002 9.3.3 Problems \u00b6 \u5206\u6bb5\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u5206\u4e3a\u6570\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u5176\u5185\u5b58\u5206\u914d\u7684\u7b56\u7565\u4e0e\u7b80\u5355\u7684 partition \u662f\u4e00\u81f4\u7684\u3002\u56e0\u6b64\uff0c\u5206\u6bb5\u4ecd\u7136\u4f1a\u5b58\u5728 external fragmentation \u7684\u95ee\u9898\u3002\u518d\u6b21\u56de\u987e\u8fd9\u4e2a\u95ee\u9898\uff1a\u5176\u8868\u5f81\u662f\u603b\u7a7a\u4f59\u5185\u5b58\u662f\u8db3\u591f\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u4e0d\u8fde\u7eed\u5bfc\u81f4\u5176\u65e0\u6cd5\u4f7f\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u6838\u5fc3\u70b9\u5728\u4e8e not contiguous \u3002\u6211\u4eec\u6709\u4e24\u79cd\u601d\u8def\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff1a\u5c06\u5185\u5b58\u91cd\u6392\u4f7f\u5f97 holes \u8fde\u6210\u4e00\u5757\uff1b\u6216\u8005\u8bbe\u8ba1\u65b9\u6848\u8ba9\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u8fde\u7eed\u7684\u5730\u5740\u3002 Compaction \u5c31\u662f\u5c06\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u91cd\u6392\u4f7f\u5f97\u6240\u6709\u7a7a\u95f2\u7a7a\u95f4\u8fde\u7eed\u3002\u8fd9\u4e00\u64cd\u4f5c\u8981\u6c42\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u662f relocatable \u7684\uff0c\u5373\u5176\u5730\u5740\u662f\u76f8\u5bf9 base \u7684\u504f\u79fb\uff1b\u8fd9\u4e00\u8981\u6c42\u5728\u524d\u9762\u4e24\u79cd\u5185\u5b58\u5206\u914d\u65b9\u5f0f\u4e2d\u662f\u6ee1\u8db3\u7684\u3002\u4f46\u662f\u8fd9\u4e00\u64cd\u4f5c\u9700\u8981\u5c06\u5185\u5b58\u9010\u4e00\u590d\u5236\uff0c\u8fd9\u5c06\u6d88\u8017\u5f88\u591a\u65f6\u95f4\u3002 \u8003\u8651\u300c\u8ba9\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u8fde\u7eed\u7684\u5730\u5740\u300d\u3002\u5b9e\u9645\u4e0a\uff0c\u5206\u6bb5\u5df2\u7ecf\u662f\u8fd9\u4e2a\u65b9\u5411\u4e0a\u505a\u51fa\u7684\u4e00\u79cd\u5c1d\u8bd5\u4e86\uff0c\u56e0\u4e3a\u5b83\u5c06\u7a0b\u5e8f\u5206\u4e3a\u4e86\u51e0\u5757\uff0c\u76f8\u6bd4\u4e8e\u7b80\u5355\u7684 partition\uff0c\u5206\u6bb5\u6709\u52a9\u4e8e\u51cf\u5c0f external fragmentation\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa paging\u3002 9.4 Paging \u00b6 Paging \uff08\u5206\u9875\uff09\u662f\u4e00\u79cd\u5141\u8bb8\u8fdb\u7a0b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u5b83\u907f\u514d\u4e86 external fragmentation \u548c Compaction\u3002\u5404\u79cd\u5f62\u5f0f\u7684 paging \u88ab\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\uff1b\u5b9e\u73b0 paging \u9700\u8981 OS \u548c\u786c\u4ef6\u7684\u534f\u4f5c\u3002 9.4.1 Basic Method \u00b6 \u6211\u4eec\u5c06 physical memory \u5207\u5206\u6210\u7b49\u5927\u5c0f\u7684\u5757\uff082 \u7684\u5e42\uff0c\u901a\u5e38\u4e3a 4KB = 2 12 B\uff09\uff0c\u79f0\u4e3a frames \uff08\u5e27\uff09\uff1b\u5c06 logical memory \u5207\u5206\u6210\u540c\u6837\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a pages \uff08\u9875\uff09\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8981\u6267\u884c\u65f6\uff0c\u5176\u5185\u5bb9\u586b\u5230\u4e00\u4e9b\u53ef\u7528\u7684 frame \u4e2d\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\u53ef\u4ee5\u7528\u8fd9\u4e2a frame \u7684 base \u6216 number\uff08\u7531\u4e8e frame \u662f\u88ab\u7b49\u5927\u5207\u5206\u51fa\u6765\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a frame \u7684 base \u4e5f\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a frame number\uff09\u4ee5\u53ca\u76f8\u5bf9\u8fd9\u4e2a base \u7684 offset \u8868\u793a\uff1b\u540c\u65f6 CPU \u751f\u6210\u903b\u8f91\u5730\u5740\uff0c\u903b\u8f91\u5730\u5740\u5305\u542b\u4e00\u4e2a page number \u548c\u4e00\u4e2a page offset\uff1b\u53e6\u6709\u4e00\u4e2a page table \uff0c\u5b83\u4ee5 page number \u7d22\u5f15\uff0c\u5176\u4e2d\u7684\u7b2c i \u9879\u5b58\u50a8\u7684\u662f page number \u4e3a i \u7684 page \u6240\u5728\u7269\u7406\u5185\u5b58\u7684 frame \u7684 base\u3002\u8fd9\u6837\uff0c\u6bcf\u4e00\u4e2a page \u5c06\u901a\u8fc7\u5176 page number \u6620\u5c04\u5230\u4e00\u4e2a frame \u4e0a\uff1b\u8fdb\u800c page \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\u4e5f\u901a\u8fc7 offset \u4e0e\u5bf9\u5e94\u7684 frame \u5efa\u7acb\u6620\u5c04\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53 MMU \u9700\u8981\u5c06\u4e00\u4e2a logical address \u7ffb\u8bd1\u4e3a physical address \u65f6\uff0c\u5b83\u9700\u8981\u83b7\u53d6 page number p \uff0c\u5728 page table \u4e2d\u627e\u5230\u7b2c p \u4e2a page \u5bf9\u5e94\u7684\u7684 frame number\uff08\u4e5f\u5c31\u662f frame base\uff09 f \uff0c\u5728 f \u540e\u9762\u8fde\u63a5\u4e0a offset d \u5c31\u5f97\u5230\u4e86\u5bf9\u5e94\u7684 physical address\u3002\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0clogical address \u548c physical address \u7684 offset \u5e94\u662f\u4e00\u81f4\u7684\u3002 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\u65f6\uff0c\u5176\u6bcf\u4e00\u9875\u90fd\u9700\u8981\u4e00\u5e27\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8fdb\u7a0b\u9700\u8981 n \u9875\uff0c\u5219\u5185\u5b58\u4e2d\u9700\u8981\u6709 n \u4e2a\u5e27\u3002\u5982\u679c\u6709\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\uff1a\u8fdb\u7a0b\u7684\u6bcf\u4e00\u9875\u88c5\u5165\u4e00\u4e2a\u5e27\uff0cframe number \u653e\u5165\u8fdb\u7a0b\u7684 page table \u4e2d\u3002 \u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7269\u7406\u5185\u5b58\uff0c\u5b83\u5e94\u8be5\u77e5\u9053\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u7ec6\u8282\uff0c\u5373\u5171\u6709\u591a\u5c11\u5e27\u3001\u5e27\u662f\u5426\u7a7a\u95f2\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728 frame table \u4e2d\uff0c\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u4e2a\u5e27\uff0c\u4fdd\u5b58\u5176\u662f\u5426\u88ab\u5360\u7528\uff1b\u5982\u679c\u88ab\u5360\u7528\uff0c\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b\u7684\u54ea\u4e2a\u9875\u5360\u7528\u3002 9.4.2 Why \"Not Contiguous\" \u00b6 \u8003\u8651\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u4ec0\u4e48\u80fd\u591f\u6ee1\u8db3\u300cnot contiguous\u300d\uff1a\u5728\u524d\u9762\u4e24\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981 contiguous \u662f\u56e0\u4e3a\u5728\u8fd0\u884c\u6bcf\u6761\u6307\u4ee4\u8fc7\u540e PC \u4f1a +1\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u4fdd\u8bc1 contiguous\uff0c\u4ece\u800c\u8ba9 PC+1 \u786e\u5b9e\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u800c\u5728 paging \u4e2d\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4ecd\u7136\u4fdd\u8bc1\u4e86 PC+1 \u540e\u786e\u5b9e\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u53ea\u662f paging \u59cb\u7ec8\u4fdd\u5b58\u7684\u90fd\u662f logical address\u3002Logical address \u7684\u683c\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u53ef\u89c1\uff0c\u5f53 d \u662f \\(2^n - 1\\) \u65f6\uff0c \\(<p, d> + 1\\) \u5373\u4e3a \\(<p+1, 0>\\) \uff08\u5c31\u662f\u4e8c\u8fdb\u5236\u8fdb\u4e86\u4f4d\uff09\u3002\u8fd9\u65f6\u867d\u7136\u4e00\u4e2a page \u5df2\u7ecf\u7ed3\u675f\uff0c\u8fdb\u5165\u5230\u4e86\u4e0b\u4e00\u4e2a page\uff0c\u8fd9\u4e24\u4e2a page \u5bf9\u5e94\u7684 frame \u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u4f46 logical address \u662f\u8fde\u7eed\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7528 logical address \u7684\u8fde\u7eed\u4ee3\u66ff\u4e86 physical address \u7684\u8fde\u7eed\u3002 \u4e0b\u56fe\u662f\u4e00\u4e2a\u66f4\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a\u5047\u5982\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u6709 4 \u4f4d\uff0c\u5176\u4e2d p \u548c d \u5404\u5360 2 \u4f4d\u3002\u4f8b\u5982 MMU \u9700\u8981\u5bfb\u627e\u903b\u8f91\u5730\u5740 1101[13] \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4ece\u800c\u83b7\u5f97\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u5b83\u9996\u5148\u53d6 1101[13] \u7684\u524d 2 \u4f4d 11[3]\uff0c\u8bfb\u53d6 page table \u7684\u7b2c 3 \u9879\uff0c\u7ed3\u679c\u4e3a 010[2]\uff08frame number \u4e0d\u6b62 2 \u4f4d\uff0c\u56e0\u4e3a frame \u4e0d\u6b62 4 \u4e2a\uff09\uff0c\u7136\u540e\u5c06 frame number 10 \u4e0e offset 01 \u8fde\u8d77\u6765\uff0c\u5373 01001[9]\uff0c\u56e0\u6b64 logical address 1101[13] \u5bf9\u5e94\u7684\u662f physical address 01001[9]\uff0c\u5185\u5bb9\u4e3a n \u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u5728 logical memory \u7684\u89c6\u89d2\u91cc\uff0ch \u548c i \u662f\u76f8\u8fde\u7684\uff1b\u4f46\u5b9e\u9645\u4e0a\uff0clogical address 0111[7] \u5bf9\u5e94\u7684 physical address \u4e3a 11011[27]\uff0clogical address 1000[8] \u5bf9\u5e94\u7684 physical address \u4e3a 00100[4]\uff0c\u5728 physical memory \u4e2d\u662f\u4e0d\u8fde\u7eed\u7684\u3002 Every logical address is bound by the paging hardware to some physical address. Using paging is similar to using a table of base (or relocation) registers, one for each frame of memory. 9.4.3 Hardware Support \u00b6 Page table \u662f\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4efd\u7684\u7ed3\u6784\uff0c\u5176\u786c\u4ef6\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u3002 9.4.3.1 Simplest method \u00b6 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528\u4e00\u7ec4\u4e13\u7528\u7684\u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u3002\u8fd9\u4e00\u5b9e\u73b0\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u65f6\u975e\u5e38\u8fc5\u901f\uff0c\u56e0\u4e3a\u5bf9\u5bc4\u5b58\u5668\u7684\u8bbf\u95ee\u662f\u5341\u5206\u9ad8\u6548\u7684\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6210\u672c\u7b49\u539f\u56e0\uff0c\u5bc4\u5b58\u5668\u7684\u6570\u91cf\u6709\u9650\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u6cd5\u8981\u6c42 page table \u7684\u5927\u5c0f\u5f88\u5c0f\uff1b\u540c\u65f6\uff0c\u7531\u4e8e\u4e13\u7528\u5bc4\u5b58\u5668\u53ea\u6709\u4e00\u7ec4\uff0c\u56e0\u6b64 context switch \u65f6\u9700\u8981\u5b58\u50a8\u5e76\u91cd\u65b0\u52a0\u8f7d\u8fd9\u4e9b\u5bc4\u5b58\u5668\u3002 9.4.3.2 Page table in memory & PTBR \u00b6 \u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u673a\u5141\u8bb8\u9875\u8868\u975e\u5e38\u5927\uff0c\u56e0\u6b64\u5bf9\u4e8e\u8fd9\u4e9b\u673a\u5668\uff0c\u91c7\u7528\u5feb\u901f\u5bc4\u5b58\u5668\u5b9e\u73b0\u9875\u8868\u5c31\u4e0d\u53ef\u884c\u4e86\u3002\u6211\u4eec\u5c06\u9875\u8868\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u7528 Page-Table Base Register (PTBR) \u6307\u5411\u9875\u8868\u3002\u5728 context switch \u65f6\u53ea\u9700\u8981\u4fee\u6539 PTBR\u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u6548\u7387\u5b58\u5728\u95ee\u9898\u3002\u8981\u8bbf\u95ee logical address \u5bf9\u5e94\u7684 physical address\uff0c\u6211\u4eec\u9996\u5148\u8981\u6839\u636e PTBR \u548c page number \u6765\u627e\u5230\u9875\u8868\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\uff0c\u5e76\u5728\u5176\u4e2d\u5f97\u5230 page \u5bf9\u5e94\u7684 frame number\uff0c\u8fd9\u9700\u8981\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\uff1b\u7136\u540e\u6211\u4eec\u6839\u636e frame number \u548c page offset \u7b97\u51fa\u771f\u5b9e\u7684 physical address\uff0c\u5e76\u8bbf\u95ee\u5bf9\u5e94\u7684\u5b57\u8282\u5185\u5bb9\u3002\u5373\uff0c\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u9700\u8981\u4e24\u6b21\u5185\u5b58\u8bbf\u95ee\uff0c\u8fd9\u4f1a\u52a0\u500d\u539f\u672c\u7684\u5185\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u96be\u4ee5\u63a5\u53d7\u7684\u3002 9.4.3.3 TLB \u00b6 \u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u7528\u5230\u4e00\u4e2a\u4e13\u7528\u7684\u9ad8\u901f\u67e5\u627e\u786c\u4ef6 cache ( associative memory \uff0c\u652f\u6301 parallel search )\uff0c\u8fd9\u91cc\u79f0\u5b83\u4e3a translation look-aside buffer (TLB) \u3002TLB \u7684\u6bcf\u4e2a\u6761\u76ee\u7531 key & value \u7ec4\u6210\uff0c\u5206\u522b\u8868\u793a page number \u548c frame number\uff0c\u901a\u5e38\u6709 64~1024 \u4e2a\u6761\u76ee\uff08PPT \u4e0a\u8bf4 64~1024\uff0c\u8bfe\u672c\u4e0a\u8bf4 32~1024\uff0c\u533a\u522b\u4e0d\u5927\uff09\u3002\u5f53\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a page number \u5bf9\u5e94\u7684 frame number \u65f6\uff0cTLB \u4f1a \u540c\u65f6 \u4e0e\u5176\u4e2d\u6240\u6709\u7684 key \u8fdb\u884c\u6bd4\u8f83\uff1a\u5982\u679c\u627e\u5230\u5bf9\u5e94\u6761\u76ee\uff0c\u5c31\u4e0d\u5fc5\u8bbf\u95ee\u5185\u5b58\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff08\u79f0\u4e3a TLB miss \uff09\uff0c\u5219\u8bbf\u95ee\u5185\u5b58\u5e76\u5c06\u65b0\u7684 key & value \u5b58\u5165 TLB \u4e2d\uff0c\u8fd9\u4f1a\u66ff\u6362\u6389 TLB \u539f\u6709\u7684\u4e00\u4e2a\u6761\u76ee\u3002\u66ff\u6362\u7684\u7b56\u7565\u5305\u62ec least recently used (LRU), round-robin, random \u7b49\u3002\u6709\u4e9b TLB \u652f\u6301\u5c06\u67d0\u4e9b\u6761\u76ee wired down\uff0c\u5373\u4ed6\u4eec\u4e0d\u4f1a\u4ece TLB \u4e2d\u88ab\u66ff\u6362\u3002\u91cd\u8981\u7684\u5185\u6838\u4ee3\u7801\u4e00\u822c\u4f1a\u88ab wired down\u3002\u5728 MIPS \u67b6\u6784\u4e2d\uff0cTLB miss \u4f5c\u4e3a exception \u7531\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\uff1b\u5728 X86 \u67b6\u6784\u4e2d\uff0cTLB miss \u7531\u786c\u4ef6\u5904\u7406\u3002 9.4.3.4 TLB with ASID \u00b6 \u5982\u540c\u6211\u4eec\u63d0\u5230\u8fc7\u7684\uff0c\u6bcf\u4e2a process \u90fd\u6709\u5176\u81ea\u5df1\u7684 page table\u3002\u56e0\u6b64\u5207\u6362\u8fdb\u7a0b\u65f6\u4e5f\u9700\u8981\u5207\u6362 page table\u3002\u4ea6\u5373\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 TLB \u4e0e\u5f53\u524d\u8fdb\u7a0b\u7684 page table \u662f\u4e00\u81f4\u7684\u3002\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4e00\u8981\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u5207\u6362\u65f6 flush TLB\u3002\u6216\u8005\uff0c\u6709\u4e9b TLB \u8fd8\u5728\u6bcf\u4e2a\u6761\u76ee\u4e2d\u4fdd\u5b58 Address-Space Identifier (ASID) \uff0c\u6bcf\u4e2a ASID \u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5f53 TLB \u8fdb\u884c\u5339\u914d\u65f6\uff0c\u9664\u4e86 page number \u5916\u4e5f\u5bf9 ASID \u8fdb\u884c\u5339\u914d\u3002 9.4.3.5 Effective memory-access time \u00b6 \u6211\u4eec\u79f0\u6ca1\u6709\u53d1\u751f TLB miss \u7684\u6b21\u6570\u7684\u767e\u5206\u6bd4\u4e3a hit ratio \uff0c\u8fd9\u91cc\u8bb0\u4e3a \\(r\\) \u3002\u8bbe\u6bcf\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\u7684\u7528\u65f6\u4e3a \\(t\\) \uff0c\u90a3\u4e48 TLB hit \u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\u5b57\u8282\u603b\u5171\u7528\u65f6 \\(t\\) \uff1b\u800c TLB miss \u7684\u60c5\u51b5\u4e0b\u7528\u65f6 \\(2t\\) \u3002\u56e0\u6b64\u6709\u6548\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\uff08effective memory-access time\uff09 \\(\\text{EAT} = t\\cdot r + 2t(1-r) = t(2-r)\\) \uff0c\u76f8\u6bd4\u5c06 page table \u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u65b9\u5f0f\uff0c\u5e73\u5747\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\u591a\u4e86 \\(\\cfrac{t(2-r)-t}{t} = 1 - r\\) \u3002\u5373\uff0c\u5982\u679c hit ratio \u4e3a 99%\uff0c\u90a3\u4e48\u5e73\u5747\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\u53ea\u591a\u4e86 1%\u3002 9.4.4 Memory Protection \u00b6 \u5206\u9875\u73af\u5883\u4e0b\u7684\u5185\u5b58\u4fdd\u62a4\u7531\u4e0e\u6bcf\u4e2a frame \u5173\u8054\u7684 protection bits \u5b9e\u73b0\u3002\u8fd9\u4e9b bits \u901a\u5e38\u4fdd\u5b58\u5728\u9875\u8868\u4e2d\u3002\u4f8b\u5982 valid-invalid bit\uff1a \u5982\u56fe\u6240\u793a\uff0cin a system with a 14-bit address space (0 to 16383), we have a program that should use only addresses 0 to 10468. Given a page size of 2 KB, we have the situation shown in Figure 9.13. Addresses in pages 0, 1, 2, 3, 4, and 5 are mapped normally through the page table. Any attempt to generate an address in pages 6 or 7, however, will find that the valid\u2013invalid bit is set to invalid, and the computer will trap to the operating system (invalid page reference). Notice that this scheme has created a problem. Because the program extends only to address 10468, any reference beyond that address is illegal. However, references to page 5 are classified as valid, so accesses to addresses up to 12287 are valid. Only the addresses from 12288 to 16383 are invalid. This problem is a result of the 2-KB page size and reflects the internal fragmentation of paging. Some systems provide hardware, in the form of a page-table length register (PTLR) , to indicate the size of the page table. This value is checked against every logical address to verify that the address is in the valid range for the process. Failure of this test causes an error trap to the operating system. 9.4.5 Shared Pages \u00b6 \u5206\u9875\u53ef\u4ee5\u5141\u8bb8\u8fdb\u7a0b\u95f4\u5171\u4eab\u4ee3\u7801\uff0c\u4f8b\u5982\u540c\u4e00\u7a0b\u5e8f\u7684\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u8981\u8fd9\u4efd\u4ee3\u7801\u662f reentrant code \uff08or non-self-modifying code : never changes between execution\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u4e2d\u6240\u8ff0\u7684\u662f\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4efd\u5e93\u4ee3\u7801\u7684\u60c5\u51b5\uff1b\u5171\u4eab\u8fd8\u53ef\u4ee5\u7528\u4e8e\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4ea4\u6d41\u3002\u5f53\u7136\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\u6709\u5176\u81ea\u5df1\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002 9.4.6 Problems \u00b6 Paging \u4f1a\u5bfc\u81f4\u5185\u90e8\u788e\u7247\u3002\u5373\uff0c\u5206\u914d\u662f\u4ee5 frame \u4e3a\u5355\u4f4d\u6267\u884c\u7684\uff0c\u5982\u679c\u8fdb\u7a0b\u8981\u6c42\u7684\u5185\u5b58\u4e0d\u662f frame \u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a frame \u5c31\u4f1a\u7528\u4e0d\u5b8c\uff0c\u4ea7\u751f\u5185\u90e8\u788e\u7247\u3002\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u9700\u8981 n pages + 1 byte \u7684\u8fdb\u7a0b\u9700\u8981\u5206\u914d n+1 \u4e2a frame\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f FrameSize - 1 \u90a3\u4e48\u5927\u7684 Internal Fragmentation\u3002 \u5982\u679c\u8fdb\u7a0b\u7684\u5927\u5c0f\u4e0e\u9875\u5927\u5c0f\u65e0\u5173\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5185\u90e8\u788e\u7247\u7684\u5747\u503c\u4e3a \u00bd FrameSize \u3002\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u5e73\u5747\u503c\u6bd4\u8fd9\u5c0f\u5f88\u591a\u3002\u5f53\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u51cf\u5c0f\u5185\u90e8\u788e\u7247\u800c\u5c06 frame \u7684\u5927\u5c0f\u65e0\u9650\u51cf\u5c0f\uff0c\u56e0\u4e3a\u66f4\u5c0f\u7684 frame size \u9700\u8981\u66f4\u591a\u7684\u9875\u8868\u9879\u3002 9.5 Structure of Page Table \u00b6 9.5.1 Hierarchical Paging \u00b6 \u5982\u6211\u4eec\u5728 9.4.1 \u4e2d\u6240\u8ff0\uff0c\u9875\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c page_table[i] \u4e2d\u5b58\u50a8\u7684\u662f page number \u4e3a i \u7684 page \u6240\u5bf9\u5e94\u7684 frame number\u3002\u8003\u8651\u6211\u4eec\u7684\u903b\u8f91\u5730\u5740\u7ed3\u6784\uff1a \u8fd9\u6837\u7684\u903b\u8f91\u5730\u5740\u7ed3\u6784\u9700\u8981\u4e00\u4e2a\u5b58\u50a8 2 p \u4e2a\u5143\u7d20\u7684 page table\uff0c\u5373\u9700\u8981\u8fd9\u4e48\u5927\u7684\u8fde\u7eed\u5185\u5b58\uff0c\u8fd9\u662f\u975e\u5e38\u5927\u7684\u6d88\u8017\u3002\u6211\u4eec\u8003\u8651\u5c06 p \u518d\u5206\u4e3a p 1 \u548c p 2 \uff1a \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u4e24\u7ea7\u9875\u8868\uff0c outer_page_table[i] \u4e2d\u5b58\u50a8\u7684\u662f p 1 \u4e3a i \u7684 inner page table\uff0c\u5373 inner_page_table[i][] \u7684\u57fa\u5730\u5740\uff1b\u800c inner_page_table[i][j] \u4e2d\u5b58\u50a8\u7684\u5c31\u662f p 1 \u4e3a i\uff0cp 2 \u4e3a j \u7684 page \u5bf9\u5e94\u7684 frame number\uff0c\u5373 page number \u4e3a p 1 p 2 \uff08\u6ca1\u6709\u5206\u5272\u65f6\u7684 p\uff09\u5bf9\u5e94\u7684 frame number\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u79f0 p 1 \u4e3a page directory number \uff0cp 2 \u4e3a page table number \uff0cd \u4e3a page offset \u3002 \u56de\u987e\u6211\u4eec\u5728 9.4.2 \u4e2d\u7684\u5206\u6790\uff1a\u903b\u8f91\u5730\u5740 \u4ee3\u66ff \u7269\u7406\u5730\u5740\u6ee1\u8db3\u4e86\u7a0b\u5e8f\u7684 contiguous \u8981\u6c42\u3002\u8003\u8651\u8fd9\u4e2d\u5206\u4e24\u9875\u7684 page table \u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u53ea\u662f\u5c06 p \u5206\u6210\u4e86\u4e24\u90e8\u5206\uff1b\u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0cp+d \u6784\u6210\u7684\u6574\u4f53\uff08\u5373\u903b\u8f91\u5730\u5740\uff09\u4ecd\u7136\u662f contiguous \u7684\uff0c\u800c\u4e14\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u610f\u8bc6\u5230\u6211\u4eec\u5c06 p \u5206\u6210\u4e86 p 1 \u548c p 2 \u4e24\u90e8\u5206\uff0c\u5c31\u50cf\u66fe\u7ecf\u5b83\u6ca1\u6709\u610f\u8bc6\u5230\u6211\u4eec\u5c06 address \u5206\u4e3a\u4e86 p \u548c d \u4e24\u90e8\u5206\u4e00\u6837\u3002\u8fd9\u4e9b\u5212\u5206\u53ea\u662f\u6211\u4eec\u4e3a\u4e86\u66f4\u597d\u5730\u5206\u914d\u5185\u5b58\u6240\u505a\u7684\u3001Operating-System-Level \u7684\u4e8b\u60c5\u800c\u5df2\u3002 \u8003\u8651\u8fd9\u6837\u505a\u7684\u597d\u5904\uff1ahierarchical paging \u5176\u5b9e\u5c31\u662f\u5bf9\u9875\u8868\u7684\u5206\u9875\uff08page the page table\uff09\u3002\u56e0\u6b64\uff0c\u5b83\u907f\u514d\u4e86 page table \u5fc5\u987b\u5904\u5728\u8fde\u7eed\u5185\u5b58\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u95ee\u9898\u5728 p \u6bd4\u8f83\u5927\u65f6\u5c24\u5176\u4e25\u91cd\u3002 \u53e6\u5916\uff0c\u8fd9\u6837\u505a\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002\u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u9875\u8868\u4e0d\u4e00\u5b9a\u4f1a\u5168\u90e8\u4f7f\u7528\uff1b\u5e76\u4e14\u7531\u4e8e\u903b\u8f91\u5730\u5740\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u7528\u5230\u7684\u9875\u8868\u9879\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u90fd\u6392\u5728\u9875\u8868\u7684\u5934\u90e8\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u91c7\u7528\u4e86\u4e8c\u7ea7\u9875\u8868\uff0c\u90a3\u4e48\u8bb8\u591a\u6392\u5728\u540e\u9762\u7684 inner page table \u5c06\u5b8c\u5168\u4e3a\u7a7a\uff1b\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e0d\u7ed9\u8fd9\u4e9b inner page table \u5206\u914d\u7a7a\u95f4\uff0c\u5373\u6211\u4eec\u53ea\u5206\u914d\u6700\u5927\u7684 p 1 \u90a3\u4e48\u591a\u4e2a inner page table\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u7a7a\u95f4\u3002\u5373\u4f7f\u5728\u6700\u5dee\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u9875\u8868\u90fd\u88ab\u4f7f\u7528\u4e86\uff0c\u6211\u4eec\u7684\u9875\u8868\u6240\u7528\u7684\u603b\u6761\u76ee\u6570\u4e5f\u53ea\u6709 \\(2^{p_1}+2^{p_1}\\cdot 2^{p_2} = 2^{p_1} + 2^{p_1 + p_2}\\) \u4e2a\uff0c\u53ea\u6bd4\u5355\u7ea7\u9875\u8868\u7ed3\u6784\u591a\u4e86 \\(2^{p_1}\\) \uff0c\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u66f4\u591a\u7ea7\u7684\u9875\u8868\u3002\u4f8b\u5982\uff0c64 \u4f4d\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4f7f\u7528\u4e8c\u7ea7\u9875\u8868\u5c31\u662f\u4e0d\u591f\u7684\uff0c\u5426\u5219\u5b83\u7684\u9875\u8868\u5c31\u4f1a\u957f\u6210\u8fd9\u6837\uff1a \u8fd9\u6837 outer page \u5c31\u4f1a\u8d85\u7ea7\u5927\u3002\u6211\u4eec\u53ef\u4ee5 page the outer page\uff1a \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e09\u7ea7\u9875\u8868\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u5168\u90e8\u7684 64 \u4f4d\uff0c\u5373\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a 64 \u4f4d\u90a3\u4e48\u5de8\u5927\u7684 virtual address space\u3002AMD-64 \u652f\u6301 48-bit \u7684\u865a\u62df\u5730\u5740\uff0cARM64 \u652f\u6301 39-bit \u548c 48-bit \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff1a 9.5.2 Hashed Page Tables \u00b6 \u524d\u9762\u4ecb\u7ecd\u7684\u9875\u8868\u662f\u4f7f\u7528\u4e00\u4e2a table \u4fdd\u5b58 page# \u5bf9\u5e94\u7684 frame#\uff0c\u8fd9\u79cd\u89e3\u51b3\u65b9\u6848\u9762\u4e34\u7684\u95ee\u9898\u662f\u7a7a\u95f4\u9700\u6c42\u662f \\(\\Theta(\\text{Possible Page#})\\) \u4e14\u8fde\u7eed\u7684\uff1b\u6211\u4eec\u901a\u8fc7\u591a\u7ea7\u9875\u8868\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u800c\u54c8\u5e0c\u9875\u8868\u7ed9 page# \u5206\u914d frame# \u5e76\u4e0d\u662f\u968f\u610f\u5206\u914d\uff0c\u800c\u662f\u901a\u8fc7\u54c8\u5e0c\u8ba1\u7b97\u5f97\u5230\u3002\u8fd9\u6837\u7684\u65b9\u5f0f\u5c06\u7a7a\u95f4\u9700\u6c42\u964d\u4f4e\u5230 \\(\\Theta(\\text{Bucket#} + \\text{Used Page#})\\) \u4e14\u6bcf\u4e2a page \u5bf9\u5e94\u7684\u8868\u9879\u5728\u5185\u5b58\u4e2d\u5e76\u4e0d\u9700\u8981\u8fde\u7eed\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u54c8\u5e0c\u9875\u8868\u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\u9664\u4e86 page number \u548c frame number \u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u5411\u6709\u540c\u4e00\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u9875\u8868\u9879\u7684\u6307\u9488\u3002\u8fd9\u4e2a\u7ed3\u6784\u4e0e\u4e00\u822c\u7684\u54c8\u5e0c\u8868\u662f\u4e00\u81f4\u7684\u3002 \u8fd9\u662f 32-bit address spaces \u9875\u8868\u7684\u4e00\u4e2a\u5e38\u7528\u65b9\u6848\u3002 9.5.3 Inverted Page Tables \u00b6 \u5728\u4e4b\u524d\u7684\u5206\u9875\u65b9\u6cd5\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u9875\u8868\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u8868\u53ef\u80fd\u4f7f\u7528\u5927\u91cf\u7684\u7269\u7406\u5185\u5b58\u3002 Inverted page tables \u7d22\u5f15 physical address \u800c\u4e0d\u662f logical address\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6574\u4e2a\u7cfb\u7edf\u53ea\u6709\u4e00\u4e2a\u9875\u8868\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u7406\u5185\u5b58\u7684 frame \u53ea\u6709\u4e00\u6761\u76f8\u5e94\u7684\u6761\u76ee\u3002\u5bfb\u5740\u65f6\uff0cCPU \u904d\u5386\u9875\u8868\uff0c\u627e\u5230\u5bf9\u5e94\u7684 pid \u548c page number\uff0c\u5176\u5728\u9875\u8868\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\u5373\u4e3a frame number\uff1a \u8fd9\u79cd\u505a\u6cd5\u7684\u7f3a\u70b9\u662f\uff0c\u5bfb\u5740\u8fc7\u7a0b\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 TLB \u6216\u8005 hashed table \u6765\u52a0\u901f\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u591f\u5171\u4eab\u5185\u5b58\uff0c\u56e0\u4e3a page table \u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\uff08\u4e0e frame number \u4e00\u4e00\u5bf9\u5e94\uff09\u53ea\u80fd\u5b58\u50a8\u4e00\u4e2a page number\u3002 9.6 Swapping \u00b6 \u8fdb\u7a0b\u7684\u6307\u4ee4\u548c\u6570\u636e\u5fc5\u987b\u5728\u5185\u5b58\u4e2d\u4ee5\u6267\u884c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u8fdb\u7a0b\u6216\u8fdb\u7a0b\u7684\u4e00\u90e8\u5206\u6682\u65f6\u4ece\u5185\u5b58 swap \u5230 backing store \uff08\u5907\u4efd\u5b58\u50a8\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u6bd4\u8f83\u5feb\u7684\u78c1\u76d8\uff09\u4e2d\uff0c\u7ee7\u7eed\u8fd0\u884c\u65f6\u4ece\u4e2d\u91cd\u65b0\u62ff\u56de\u5230\u5185\u5b58\u3002Swapping \u4f7f\u5f97\u6240\u6709\u8fdb\u7a0b\u603b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u603b\u548c\u8d85\u8fc7\u7cfb\u7edf\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u79f0\u4e3a\u53ef\u80fd\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684 degree of multiprogramming\u3002 \u5f53\u7136\uff0c\u5728\u5185\u5b58\u6bd4\u8f83\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cswapping \u5e76\u4e0d\u5fc5\u4f7f\u7528\u3002Swapping \u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f88\u957f\u7684 context switch \u7528\u65f6\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u5e76\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u800c\u7531\u4e8e\u78c1\u76d8\u7684 I/O \u5f88\u6162\uff0cswapping \u5230\u5185\u5b58\u4f1a\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u3002 \u5728\u5206\u9875\u7684\u673a\u5236\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea swap out \u4e00\u4e9b pages\uff0c\u800c\u4e0d\u5fc5 swap out \u4e00\u6574\u4e2a\u8fdb\u7a0b\uff1a","title":"9 \u4e3b\u5b58"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9-main-memory--\u4e3b\u5b58","text":"","title":"9 Main Memory | \u4e3b\u5b58"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#91-background","text":"","title":"9.1 Background"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#911-memory","text":"\u5185\u5b58\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\uff0cCPU \u6839\u636e PC (Program Counter) \u7684\u503c\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u6307\u4ee4\u3002\u7a0b\u5e8f\u9700\u8981\u8fd0\u884c\uff0c\u81f3\u5c11\u90e8\u5206\u7a0b\u5e8f\u53ca\u5176\u8bbf\u95ee\u7684\u6570\u636e\u5e94\u5728\u5185\u5b58\u4e2d\uff08\u6216\u8005\u66f4\u660e\u786e\u5730\uff0c\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u8fdb\u7a0b\u91cc\uff09\u3002 CPU \u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7684\u901a\u7528\u5b58\u50a8\u53ea\u6709 main memory \u548c registers\u3002\u5bf9 registers \u7684\u8bbf\u95ee\u901a\u5e38\u53ef\u4ee5\u5728\u4e00\u4e2a CPU \u65f6\u949f\u5468\u671f\u4e2d\u5b8c\u6210\uff0c\u800c\u5b8c\u6210\u5185\u5b58\u7684\u8bbf\u95ee\u53ef\u80fd\u9700\u8981\u591a\u4e2a\u65f6\u949f\u5468\u671f\u3002\u5728\u8fd9\u4e9b\u65f6\u949f\u5468\u671f\u91cc\uff0c\u7531\u4e8e\u6ca1\u6709\u7528\u6765\u5b8c\u6210\u6307\u4ee4\u7684\u6570\u636e\uff0c\u8fd9\u4f1a\u5f15\u8d77 stall \uff08\u6682\u505c\uff0c\u629b\u951a\uff09\u3002\u4e3a\u4e86\u8865\u6551\uff0c\u6211\u4eec\u5728 CPU \u82af\u7247\u4e0a\u589e\u8bbe\u66f4\u5feb\u7684\u5185\u5b58\uff0c\u79f0\u4e3a cache \u3002 \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u62a4\u5185\u5b58\u7a7a\u95f4\uff0c\u9632\u6b62\u7528\u6237\u7a0b\u5e8f\u4fee\u6539\u64cd\u4f5c\u7cfb\u7edf\u6216\u5176\u4ed6\u7528\u6237\u7a0b\u5e8f\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002","title":"9.1.1 Memory"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#912-address-binding","text":"\u5982\u6211\u4eec\u524d\u9762\u6240\u8bf4\uff0c\u6267\u884c\u7a0b\u5e8f\u5fc5\u987b\u5c06\u5176\u8c03\u5165\u5185\u5b58\u4ee5\u4f9b\u8fdb\u7a0b\u4f7f\u7528\u3002\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740\u901a\u5e38\u662f\u7528\u7b26\u53f7\u8868\u793a\uff08 symbolic , \u4f8b\u5982\u5404\u79cd\u53d8\u91cf\u3001\u51fd\u6570\u540d\uff1b\u6c47\u7f16\u4e2d\u7684 label \u7b49\uff09\uff1b\u7f16\u8bd1\u5668\u4f1a\u5c06\u5176\u7ed1\u5b9a\u5230 relocatable addresses \uff0c\u5373\u76f8\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u6bb5/\u6a21\u5757\u7b49\u7684\u504f\u79fb\uff0c\u4f8b\u5982 sp - 8 , ds:[0] \uff1b\u94fe\u63a5\u5668\u6216\u52a0\u8f7d\u5668\uff08linker / loader\uff09\u4f1a\u5c06 relocatable addresses \u7ed1\u5b9a\u5230 absolute addresses \u3002\u5f53\u7136\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u7a0b\u5e8f\u6240\u5904\u7684\u5185\u5b58\u5730\u5740\uff0c\u5219\u4f1a\u751f\u6210 absolute code \u3002","title":"9.1.2 Address Binding"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#92-contiguous-memory-allocation---partitioning-strategies","text":"\u5728 Batch \u7cfb\u7edf\u4e2d\uff0c\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u5165\u7269\u7406\u5185\u5b58\uff0c\u5e76\u88ab\u8fd0\u884c\u81f3\u7ed3\u675f\u3002\u5982\u679c\u7a0b\u5e8f\u6240\u9700\u7684\u5b58\u50a8\u7a7a\u95f4\u6bd4\u7269\u7406\u5185\u5b58\u5927\uff0c\u5219\u5c06\u7a0b\u5e8f\u5206\u5f00\u4e3a\u53ef\u4ee5\u8fd0\u884c\u81f3\u4ea7\u751f\u67d0\u4e2a\u7ed3\u679c\u4e14\u5927\u5c0f\u53ef\u4ee5\u653e\u5165\u7a7a\u4f59\u5185\u5b58\u7684\u90e8\u5206\uff0c\u9010\u4e2a\u8fd0\u884c\uff0c\u5c06\u8fd0\u884c\u7ed3\u679c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u90e8\u5206\u3002 \u4e0e\u8fd9\u79cd \"prehistroy\"\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u628a\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u4e14\u652f\u6301\u5176\u5f7c\u6b64\u4e4b\u95f4\u7684\u5feb\u901f\u5207\u6362\u3002\u6700\u7b80\u5355\u7684\u5185\u5b58\u5206\u914d\u65b9\u6cd5\u4e4b\u4e00\uff0c\u5c31\u662f\u5c06\u5185\u5b58\u5206\u6210\u8bb8\u591a\u7684 partition\uff0c\u6bcf\u4e2a partition \u5305\u542b\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5176\u8981\u6c42\u6709\uff1a Protection: \u4fdd\u8bc1\u8fdb\u7a0b\u4e4b\u95f4\u4e0d\u4f1a\u4e92\u76f8\u95ef\u5165\u5bf9\u65b9\u7684\u5b58\u50a8\u3002 Fast execution: \u4e0d\u80fd\u7531\u4e8e protection \u964d\u4f4e\u8bbf\u95ee\u5185\u5b58\u7684\u6548\u7387\u3002 Fast context switch: \u6bcf\u5f53\u8fdb\u884c context switch \u65f6\uff0c\u53ef\u4ee5\u6bd4\u8f83\u5feb\u5730\u627e\u5230\u5e76\u8bbf\u95ee\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u5b58\u3002 \u5f53\u8fdb\u7a0b\u8fdb\u5165\u7cfb\u7edf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u5404\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u9700\u8981\u4ee5\u53ca\u5f53\u524d\u7684\u7a7a\u95f2\u5185\u5b58\u7a7a\u95f4\u6765\u51b3\u5b9a\u4e3a\u54ea\u4e9b\u8fdb\u7a0b\u5206\u914d\u5185\u5b58\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u88ab\u5206\u914d\u5230\u4e86\u7a7a\u95f4\uff0c\u4ed6\u5c06\u88ab\u8f7d\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u7ade\u4e89 CPU \u65f6\u95f4\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ed3\u675f\u65f6\uff0c\u5b83\u91ca\u653e\u5b83\u7684\u7a7a\u95f4\u3002 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u8bf7\u6c42\u7a7a\u95f4\u6765\u8fd0\u884c\uff0c\u4f46\u8fd9\u91cc\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u6ee1\u8db3\u5176\u8981\u6c42\uff0c\u6709\u4e24\u79cd\u53ef\u9009\u7684\u89e3\u51b3\u529e\u6cd5\u3002\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u62d2\u7edd\u5176\u8bf7\u6c42\u5e76\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff1b\u53e6\u4e00\u79cd\u662f\u5c06\u5176\u52a0\u5165 waiting queue \u4e2d\uff0c\u5f53\u6709\u5185\u5b58\u88ab\u91ca\u653e\u65f6 CPU \u6765\u68c0\u67e5\u662f\u5426\u4e3a\u5176\u5206\u914d\u5185\u5b58\u3002","title":"9.2 Contiguous Memory Allocation - Partitioning Strategies"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#921-fixed-partition","text":"\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u56fa\u5b9a partition \u7684\u5927\u5c0f\uff08\u9664\u4e86 OS \u4f7f\u7528\u7684\u5185\u5b58\uff09\u3002\u8fd9\u79cd\u65b9\u5f0f\u975e\u5e38\u5bb9\u6613\u5b9e\u73b0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a partition \u662f\u5426\u88ab\u5360\u7528\u5373\u53ef\u3002\u4f46\u663e\u7136\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u5185\u5b58\u6d6a\u8d39\u3002\u5982\u4e0b\u56fe\uff1a \u5982\u56fe Process 1 \u4f7f\u7528\u4e86 Partition 1\uff0c\u4f46\u5176\u6240\u9700\u7a7a\u95f4\u5c0f\u4e8e Partition 1 \u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u7ea2\u8272\u90e8\u5206\u7684\u5185\u5b58\u6ca1\u6709\u88ab\u4f7f\u7528\u4e14\u4e0d\u80fd\u88ab\u522b\u7684\u8fdb\u7a0b\u4f7f\u7528\uff08\u56e0\u4e3a\u6bcf\u4e2a partition \u53ea\u80fd\u88ab\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\uff09\u3002\u7531\u4e8e\u8fd9\u662f partition \u5185\u90e8\u7684\u4e0d\u53ef\u7528\u5185\u5b58\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Internal Fragmentation \u3002\u8fd9\u4f1a\u5e26\u6765\u6781\u5927\u7684\u5185\u5b58\u635f\u5931\uff0c\u5c24\u5176\u662f\u5728\u8fdb\u7a0b\u4e4b\u95f4\u6240\u9700\u5b58\u50a8\u7a7a\u95f4\u5927\u5c0f\u5dee\u8ddd\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff08\u56e0\u4e3a\u6211\u4eec\u603b\u662f\u9700\u8981\u6839\u636e\u6240\u9700\u7a7a\u95f4\u6700\u5927\u7684\u8fdb\u7a0b\u5207\u5206\u5185\u5b58\uff09\u3002","title":"9.2.1 Fixed Partition"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#922-variable-partition","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u4e0d\u56fa\u5b9a partition \u7684\u5927\u5c0f\u3002\u5728\u8fd9\u79cd\u65b9\u6848\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u4e00\u4e2a\u8868\uff0c\u8bb0\u5f55\u53ef\u7528\u548c\u5df2\u7528\u7684\u5185\u5b58\u3002\u6700\u5f00\u59cb\u65f6\u6574\u4e2a\u5185\u5b58\u5c31\u662f\u4e00\u5927\u5757\u53ef\u7528\u7684\u5185\u5b58\u5757\uff08\u5c06\u53ef\u7528\u5185\u5b58\u5757\u79f0\u4e3a hole \uff09\uff1b\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u8fd0\u884c\u540e\uff0c\u5185\u5b58\u53ef\u80fd\u4f1a\u5305\u542b\u4e00\u7cfb\u5217\u4e0d\u540c\u5927\u5c0f\u7684\u5b54\u3002\u4e0b\u56fe\u662f\u4e00\u4e2a\u793a\u4f8b\u3002 \u5f88\u53ef\u80fd\u5728\u8fdb\u884c\u4e00\u6bb5\u65f6\u95f4\u7684\u8fd0\u884c\u540e\uff0c\u7a7a\u95f2\u5185\u5b58\u7a7a\u95f4\u88ab\u5206\u4e3a\u5927\u91cf\u7684 hole\uff0c\u5b83\u4eec\u603b\u4f53\u52a0\u8d77\u6765\u53ef\u4ee5\u6ee1\u8db3\u8fdb\u7a0b\u8981\u6c42\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u8fde\u7eed\uff0c\u6bcf\u4e00\u4e2a\u5c0f\u7684 hole \u90fd\u4e0d\u53ef\u4ee5\u88ab\u5229\u7528\u3002\u6211\u4eec\u79f0\u8fd9\u79cd\u95ee\u9898\u4e3a External Fragmentation \uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e0d\u53ef\u7528\u5185\u5b58\u662f\u5206\u5e03\u5728 partition \u4e4b\u5916\u7684\u3002","title":"9.2.2 Variable Partition"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#923-dynamic-storage-allocation-problem","text":"\u6839\u636e\u4e00\u7ec4 hole \u6765\u5206\u914d\u5927\u5c0f\u4e3a n \u7684\u8bf7\u6c42\uff0c\u79f0\u4e3a dynamic storage-allocation problem \u3002\u8fd9\u4e2a\u95ee\u9898\u6700\u5e38\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u5305\u62ec\uff1a first-fit - \u5206\u914d\u9996\u4e2a\u8db3\u591f\u5927\u7684 hole\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u4f7f\u5f97\u5206\u914d\u96c6\u4e2d\u5728\u4f4e\u5730\u5740\u533a\uff0c\u5e76\u5728\u6b64\u5904\u4ea7\u751f\u5927\u91cf\u7684\u788e\u7247\uff0c\u5728\u6bcf\u6b21\u5c1d\u8bd5\u5206\u914d\u7684\u65f6\u5019\u90fd\u4f1a\u904d\u5386\u5230\uff0c\u589e\u5927\u67e5\u627e\u7684\u5f00\u9500\u3002 best-fit - \u5206\u914d\u6700\u5c0f\u7684\u8db3\u591f\u5927\u7684 hole\u3002\u9664\u975e\u7a7a\u95f2\u5217\u8868\u6309\u5927\u5c0f\u6392\u5e8f\uff0c\u5426\u5219\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u5bf9\u6574\u4e2a\u5217\u8868\u8fdb\u884c\u904d\u5386\u3002\u8fd9\u79cd\u65b9\u6cd5\u540c\u6837\u4f1a\u7559\u4e0b\u8bb8\u591a\u788e\u7247\u3002 worst-fit - \u5206\u914d\u6700\u5927\u7684 hole\u3002\u540c\u6837\uff0c\u9664\u975e\u5217\u8868\u6709\u5e8f\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u904d\u5386\u6574\u4e2a\u5217\u8868\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u662f\u6bcf\u6b21\u5206\u914d\u540e\u901a\u5e38\u4e0d\u4f1a\u4f7f\u5269\u4e0b\u7684\u7a7a\u95f2\u5757\u592a\u5c0f\uff0c\u8fd9\u5728\u4e2d\u5c0f\u8fdb\u7a0b\u8f83\u591a\u7684\u60c5\u51b5\u4e0b\u6027\u80fd\u8f83\u597d\uff0c\u5e76\u4e14\u4ea7\u751f\u788e\u7247\u7684\u51e0\u7387\u66f4\u5c0f\u3002 Simulations have shown that both first fit and best fit are better than worst fit in terms of decreasing time and storage utilization. Neither first fit nor best fit is clearly better than the other in terms of storage utilization, but first fit is generally faster.","title":"9.2.3 Dynamic Storage-Allocation Problem"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#924-protection","text":"\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u4e14\u4ec5\u80fd\u8bbf\u95ee\u81ea\u5df1\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u5957 base \u548c limit \u5bc4\u5b58\u5668\u6765\u786e\u5b9a\u4e00\u4e2a\u7a0b\u5e8f\u7684\u7a7a\u95f4\uff1a \u6bcf\u5f53 context switch \u5230\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b\u65f6\uff0cCPU \u4f1a load \u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u3002\u6bcf\u5f53 user mode \u60f3\u8981\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\u65f6\uff0cCPU \u90fd\u8981\u68c0\u67e5\u5176\u662f\u5426\u8bd5\u56fe\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\uff1b\u5982\u679c\u662f\uff0c\u5219\u4f1a\u5f15\u53d1\u4e00\u4e2a trap \u5e76\u88ab\u5f53\u505a\u81f4\u547d\u9519\u8bef\u5904\u7406\uff08\u901a\u5e38\u4f1a terminate \u6389\u8fdb\u7a0b\uff09\uff1a","title":"9.2.4 Protection"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#93-segmentation","text":"","title":"9.3 Segmentation"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#931-basic-method","text":"\u867d\u7136\u6211\u4eec\u7a0b\u5e8f\u4e2d\u7684\u4e3b\u51fd\u6570\u3001\u6570\u7ec4\u3001\u7b26\u53f7\u8868\u3001\u5b50\u51fd\u6570\u7b49\u7b49\u5185\u90e8\u9700\u8981\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\uff0c\u4f46\u662f\u8fd9\u4e9b\u6a21\u5757\u4e4b\u95f4\u7684\u5148\u540e\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\u56e0\u6b64\uff0c\u867d\u7136\u5b9e\u9645\u4e0a\u5185\u5b58\u662f\u4e00\u4e2a\u7ebf\u6027\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u4f46\u662f\u5728\u7528\u6237\u770b\u6765\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u957f\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a \u5373\uff0c\u4e00\u4e2a\u7a0b\u5e8f\u662f\u7531\u4e00\u7ec4 segment \uff08\u6bb5\uff09\u6784\u6210\u7684\uff0c\u6bcf\u4e2a segment \u90fd\u6709\u5176\u540d\u79f0\u548c\u957f\u5ea6\u3002\u6211\u4eec\u53ea\u8981\u77e5\u9053 segment \u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740 (base) \u548c\u6bb5\u5185\u504f\u79fb\u5730\u5740 (offset) \u5c31\u53ef\u4ee5\u5bf9\u5e94\u5230\u7269\u7406\u5730\u5740\u4e2d\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a segment\uff0c\u6211\u4eec\u7ed9\u5176\u4e00\u4e2a\u7f16\u53f7\u3002\u5373\uff0c\u6211\u4eec\u901a\u8fc7\u4e8c\u5143\u6709\u5e8f\u7ec4 \u8868\u793a\u4e86\u4e00\u4e2a\u5730\u5740\u3002\u8fd9\u79cd\u8868\u793a\u79f0\u4e3a logical address \uff08\u903b\u8f91\u5730\u5740\uff09\u6216 virtual address \uff08\u865a\u62df\u5730\u5740\uff09\u3002 \u901a\u5e38\uff0c\u5728\u7f16\u8bd1\u7528\u6237\u7a0b\u5e8f\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u6784\u9020\u6bb5\u3002","title":"9.3.1 Basic Method"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#932-logical-address--mmu","text":"\u8981\u5c06\u903b\u8f91\u5730\u5740\u6620\u5c04\u5230\u7269\u7406\u5730\u5740\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u627e\u5230\u6bb5\u7684\u57fa\u5730\u5740\u3002\u6211\u4eec\u6709\u4e00\u4e2a segment table \uff0c\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u4ee5 segment-number \u7d22\u5f15\uff0c\u5b58\u50a8\u5176 \u6bb5\u57fa\u5730\u5740 segment-base \u548c \u6bb5\u754c\u9650 segment-limit \uff08\u53ef\u80fd\u8fd8\u5305\u542b\u6743\u9650\u4f4d\uff09\u3002\u56e0\u6b64\u903b\u8f91\u5730\u5740\u7684\u6620\u5c04\u65b9\u5f0f\u5982\u4e0b\u56fe\uff1a \u8fd9\u4e00\u8fc7\u7a0b\u662f\u7531\u786c\u4ef6\u8bbe\u5907 MMU (Memory-Management Unit, \u5185\u5b58\u7ba1\u7406\u5355\u5143) \u5b8c\u6210\u7684\u3002CPU \u4f7f\u7528\u7684\u662f\u903b\u8f91\u5730\u5740\uff0c\u800c\u5185\u5b58\u5bfb\u5740\u4f7f\u7528\u7684\u662f\u7269\u7406\u5730\u5740\uff0cMMU \u5b8c\u6210\u7684\u662f\u7ffb\u8bd1\uff08\u6620\u5c04\uff09\u548c\u4fdd\u62a4\u5de5\u4f5c\uff1a \u8fd9\u91cc\u7684 relocation register \u5373\u4e3a base register\u3002","title":"9.3.2 Logical Address &amp; MMU"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#933-problems","text":"\u5206\u6bb5\u5c06\u4e00\u4e2a\u7a0b\u5e8f\u5206\u4e3a\u6570\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u5176\u5185\u5b58\u5206\u914d\u7684\u7b56\u7565\u4e0e\u7b80\u5355\u7684 partition \u662f\u4e00\u81f4\u7684\u3002\u56e0\u6b64\uff0c\u5206\u6bb5\u4ecd\u7136\u4f1a\u5b58\u5728 external fragmentation \u7684\u95ee\u9898\u3002\u518d\u6b21\u56de\u987e\u8fd9\u4e2a\u95ee\u9898\uff1a\u5176\u8868\u5f81\u662f\u603b\u7a7a\u4f59\u5185\u5b58\u662f\u8db3\u591f\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u4e0d\u8fde\u7eed\u5bfc\u81f4\u5176\u65e0\u6cd5\u4f7f\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u6838\u5fc3\u70b9\u5728\u4e8e not contiguous \u3002\u6211\u4eec\u6709\u4e24\u79cd\u601d\u8def\u6765\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\uff1a\u5c06\u5185\u5b58\u91cd\u6392\u4f7f\u5f97 holes \u8fde\u6210\u4e00\u5757\uff1b\u6216\u8005\u8bbe\u8ba1\u65b9\u6848\u8ba9\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u8fde\u7eed\u7684\u5730\u5740\u3002 Compaction \u5c31\u662f\u5c06\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u91cd\u6392\u4f7f\u5f97\u6240\u6709\u7a7a\u95f2\u7a7a\u95f4\u8fde\u7eed\u3002\u8fd9\u4e00\u64cd\u4f5c\u8981\u6c42\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u662f relocatable \u7684\uff0c\u5373\u5176\u5730\u5740\u662f\u76f8\u5bf9 base \u7684\u504f\u79fb\uff1b\u8fd9\u4e00\u8981\u6c42\u5728\u524d\u9762\u4e24\u79cd\u5185\u5b58\u5206\u914d\u65b9\u5f0f\u4e2d\u662f\u6ee1\u8db3\u7684\u3002\u4f46\u662f\u8fd9\u4e00\u64cd\u4f5c\u9700\u8981\u5c06\u5185\u5b58\u9010\u4e00\u590d\u5236\uff0c\u8fd9\u5c06\u6d88\u8017\u5f88\u591a\u65f6\u95f4\u3002 \u8003\u8651\u300c\u8ba9\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u8fde\u7eed\u7684\u5730\u5740\u300d\u3002\u5b9e\u9645\u4e0a\uff0c\u5206\u6bb5\u5df2\u7ecf\u662f\u8fd9\u4e2a\u65b9\u5411\u4e0a\u505a\u51fa\u7684\u4e00\u79cd\u5c1d\u8bd5\u4e86\uff0c\u56e0\u4e3a\u5b83\u5c06\u7a0b\u5e8f\u5206\u4e3a\u4e86\u51e0\u5757\uff0c\u76f8\u6bd4\u4e8e\u7b80\u5355\u7684 partition\uff0c\u5206\u6bb5\u6709\u52a9\u4e8e\u51cf\u5c0f external fragmentation\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u63d0\u51fa paging\u3002","title":"9.3.3 Problems"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#94-paging","text":"Paging \uff08\u5206\u9875\uff09\u662f\u4e00\u79cd\u5141\u8bb8\u8fdb\u7a0b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u7ba1\u7406\u65b9\u6848\u3002\u5b83\u907f\u514d\u4e86 external fragmentation \u548c Compaction\u3002\u5404\u79cd\u5f62\u5f0f\u7684 paging \u88ab\u5927\u591a\u6570\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\uff1b\u5b9e\u73b0 paging \u9700\u8981 OS \u548c\u786c\u4ef6\u7684\u534f\u4f5c\u3002","title":"9.4 Paging"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#941-basic-method","text":"\u6211\u4eec\u5c06 physical memory \u5207\u5206\u6210\u7b49\u5927\u5c0f\u7684\u5757\uff082 \u7684\u5e42\uff0c\u901a\u5e38\u4e3a 4KB = 2 12 B\uff09\uff0c\u79f0\u4e3a frames \uff08\u5e27\uff09\uff1b\u5c06 logical memory \u5207\u5206\u6210\u540c\u6837\u5927\u5c0f\u7684\u5757\uff0c\u79f0\u4e3a pages \uff08\u9875\uff09\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u8981\u6267\u884c\u65f6\uff0c\u5176\u5185\u5bb9\u586b\u5230\u4e00\u4e9b\u53ef\u7528\u7684 frame \u4e2d\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\u53ef\u4ee5\u7528\u8fd9\u4e2a frame \u7684 base \u6216 number\uff08\u7531\u4e8e frame \u662f\u88ab\u7b49\u5927\u5207\u5206\u51fa\u6765\u7684\uff0c\u56e0\u6b64\u6bcf\u4e2a frame \u7684 base \u4e5f\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a frame number\uff09\u4ee5\u53ca\u76f8\u5bf9\u8fd9\u4e2a base \u7684 offset \u8868\u793a\uff1b\u540c\u65f6 CPU \u751f\u6210\u903b\u8f91\u5730\u5740\uff0c\u903b\u8f91\u5730\u5740\u5305\u542b\u4e00\u4e2a page number \u548c\u4e00\u4e2a page offset\uff1b\u53e6\u6709\u4e00\u4e2a page table \uff0c\u5b83\u4ee5 page number \u7d22\u5f15\uff0c\u5176\u4e2d\u7684\u7b2c i \u9879\u5b58\u50a8\u7684\u662f page number \u4e3a i \u7684 page \u6240\u5728\u7269\u7406\u5185\u5b58\u7684 frame \u7684 base\u3002\u8fd9\u6837\uff0c\u6bcf\u4e00\u4e2a page \u5c06\u901a\u8fc7\u5176 page number \u6620\u5c04\u5230\u4e00\u4e2a frame \u4e0a\uff1b\u8fdb\u800c page \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\u4e5f\u901a\u8fc7 offset \u4e0e\u5bf9\u5e94\u7684 frame \u5efa\u7acb\u6620\u5c04\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53 MMU \u9700\u8981\u5c06\u4e00\u4e2a logical address \u7ffb\u8bd1\u4e3a physical address \u65f6\uff0c\u5b83\u9700\u8981\u83b7\u53d6 page number p \uff0c\u5728 page table \u4e2d\u627e\u5230\u7b2c p \u4e2a page \u5bf9\u5e94\u7684\u7684 frame number\uff08\u4e5f\u5c31\u662f frame base\uff09 f \uff0c\u5728 f \u540e\u9762\u8fde\u63a5\u4e0a offset d \u5c31\u5f97\u5230\u4e86\u5bf9\u5e94\u7684 physical address\u3002\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0clogical address \u548c physical address \u7684 offset \u5e94\u662f\u4e00\u81f4\u7684\u3002 \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c\u65f6\uff0c\u5176\u6bcf\u4e00\u9875\u90fd\u9700\u8981\u4e00\u5e27\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8fdb\u7a0b\u9700\u8981 n \u9875\uff0c\u5219\u5185\u5b58\u4e2d\u9700\u8981\u6709 n \u4e2a\u5e27\u3002\u5982\u679c\u6709\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5206\u914d\u7ed9\u65b0\u8fdb\u7a0b\uff1a\u8fdb\u7a0b\u7684\u6bcf\u4e00\u9875\u88c5\u5165\u4e00\u4e2a\u5e27\uff0cframe number \u653e\u5165\u8fdb\u7a0b\u7684 page table \u4e2d\u3002 \u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u7269\u7406\u5185\u5b58\uff0c\u5b83\u5e94\u8be5\u77e5\u9053\u7269\u7406\u5185\u5b58\u7684\u5206\u914d\u7ec6\u8282\uff0c\u5373\u5171\u6709\u591a\u5c11\u5e27\u3001\u5e27\u662f\u5426\u7a7a\u95f2\u7b49\u3002\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5728 frame table \u4e2d\uff0c\u6bcf\u4e2a\u6761\u76ee\u5bf9\u5e94\u4e00\u4e2a\u5e27\uff0c\u4fdd\u5b58\u5176\u662f\u5426\u88ab\u5360\u7528\uff1b\u5982\u679c\u88ab\u5360\u7528\uff0c\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b\u7684\u54ea\u4e2a\u9875\u5360\u7528\u3002","title":"9.4.1 Basic Method"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#942-why-not-contiguous","text":"\u8003\u8651\u8fd9\u79cd\u65b9\u5f0f\u4e3a\u4ec0\u4e48\u80fd\u591f\u6ee1\u8db3\u300cnot contiguous\u300d\uff1a\u5728\u524d\u9762\u4e24\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981 contiguous \u662f\u56e0\u4e3a\u5728\u8fd0\u884c\u6bcf\u6761\u6307\u4ee4\u8fc7\u540e PC \u4f1a +1\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u4fdd\u8bc1 contiguous\uff0c\u4ece\u800c\u8ba9 PC+1 \u786e\u5b9e\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u800c\u5728 paging \u4e2d\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u4ecd\u7136\u4fdd\u8bc1\u4e86 PC+1 \u540e\u786e\u5b9e\u6307\u5411\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u53ea\u662f paging \u59cb\u7ec8\u4fdd\u5b58\u7684\u90fd\u662f logical address\u3002Logical address \u7684\u683c\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u53ef\u89c1\uff0c\u5f53 d \u662f \\(2^n - 1\\) \u65f6\uff0c \\(<p, d> + 1\\) \u5373\u4e3a \\(<p+1, 0>\\) \uff08\u5c31\u662f\u4e8c\u8fdb\u5236\u8fdb\u4e86\u4f4d\uff09\u3002\u8fd9\u65f6\u867d\u7136\u4e00\u4e2a page \u5df2\u7ecf\u7ed3\u675f\uff0c\u8fdb\u5165\u5230\u4e86\u4e0b\u4e00\u4e2a page\uff0c\u8fd9\u4e24\u4e2a page \u5bf9\u5e94\u7684 frame \u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u4f46 logical address \u662f\u8fde\u7eed\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7528 logical address \u7684\u8fde\u7eed\u4ee3\u66ff\u4e86 physical address \u7684\u8fde\u7eed\u3002 \u4e0b\u56fe\u662f\u4e00\u4e2a\u66f4\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a\u5047\u5982\u6bcf\u4e2a\u903b\u8f91\u5730\u5740\u6709 4 \u4f4d\uff0c\u5176\u4e2d p \u548c d \u5404\u5360 2 \u4f4d\u3002\u4f8b\u5982 MMU \u9700\u8981\u5bfb\u627e\u903b\u8f91\u5730\u5740 1101[13] \u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4ece\u800c\u83b7\u5f97\u5176\u4e2d\u7684\u5185\u5bb9\uff0c\u5b83\u9996\u5148\u53d6 1101[13] \u7684\u524d 2 \u4f4d 11[3]\uff0c\u8bfb\u53d6 page table \u7684\u7b2c 3 \u9879\uff0c\u7ed3\u679c\u4e3a 010[2]\uff08frame number \u4e0d\u6b62 2 \u4f4d\uff0c\u56e0\u4e3a frame \u4e0d\u6b62 4 \u4e2a\uff09\uff0c\u7136\u540e\u5c06 frame number 10 \u4e0e offset 01 \u8fde\u8d77\u6765\uff0c\u5373 01001[9]\uff0c\u56e0\u6b64 logical address 1101[13] \u5bf9\u5e94\u7684\u662f physical address 01001[9]\uff0c\u5185\u5bb9\u4e3a n \u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u5728 logical memory \u7684\u89c6\u89d2\u91cc\uff0ch \u548c i \u662f\u76f8\u8fde\u7684\uff1b\u4f46\u5b9e\u9645\u4e0a\uff0clogical address 0111[7] \u5bf9\u5e94\u7684 physical address \u4e3a 11011[27]\uff0clogical address 1000[8] \u5bf9\u5e94\u7684 physical address \u4e3a 00100[4]\uff0c\u5728 physical memory \u4e2d\u662f\u4e0d\u8fde\u7eed\u7684\u3002 Every logical address is bound by the paging hardware to some physical address. Using paging is similar to using a table of base (or relocation) registers, one for each frame of memory.","title":"9.4.2 Why \"Not Contiguous\""},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#943-hardware-support","text":"Page table \u662f\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4efd\u7684\u7ed3\u6784\uff0c\u5176\u786c\u4ef6\u5b9e\u73b0\u6709\u591a\u79cd\u65b9\u6cd5\u3002","title":"9.4.3 Hardware Support"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9431-simplest-method","text":"\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u7528\u4e00\u7ec4\u4e13\u7528\u7684\u5bc4\u5b58\u5668\u6765\u5b9e\u73b0\u3002\u8fd9\u4e00\u5b9e\u73b0\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u4f7f\u7528\u65f6\u975e\u5e38\u8fc5\u901f\uff0c\u56e0\u4e3a\u5bf9\u5bc4\u5b58\u5668\u7684\u8bbf\u95ee\u662f\u5341\u5206\u9ad8\u6548\u7684\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6210\u672c\u7b49\u539f\u56e0\uff0c\u5bc4\u5b58\u5668\u7684\u6570\u91cf\u6709\u9650\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u6cd5\u8981\u6c42 page table \u7684\u5927\u5c0f\u5f88\u5c0f\uff1b\u540c\u65f6\uff0c\u7531\u4e8e\u4e13\u7528\u5bc4\u5b58\u5668\u53ea\u6709\u4e00\u7ec4\uff0c\u56e0\u6b64 context switch \u65f6\u9700\u8981\u5b58\u50a8\u5e76\u91cd\u65b0\u52a0\u8f7d\u8fd9\u4e9b\u5bc4\u5b58\u5668\u3002","title":"9.4.3.1 Simplest method"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9432-page-table-in-memory--ptbr","text":"\u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u673a\u5141\u8bb8\u9875\u8868\u975e\u5e38\u5927\uff0c\u56e0\u6b64\u5bf9\u4e8e\u8fd9\u4e9b\u673a\u5668\uff0c\u91c7\u7528\u5feb\u901f\u5bc4\u5b58\u5668\u5b9e\u73b0\u9875\u8868\u5c31\u4e0d\u53ef\u884c\u4e86\u3002\u6211\u4eec\u5c06\u9875\u8868\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5e76\u7528 Page-Table Base Register (PTBR) \u6307\u5411\u9875\u8868\u3002\u5728 context switch \u65f6\u53ea\u9700\u8981\u4fee\u6539 PTBR\u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u6cd5\u7684\u6548\u7387\u5b58\u5728\u95ee\u9898\u3002\u8981\u8bbf\u95ee logical address \u5bf9\u5e94\u7684 physical address\uff0c\u6211\u4eec\u9996\u5148\u8981\u6839\u636e PTBR \u548c page number \u6765\u627e\u5230\u9875\u8868\u5728\u5185\u5b58\u7684\u4f4d\u7f6e\uff0c\u5e76\u5728\u5176\u4e2d\u5f97\u5230 page \u5bf9\u5e94\u7684 frame number\uff0c\u8fd9\u9700\u8981\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\uff1b\u7136\u540e\u6211\u4eec\u6839\u636e frame number \u548c page offset \u7b97\u51fa\u771f\u5b9e\u7684 physical address\uff0c\u5e76\u8bbf\u95ee\u5bf9\u5e94\u7684\u5b57\u8282\u5185\u5bb9\u3002\u5373\uff0c\u8bbf\u95ee\u4e00\u4e2a\u5b57\u8282\u9700\u8981\u4e24\u6b21\u5185\u5b58\u8bbf\u95ee\uff0c\u8fd9\u4f1a\u52a0\u500d\u539f\u672c\u7684\u5185\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u8fd9\u662f\u96be\u4ee5\u63a5\u53d7\u7684\u3002","title":"9.4.3.2 Page table in memory &amp; PTBR"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9433-tlb","text":"\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u7528\u5230\u4e00\u4e2a\u4e13\u7528\u7684\u9ad8\u901f\u67e5\u627e\u786c\u4ef6 cache ( associative memory \uff0c\u652f\u6301 parallel search )\uff0c\u8fd9\u91cc\u79f0\u5b83\u4e3a translation look-aside buffer (TLB) \u3002TLB \u7684\u6bcf\u4e2a\u6761\u76ee\u7531 key & value \u7ec4\u6210\uff0c\u5206\u522b\u8868\u793a page number \u548c frame number\uff0c\u901a\u5e38\u6709 64~1024 \u4e2a\u6761\u76ee\uff08PPT \u4e0a\u8bf4 64~1024\uff0c\u8bfe\u672c\u4e0a\u8bf4 32~1024\uff0c\u533a\u522b\u4e0d\u5927\uff09\u3002\u5f53\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a page number \u5bf9\u5e94\u7684 frame number \u65f6\uff0cTLB \u4f1a \u540c\u65f6 \u4e0e\u5176\u4e2d\u6240\u6709\u7684 key \u8fdb\u884c\u6bd4\u8f83\uff1a\u5982\u679c\u627e\u5230\u5bf9\u5e94\u6761\u76ee\uff0c\u5c31\u4e0d\u5fc5\u8bbf\u95ee\u5185\u5b58\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff08\u79f0\u4e3a TLB miss \uff09\uff0c\u5219\u8bbf\u95ee\u5185\u5b58\u5e76\u5c06\u65b0\u7684 key & value \u5b58\u5165 TLB \u4e2d\uff0c\u8fd9\u4f1a\u66ff\u6362\u6389 TLB \u539f\u6709\u7684\u4e00\u4e2a\u6761\u76ee\u3002\u66ff\u6362\u7684\u7b56\u7565\u5305\u62ec least recently used (LRU), round-robin, random \u7b49\u3002\u6709\u4e9b TLB \u652f\u6301\u5c06\u67d0\u4e9b\u6761\u76ee wired down\uff0c\u5373\u4ed6\u4eec\u4e0d\u4f1a\u4ece TLB \u4e2d\u88ab\u66ff\u6362\u3002\u91cd\u8981\u7684\u5185\u6838\u4ee3\u7801\u4e00\u822c\u4f1a\u88ab wired down\u3002\u5728 MIPS \u67b6\u6784\u4e2d\uff0cTLB miss \u4f5c\u4e3a exception \u7531\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\uff1b\u5728 X86 \u67b6\u6784\u4e2d\uff0cTLB miss \u7531\u786c\u4ef6\u5904\u7406\u3002","title":"9.4.3.3 TLB"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9434-tlb-with-asid","text":"\u5982\u540c\u6211\u4eec\u63d0\u5230\u8fc7\u7684\uff0c\u6bcf\u4e2a process \u90fd\u6709\u5176\u81ea\u5df1\u7684 page table\u3002\u56e0\u6b64\u5207\u6362\u8fdb\u7a0b\u65f6\u4e5f\u9700\u8981\u5207\u6362 page table\u3002\u4ea6\u5373\uff0c\u6211\u4eec\u9700\u8981\u4fdd\u8bc1 TLB \u4e0e\u5f53\u524d\u8fdb\u7a0b\u7684 page table \u662f\u4e00\u81f4\u7684\u3002\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4e00\u8981\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u6b21\u5207\u6362\u65f6 flush TLB\u3002\u6216\u8005\uff0c\u6709\u4e9b TLB \u8fd8\u5728\u6bcf\u4e2a\u6761\u76ee\u4e2d\u4fdd\u5b58 Address-Space Identifier (ASID) \uff0c\u6bcf\u4e2a ASID \u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5f53 TLB \u8fdb\u884c\u5339\u914d\u65f6\uff0c\u9664\u4e86 page number \u5916\u4e5f\u5bf9 ASID \u8fdb\u884c\u5339\u914d\u3002","title":"9.4.3.4 TLB with ASID"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#9435-effective-memory-access-time","text":"\u6211\u4eec\u79f0\u6ca1\u6709\u53d1\u751f TLB miss \u7684\u6b21\u6570\u7684\u767e\u5206\u6bd4\u4e3a hit ratio \uff0c\u8fd9\u91cc\u8bb0\u4e3a \\(r\\) \u3002\u8bbe\u6bcf\u4e00\u6b21\u5185\u5b58\u8bbf\u95ee\u7684\u7528\u65f6\u4e3a \\(t\\) \uff0c\u90a3\u4e48 TLB hit \u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\u5b57\u8282\u603b\u5171\u7528\u65f6 \\(t\\) \uff1b\u800c TLB miss \u7684\u60c5\u51b5\u4e0b\u7528\u65f6 \\(2t\\) \u3002\u56e0\u6b64\u6709\u6548\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\uff08effective memory-access time\uff09 \\(\\text{EAT} = t\\cdot r + 2t(1-r) = t(2-r)\\) \uff0c\u76f8\u6bd4\u5c06 page table \u4fdd\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u65b9\u5f0f\uff0c\u5e73\u5747\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\u591a\u4e86 \\(\\cfrac{t(2-r)-t}{t} = 1 - r\\) \u3002\u5373\uff0c\u5982\u679c hit ratio \u4e3a 99%\uff0c\u90a3\u4e48\u5e73\u5747\u5185\u5b58\u8bbf\u95ee\u65f6\u95f4\u53ea\u591a\u4e86 1%\u3002","title":"9.4.3.5 Effective memory-access time"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#944-memory-protection","text":"\u5206\u9875\u73af\u5883\u4e0b\u7684\u5185\u5b58\u4fdd\u62a4\u7531\u4e0e\u6bcf\u4e2a frame \u5173\u8054\u7684 protection bits \u5b9e\u73b0\u3002\u8fd9\u4e9b bits \u901a\u5e38\u4fdd\u5b58\u5728\u9875\u8868\u4e2d\u3002\u4f8b\u5982 valid-invalid bit\uff1a \u5982\u56fe\u6240\u793a\uff0cin a system with a 14-bit address space (0 to 16383), we have a program that should use only addresses 0 to 10468. Given a page size of 2 KB, we have the situation shown in Figure 9.13. Addresses in pages 0, 1, 2, 3, 4, and 5 are mapped normally through the page table. Any attempt to generate an address in pages 6 or 7, however, will find that the valid\u2013invalid bit is set to invalid, and the computer will trap to the operating system (invalid page reference). Notice that this scheme has created a problem. Because the program extends only to address 10468, any reference beyond that address is illegal. However, references to page 5 are classified as valid, so accesses to addresses up to 12287 are valid. Only the addresses from 12288 to 16383 are invalid. This problem is a result of the 2-KB page size and reflects the internal fragmentation of paging. Some systems provide hardware, in the form of a page-table length register (PTLR) , to indicate the size of the page table. This value is checked against every logical address to verify that the address is in the valid range for the process. Failure of this test causes an error trap to the operating system.","title":"9.4.4 Memory Protection"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#945-shared-pages","text":"\u5206\u9875\u53ef\u4ee5\u5141\u8bb8\u8fdb\u7a0b\u95f4\u5171\u4eab\u4ee3\u7801\uff0c\u4f8b\u5982\u540c\u4e00\u7a0b\u5e8f\u7684\u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u53ea\u8981\u8fd9\u4efd\u4ee3\u7801\u662f reentrant code \uff08or non-self-modifying code : never changes between execution\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe\u4e2d\u6240\u8ff0\u7684\u662f\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4efd\u5e93\u4ee3\u7801\u7684\u60c5\u51b5\uff1b\u5171\u4eab\u8fd8\u53ef\u4ee5\u7528\u4e8e\u8fdb\u7a0b\u4e4b\u95f4\u7684\u4ea4\u6d41\u3002\u5f53\u7136\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e5f\u53ef\u4ee5\u6709\u5176\u81ea\u5df1\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002","title":"9.4.5 Shared Pages"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#946-problems","text":"Paging \u4f1a\u5bfc\u81f4\u5185\u90e8\u788e\u7247\u3002\u5373\uff0c\u5206\u914d\u662f\u4ee5 frame \u4e3a\u5355\u4f4d\u6267\u884c\u7684\uff0c\u5982\u679c\u8fdb\u7a0b\u8981\u6c42\u7684\u5185\u5b58\u4e0d\u662f frame \u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a frame \u5c31\u4f1a\u7528\u4e0d\u5b8c\uff0c\u4ea7\u751f\u5185\u90e8\u788e\u7247\u3002\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u9700\u8981 n pages + 1 byte \u7684\u8fdb\u7a0b\u9700\u8981\u5206\u914d n+1 \u4e2a frame\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f FrameSize - 1 \u90a3\u4e48\u5927\u7684 Internal Fragmentation\u3002 \u5982\u679c\u8fdb\u7a0b\u7684\u5927\u5c0f\u4e0e\u9875\u5927\u5c0f\u65e0\u5173\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5185\u90e8\u788e\u7247\u7684\u5747\u503c\u4e3a \u00bd FrameSize \u3002\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u5e73\u5747\u503c\u6bd4\u8fd9\u5c0f\u5f88\u591a\u3002\u5f53\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u51cf\u5c0f\u5185\u90e8\u788e\u7247\u800c\u5c06 frame \u7684\u5927\u5c0f\u65e0\u9650\u51cf\u5c0f\uff0c\u56e0\u4e3a\u66f4\u5c0f\u7684 frame size \u9700\u8981\u66f4\u591a\u7684\u9875\u8868\u9879\u3002","title":"9.4.6 Problems"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#95-structure-of-page-table","text":"","title":"9.5 Structure of Page Table"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#951-hierarchical-paging","text":"\u5982\u6211\u4eec\u5728 9.4.1 \u4e2d\u6240\u8ff0\uff0c\u9875\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c page_table[i] \u4e2d\u5b58\u50a8\u7684\u662f page number \u4e3a i \u7684 page \u6240\u5bf9\u5e94\u7684 frame number\u3002\u8003\u8651\u6211\u4eec\u7684\u903b\u8f91\u5730\u5740\u7ed3\u6784\uff1a \u8fd9\u6837\u7684\u903b\u8f91\u5730\u5740\u7ed3\u6784\u9700\u8981\u4e00\u4e2a\u5b58\u50a8 2 p \u4e2a\u5143\u7d20\u7684 page table\uff0c\u5373\u9700\u8981\u8fd9\u4e48\u5927\u7684\u8fde\u7eed\u5185\u5b58\uff0c\u8fd9\u662f\u975e\u5e38\u5927\u7684\u6d88\u8017\u3002\u6211\u4eec\u8003\u8651\u5c06 p \u518d\u5206\u4e3a p 1 \u548c p 2 \uff1a \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u4e24\u7ea7\u9875\u8868\uff0c outer_page_table[i] \u4e2d\u5b58\u50a8\u7684\u662f p 1 \u4e3a i \u7684 inner page table\uff0c\u5373 inner_page_table[i][] \u7684\u57fa\u5730\u5740\uff1b\u800c inner_page_table[i][j] \u4e2d\u5b58\u50a8\u7684\u5c31\u662f p 1 \u4e3a i\uff0cp 2 \u4e3a j \u7684 page \u5bf9\u5e94\u7684 frame number\uff0c\u5373 page number \u4e3a p 1 p 2 \uff08\u6ca1\u6709\u5206\u5272\u65f6\u7684 p\uff09\u5bf9\u5e94\u7684 frame number\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u79f0 p 1 \u4e3a page directory number \uff0cp 2 \u4e3a page table number \uff0cd \u4e3a page offset \u3002 \u56de\u987e\u6211\u4eec\u5728 9.4.2 \u4e2d\u7684\u5206\u6790\uff1a\u903b\u8f91\u5730\u5740 \u4ee3\u66ff \u7269\u7406\u5730\u5740\u6ee1\u8db3\u4e86\u7a0b\u5e8f\u7684 contiguous \u8981\u6c42\u3002\u8003\u8651\u8fd9\u4e2d\u5206\u4e24\u9875\u7684 page table \u7ed3\u6784\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u53ea\u662f\u5c06 p \u5206\u6210\u4e86\u4e24\u90e8\u5206\uff1b\u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\uff0cp+d \u6784\u6210\u7684\u6574\u4f53\uff08\u5373\u903b\u8f91\u5730\u5740\uff09\u4ecd\u7136\u662f contiguous \u7684\uff0c\u800c\u4e14\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u610f\u8bc6\u5230\u6211\u4eec\u5c06 p \u5206\u6210\u4e86 p 1 \u548c p 2 \u4e24\u90e8\u5206\uff0c\u5c31\u50cf\u66fe\u7ecf\u5b83\u6ca1\u6709\u610f\u8bc6\u5230\u6211\u4eec\u5c06 address \u5206\u4e3a\u4e86 p \u548c d \u4e24\u90e8\u5206\u4e00\u6837\u3002\u8fd9\u4e9b\u5212\u5206\u53ea\u662f\u6211\u4eec\u4e3a\u4e86\u66f4\u597d\u5730\u5206\u914d\u5185\u5b58\u6240\u505a\u7684\u3001Operating-System-Level \u7684\u4e8b\u60c5\u800c\u5df2\u3002 \u8003\u8651\u8fd9\u6837\u505a\u7684\u597d\u5904\uff1ahierarchical paging \u5176\u5b9e\u5c31\u662f\u5bf9\u9875\u8868\u7684\u5206\u9875\uff08page the page table\uff09\u3002\u56e0\u6b64\uff0c\u5b83\u907f\u514d\u4e86 page table \u5fc5\u987b\u5904\u5728\u8fde\u7eed\u5185\u5b58\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u95ee\u9898\u5728 p \u6bd4\u8f83\u5927\u65f6\u5c24\u5176\u4e25\u91cd\u3002 \u53e6\u5916\uff0c\u8fd9\u6837\u505a\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002\u6211\u4eec\u4e4b\u524d\u63d0\u5230\uff0c\u9875\u8868\u4e0d\u4e00\u5b9a\u4f1a\u5168\u90e8\u4f7f\u7528\uff1b\u5e76\u4e14\u7531\u4e8e\u903b\u8f91\u5730\u5740\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u7528\u5230\u7684\u9875\u8868\u9879\u4e5f\u662f\u8fde\u7eed\u7684\uff0c\u90fd\u6392\u5728\u9875\u8868\u7684\u5934\u90e8\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u91c7\u7528\u4e86\u4e8c\u7ea7\u9875\u8868\uff0c\u90a3\u4e48\u8bb8\u591a\u6392\u5728\u540e\u9762\u7684 inner page table \u5c06\u5b8c\u5168\u4e3a\u7a7a\uff1b\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e0d\u7ed9\u8fd9\u4e9b inner page table \u5206\u914d\u7a7a\u95f4\uff0c\u5373\u6211\u4eec\u53ea\u5206\u914d\u6700\u5927\u7684 p 1 \u90a3\u4e48\u591a\u4e2a inner page table\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8282\u7701\u5f88\u591a\u7a7a\u95f4\u3002\u5373\u4f7f\u5728\u6700\u5dee\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u9875\u8868\u90fd\u88ab\u4f7f\u7528\u4e86\uff0c\u6211\u4eec\u7684\u9875\u8868\u6240\u7528\u7684\u603b\u6761\u76ee\u6570\u4e5f\u53ea\u6709 \\(2^{p_1}+2^{p_1}\\cdot 2^{p_2} = 2^{p_1} + 2^{p_1 + p_2}\\) \u4e2a\uff0c\u53ea\u6bd4\u5355\u7ea7\u9875\u8868\u7ed3\u6784\u591a\u4e86 \\(2^{p_1}\\) \uff0c\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u66f4\u591a\u7ea7\u7684\u9875\u8868\u3002\u4f8b\u5982\uff0c64 \u4f4d\u7684\u903b\u8f91\u5730\u5740\u7a7a\u95f4\u4f7f\u7528\u4e8c\u7ea7\u9875\u8868\u5c31\u662f\u4e0d\u591f\u7684\uff0c\u5426\u5219\u5b83\u7684\u9875\u8868\u5c31\u4f1a\u957f\u6210\u8fd9\u6837\uff1a \u8fd9\u6837 outer page \u5c31\u4f1a\u8d85\u7ea7\u5927\u3002\u6211\u4eec\u53ef\u4ee5 page the outer page\uff1a \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u4e09\u7ea7\u9875\u8868\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u5168\u90e8\u7684 64 \u4f4d\uff0c\u5373\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a 64 \u4f4d\u90a3\u4e48\u5de8\u5927\u7684 virtual address space\u3002AMD-64 \u652f\u6301 48-bit \u7684\u865a\u62df\u5730\u5740\uff0cARM64 \u652f\u6301 39-bit \u548c 48-bit \u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff1a","title":"9.5.1 Hierarchical Paging"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#952-hashed-page-tables","text":"\u524d\u9762\u4ecb\u7ecd\u7684\u9875\u8868\u662f\u4f7f\u7528\u4e00\u4e2a table \u4fdd\u5b58 page# \u5bf9\u5e94\u7684 frame#\uff0c\u8fd9\u79cd\u89e3\u51b3\u65b9\u6848\u9762\u4e34\u7684\u95ee\u9898\u662f\u7a7a\u95f4\u9700\u6c42\u662f \\(\\Theta(\\text{Possible Page#})\\) \u4e14\u8fde\u7eed\u7684\uff1b\u6211\u4eec\u901a\u8fc7\u591a\u7ea7\u9875\u8868\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u800c\u54c8\u5e0c\u9875\u8868\u7ed9 page# \u5206\u914d frame# \u5e76\u4e0d\u662f\u968f\u610f\u5206\u914d\uff0c\u800c\u662f\u901a\u8fc7\u54c8\u5e0c\u8ba1\u7b97\u5f97\u5230\u3002\u8fd9\u6837\u7684\u65b9\u5f0f\u5c06\u7a7a\u95f4\u9700\u6c42\u964d\u4f4e\u5230 \\(\\Theta(\\text{Bucket#} + \\text{Used Page#})\\) \u4e14\u6bcf\u4e2a page \u5bf9\u5e94\u7684\u8868\u9879\u5728\u5185\u5b58\u4e2d\u5e76\u4e0d\u9700\u8981\u8fde\u7eed\uff0c\u4ece\u800c\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u54c8\u5e0c\u9875\u8868\u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\u9664\u4e86 page number \u548c frame number \u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u6307\u5411\u6709\u540c\u4e00\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u9875\u8868\u9879\u7684\u6307\u9488\u3002\u8fd9\u4e2a\u7ed3\u6784\u4e0e\u4e00\u822c\u7684\u54c8\u5e0c\u8868\u662f\u4e00\u81f4\u7684\u3002 \u8fd9\u662f 32-bit address spaces \u9875\u8868\u7684\u4e00\u4e2a\u5e38\u7528\u65b9\u6848\u3002","title":"9.5.2 Hashed Page Tables"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#953-inverted-page-tables","text":"\u5728\u4e4b\u524d\u7684\u5206\u9875\u65b9\u6cd5\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u9875\u8868\u3002\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u8868\u53ef\u80fd\u4f7f\u7528\u5927\u91cf\u7684\u7269\u7406\u5185\u5b58\u3002 Inverted page tables \u7d22\u5f15 physical address \u800c\u4e0d\u662f logical address\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6574\u4e2a\u7cfb\u7edf\u53ea\u6709\u4e00\u4e2a\u9875\u8868\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u7406\u5185\u5b58\u7684 frame \u53ea\u6709\u4e00\u6761\u76f8\u5e94\u7684\u6761\u76ee\u3002\u5bfb\u5740\u65f6\uff0cCPU \u904d\u5386\u9875\u8868\uff0c\u627e\u5230\u5bf9\u5e94\u7684 pid \u548c page number\uff0c\u5176\u5728\u9875\u8868\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\u5373\u4e3a frame number\uff1a \u8fd9\u79cd\u505a\u6cd5\u7684\u7f3a\u70b9\u662f\uff0c\u5bfb\u5740\u8fc7\u7a0b\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 TLB \u6216\u8005 hashed table \u6765\u52a0\u901f\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u591f\u5171\u4eab\u5185\u5b58\uff0c\u56e0\u4e3a page table \u7684\u6bcf\u4e00\u4e2a\u6761\u76ee\uff08\u4e0e frame number \u4e00\u4e00\u5bf9\u5e94\uff09\u53ea\u80fd\u5b58\u50a8\u4e00\u4e2a page number\u3002","title":"9.5.3 Inverted Page Tables"},{"location":"%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86/os/IV_memory_management/9_main_memory/#96-swapping","text":"\u8fdb\u7a0b\u7684\u6307\u4ee4\u548c\u6570\u636e\u5fc5\u987b\u5728\u5185\u5b58\u4e2d\u4ee5\u6267\u884c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u8fdb\u7a0b\u6216\u8fdb\u7a0b\u7684\u4e00\u90e8\u5206\u6682\u65f6\u4ece\u5185\u5b58 swap \u5230 backing store \uff08\u5907\u4efd\u5b58\u50a8\uff0c\u901a\u5e38\u662f\u4e00\u4e2a\u6bd4\u8f83\u5feb\u7684\u78c1\u76d8\uff09\u4e2d\uff0c\u7ee7\u7eed\u8fd0\u884c\u65f6\u4ece\u4e2d\u91cd\u65b0\u62ff\u56de\u5230\u5185\u5b58\u3002Swapping \u4f7f\u5f97\u6240\u6709\u8fdb\u7a0b\u603b\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u603b\u548c\u8d85\u8fc7\u7cfb\u7edf\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u5730\u5740\u7a7a\u95f4\u79f0\u4e3a\u53ef\u80fd\uff0c\u63d0\u9ad8\u4e86\u7cfb\u7edf\u7684 degree of multiprogramming\u3002 \u5f53\u7136\uff0c\u5728\u5185\u5b58\u6bd4\u8f83\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cswapping \u5e76\u4e0d\u5fc5\u4f7f\u7528\u3002Swapping \u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f88\u957f\u7684 context switch \u7528\u65f6\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u80fd\u5e76\u4e0d\u5728\u5185\u5b58\u4e2d\uff0c\u800c\u7531\u4e8e\u78c1\u76d8\u7684 I/O \u5f88\u6162\uff0cswapping \u5230\u5185\u5b58\u4f1a\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u3002 \u5728\u5206\u9875\u7684\u673a\u5236\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea swap out \u4e00\u4e9b pages\uff0c\u800c\u4e0d\u5fc5 swap out \u4e00\u6574\u4e2a\u8fdb\u7a0b\uff1a","title":"9.6 Swapping"},{"location":"%E7%94%9F%E6%B4%BB/","text":"\u751f\u6d3b \u00b6 Abstract \u4e00\u4e9b\u603b\u7ed3\u3001\u89c4\u5212\u548c\u788e\u788e\u5ff5","title":"\u751f\u6d3b"},{"location":"%E7%94%9F%E6%B4%BB/#\u751f\u6d3b","text":"Abstract \u4e00\u4e9b\u603b\u7ed3\u3001\u89c4\u5212\u548c\u788e\u788e\u5ff5","title":"\u751f\u6d3b"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/","text":"Abstract \u6211\u5728 20 \u5c81\u751f\u65e5\u7684\u65f6\u5019\u6574\u7406\u4e86\u4e00\u756a\u5bf9\u4e8e\u793e\u4ea4\u5173\u7cfb\u7684\u601d\u8003\uff0c\u524d\u51e0\u5929\u9655\u7fa4\u96c6\u4f53 emo \u7684\u65f6\u5019\u53c8\u62ff\u51fa\u6765\u8ba8\u8bba\u4e86\u3002\u5728\u4e4b\u524d\u7684\u601d\u8003\u4e4b\u540e\uff0c\u5176\u5b9e\u8fd8\u6709\u5f88\u591a\u96f6\u788e\u7684\u60f3\u6cd5\u548c\u8ba8\u8bba\u3002\u6211\u5bf9\u8fd9\u65b9\u9762\u7684\u9700\u6c42\u548c\u60f3\u6cd5\u6bd4\u8f83\u590d\u6742\uff0c\u6240\u4ee5\u62ff\u51fa\u6765\u518d\u6574\u7406\u4e00\u4e0b\u2014\u2014 Warning \u8fd9\u7bc7\u6587\u7ae0\u53ea\u662f\u5bf9\u6211\u81ea\u5df1\u601d\u8003\u7684\u4e00\u4e2a\u603b\u7ed3\u3002\u6211\u4e0d\u61c2\u5fc3\u7406\u5b66\uff0c\u4e0d\u61c2\u60c5\u611f\uff0c\u6240\u4ee5\u53ea\u80fd\u629b\u51fa\u5404\u79cd\u81ea\u5df1\u770b\u5230\u7684\u95ee\u9898\uff0c\u4f46\u5f88\u96be\u7ed9\u51fa\u4ec0\u4e48\u5408\u7406\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4f1a\u5c3d\u91cf\u63d0\u9192\u81ea\u5df1\u53bb\u6ce8\u610f\u90a3\u4e9b\u9677\u9631\u2014\u2014\u4f46\u662f\u597d\u50cf\u5f88\u96beQWQ 1 \u5bf9\u793e\u4ea4\u5173\u7cfb\u7684\u5206\u7ea7 \u00b6 \u8ba8\u8bba\u8303\u56f4 \u4ee5\u4e0b\u5bf9\u4e8e\u793e\u4ea4\u5173\u7cfb\u548c\u4eb2\u5bc6\u5173\u7cfb\u7684\u8ba8\u8bba\uff0c\u5747\u4e0d\u5305\u542b\u8840\u4eb2\u4e4b\u7c7b\u5148\u5929\u81ea\u5e26\u7684\u5173\u7cfb\u3002\u56e0\u4e3a\u5728\u6211\u770b\u6765\uff0c\u8fd9\u4e9b\u4eba\u90fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6211\u7684\u4e16\u754c\u4e2d\u7684\u300c\u516c\u7406\u300d\uff0c\u662f\u6211\u7684\u4ef7\u503c\u89c2\u7684\u5f88\u5927\u4e00\u90e8\u5206\uff0c\u8fdb\u800c\u662f\u300c\u6211\u81ea\u5df1\u300d\u7684\u4e00\u90e8\u5206\u3002\u6211\u5e76\u4e0d\u5c1d\u8bd5\u53bb\u8bc4\u4ef7\u300c\u81ea\u5df1\u300d\u3002 \u6211\u4eec\u628a\u4e0a\u8ff0\u8ba8\u8bba\u8303\u56f4\u5185\u7684\u793e\u4ea4\u5bf9\u8c61\u7edf\u79f0\u4e3a\u300c\u719f\u4eba\u300d\u3002\u4ed6\u4eec\u5b58\u5728\u7684\u610f\u4e49\u53ef\u80fd\u5305\u62ec\uff1a \u57fa\u672c\u7684\u7269\u8d28\u6216\u8005\u53d1\u5c55\u4ef7\u503c\uff0c\u4f8b\u5982\u4e92\u76f8\u5e2e\u52a9\u3001\u63d0\u4f9b\u5efa\u8bae\u7b49\uff1b \u8fdb\u4e00\u6b65\u5730\uff0c\u80fd\u591f\u81ea\u53d1\u5408\u4f5c\u6216\u8005\u63a2\u8ba8\u5b66\u4e1a\u3001\u5de5\u4f5c\u76f8\u5173\u7684\u95ee\u9898\uff1b \u57fa\u672c\u7684\u7cbe\u795e\u4ef7\u503c\uff0c\u4f8b\u5982\u548c\u4ed6\u4eec\u4ea4\u5f80\u80fd\u591f\u6ee1\u8db3\u81ea\u5df1\u7684\u7cbe\u795e\u9700\u6c42\uff0c\u4f8b\u5982\u5206\u4eab\u6b32\u6216\u6210\u5c31\u611f\uff1b \u8fdb\u4e00\u6b65\u5730\uff0c\u80fd\u591f\u5c31\u4e00\u4e9b\u95ee\u9898\u4ea4\u6362\u60f3\u6cd5\uff0c\u8f83\u4e3a\u6df1\u5165\u5730\u8c08\u5fc3\u7b49\uff1b \u300c\u53ef\u4f9d\u8d56\u300d \u6211\u4f1a\u5728\u540e\u9762\u5206\u4eab\u6211\u5bf9\u300c\u53ef\u4f9d\u8d56\u300d\u7684\u5b9a\u4e49\uff0c\u90a3\u662f\u6211\u5bf9\u793e\u4ea4\u5173\u7cfb\u7684\u6700\u9ad8\u8ffd\u6c42\u3002 2 \u300c\u53ef\u4f9d\u8d56\u300d \u00b6 \u9996\u5148\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898\uff01 \u5982\u679c\uff0c\u5916\u661f\u4eba\u964d\u4e34\uff01\u5b83\u4eec \u6307\u5b9a \u4e86\u4e00\u4e2a\u6b63\u6574\u6570 \\(k\\) \uff0c\u8981\u6c42\u6211\u4eec\u6bcf\u4e00\u4e2a\u4eba\u9700\u8981\u5728 \u4e0d\u548c\u5176\u4ed6\u4eba\u6c9f\u901a \u7684\u60c5\u51b5\u4e0b\u9009\u5b9a\u5176\u4ed6 \\(k\\) \u4e2a\u4eba\uff0c\u4e0d\u5305\u542b\u8840\u4eb2\u3002\u5982\u679c\u4f60\u9009\u51fa\u7684\u8fd9 \\(k\\) \u4e2a\u4eba\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u9009\u62e9\u4e86\u4f60\uff0c\u4f60\u5c31\u80fd\u6d3b\u4e0b\u6765\uff0c\u5426\u5219\u4f60\u5c31\u4f1a\u88ab\u5f04\u6b7b\ud83d\ude08\u3002 \u4f60\u7684\u9009\u62e9\u9700\u8981\u5c3d\u53ef\u80fd\u8ba9\u4f60\u6d3b\u4e0b\u6765 \uff0c\u8bf7\u95ee\uff1a \u5f53 \\(k = 1, 3, 5\\) \u7684\u65f6\u5019\uff0c\u4f60\u662f\u5426\u5206\u522b\u6709\u5bf9\u5e94\u7684\u4eba\u9009\uff1f \u5728 \\(k\\) \u4e0d\u5c0f\u4e8e\u591a\u5c11\u7684\u65f6\u5019\uff0c\u4f60\u6562\u7b03\u5b9a\u5730\u9009\u62e9\u67d0\u4e2a\u4eba\uff1f \u5728 \\(k\\) \u4e0d\u5145\u5206\u5927\u7684\u524d\u63d0\u4e0b\uff0c\u4f60\u6709\u591a\u5c11\u4eba\u9009\uff1f \u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u5728\u7406\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u679c\u67d0\u4e2a\u4eba\u4e0d\u4f1a\u9009\u4f60\uff0c\u90a3\u4e48\u4f60\u9009\u4ed6\u5c31\u6beb\u65e0\u610f\u4e49\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6562\u9009\u62e9\u67d0\u4e2a\u4eba\u7684\u524d\u63d0\u662f\uff1a \u5bf9\u65b9\u7684\u8a00\u884c\u8db3\u4ee5\u8ba9\u6211\u76f8\u4fe1\uff0c\u6211\u5728\u5bf9\u65b9\u7684\u5fc3\u91cc\u8db3\u591f\u91cd\u8981\uff1b \u6211\u786e\u4fe1 \u6211\u7684\u8a00\u884c\u8db3\u4ee5\u8ba9\u5bf9\u65b9\u76f8\u4fe1\uff0c\u5bf9\u65b9\u5728\u6211\u7684\u5fc3\u91cc\u8db3\u591f\u91cd\u8981\u3002 \u6211\u79f0\u8fd9\u6837\u7684\u5173\u7cfb\u4e3a\u300c \u53ef\u4f9d\u8d56 \u300d\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u826f\u6027\u7684\u4eb2\u5bc6\u5173\u7cfb\u9700\u8981\u8ba9\u53cc\u65b9\u90fd\u5bf9\u8fd9\u6bb5\u5173\u7cfb\u6709\u5145\u5206\u7684\u4fe1\u4efb\uff0c\u540c\u65f6\u4e5f\u90fd\u80fd\u591f\u5c06\u81ea\u5df1\u5bf9\u7ef4\u7cfb\u5173\u7cfb\u7684\u610f\u613f \u5448\u73b0 \u51fa\u6765\uff0c\u5e76\u786e\u4fdd\u5bf9\u65b9\u80fd\u591f\u611f\u53d7\u5230\u3002 \u56e0\u6b64\uff0c\u6211\u79f0\u4e00\u4e2a\u4eba\u4e3a \u300c \\(k\\) - \u53ef\u4f9d\u8d56 \u300d\u7684\uff0c\u5176\u4e2d \\(k\\) \u662f\u4f7f\u4f60\u6562\u4e8e\u7b03\u5b9a\u5730\u9009\u62e9\u8fd9\u4e2a\u4eba\u7684\u6700\u5c0f \\(k\\) \u3002 \u5bf9\u6211\u4e2a\u4eba\u800c\u8a00\uff0c \u6301\u7eed \u7684\u300c\u53ef\u4f9d\u8d56\u300d\u662f\u6211\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u7684\u6700\u9ad8\u671f\u5f85\uff1b\u800c \\(k\\) \u8d8a\u5c0f\uff0c\u6211\u5c31\u8ba4\u4e3a\u8fd9\u6bb5\u4eb2\u5bc6\u5173\u7cfb\u7684\u8d28\u91cf\u8d8a\u9ad8\u3002 2.1 \u604b\u7231\u5173\u7cfb \u00b6 \u604b\u7231\u5173\u7cfb\u662f\u9876\u7ea7\u4eb2\u5bc6\u5173\u7cfb\u7684\u4f53\u9a8c\u5361\u3002 \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0c\u6211\u5e76\u6ca1\u6709\u628a\u604b\u7231\u5173\u7cfb\u6392\u9664\u5728\u4eb2\u5bc6\u5173\u7cfb\u4e4b\u5916 \u2014\u2014 \u4ece\u6211\u7684\u89d2\u5ea6\u800c\u8a00\uff0c\u604b\u7231\u5173\u7cfb\u662f\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u7684\u300c \u4f53\u9a8c\u5361 \u300d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e24\u4e2a\u4eba\u7684\u5171\u540c\u7279\u8d28\u3001\u559c\u597d\u3001\u5171\u540c\u7ecf\u5386\u7b49\u7b49\u56e0\u7d20\u53ef\u80fd\u6682\u65f6\u8fbe\u4e0d\u5230 \\(k = 1\\) \u7684\u8981\u6c42\uff0c\u4f46\u662f\u604b\u7231\u5173\u7cfb\u4f5c\u4e3a\u4e00\u4e2a\u4e16\u4fd7\u7684\u9053\u5fb7\u7ea6\u675f\uff0c\u5b83\u672c\u8eab\u8981\u6c42\u6211\u4eec\uff08\u6216\u8005\uff0c\u8ba9\u6211\u4eec\u6709\u4fe1\u5fc3\uff09\u5728\u4e0a\u8ff0\u8ba8\u8bba\u4e2d\u4f18\u5148\u9009\u62e9\u81ea\u5df1\u7684\u5bf9\u8c61\u3002 \u800c\u5728\u6211\u770b\u6765\uff0c\u604b\u7231\u5173\u7cfb\u5728\u5f00\u59cb\u4e4b\u540e\u9700\u8981\u505a\u7684\uff0c\u5c31\u662f\u5728\u8fd9\u5f20\u300c\u4f53\u9a8c\u5361\u300d\u5230\u671f\u4e4b\u524d\uff0c\u53bb\u6c9f\u901a\u3001\u78e8\u5408\u3001\u5171\u4e8b\uff0c\u5171\u540c\u7ecf\u5386\u5e73\u5e38\u7684\u548c\u7279\u6b8a\u7684\u4e8b\u60c5\uff0c\u52a0\u6df1\u4e86\u89e3\u548c\u7f81\u7eca\uff0c\u4ece\u800c\u8865\u9f50 \\(k = 1\\) \u6240\u9700\u8981\u7684\u60c5\u611f\u57fa\u7840\u3002 \u4e5f\u6b63\u56e0\u5982\u6b64\uff0c\u56e0\u4e3a\u6211\u5bf9\u6027\u672c\u8eab\u6ca1\u4ec0\u4e48\u9700\u6c42\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6211\u800c\u8a00\uff0c\u5982\u679c\u6709\u80fd\u591f\u6301\u7eed\u7684\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u5173\u7cfb\u7684\u670b\u53cb\uff0c\u90a3\u604b\u7231\u5bf9\u4e8e\u6211\u6765\u8bf4\u4f3c\u4e4e\u5c31\u4e0d\u600e\u4e48\u91cd\u8981\u4e86\u3002\uff08\u4e0d\u8fc7\u611f\u89c9\u8fd9\u6bd4\u8c08\u4e00\u6bb5\u604b\u7231\u8fd8\u8981\u96be\u597d\u591a\ud83d\ude15\uff09\uff09\uff09\uff09 3 \u4e00\u4e9b\u95ee\u9898\u548c\u56f0\u5883 \u00b6 Warning \u4e0b\u9762\u7684\u4e1c\u897f\u53ef\u80fd\u66f4\u7410\u788e\u548c\u6ca1\u6709\u903b\u8f91\u4e86\u2026\u2026 3.1 \u5f00\u59cb\uff0c\u800c\u4e0d\u53ea\u662f\u7ef4\u6301 \u00b6 \u6211\u8ba4\u4e3a\u4e00\u5207\u793e\u4ea4\u5173\u7cfb\u7684\u5efa\u7acb\u548c\u7ef4\u6301\u9700\u8981 \u524d\u63d0\uff1a\u4e00\u4e2a\u8ba9\u4e24\u4e2a\u4eba\u8ba4\u8bc6\u7684\u7406\u7531 \u5efa\u7acb\uff1a a. \u4e92\u76f8\u5438\u5f15\uff0c\u6216\u8005 b. \u4e92\u76f8\u6709\u5efa\u7acb\u5173\u7cfb\u7684\u4ef7\u503c\uff0c\u6216\u8005 c. \u524d\u8ff0\u300c\u524d\u63d0\u300d\u7684\u957f\u671f\u6301\u7eed \u7ef4\u6301\uff1a a. \u4ecd\u7136\u5b58\u5728\u6ee1\u8db3\u524d\u8ff0\u300c\u5efa\u7acb\u300d\u8981\u6c42\u7684\u6761\u4ef6 b. \u57fa\u672c\u7684\u7ef4\u7cfb\u6d3b\u52a8 c. \u6ca1\u6709\u56e0\u4e3a\u8db3\u591f\u591a\u6216\u8005\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u793e\u4ea4\u5173\u7cfb\u5728\u81f3\u5c11\u4e00\u65b9\u770b\u6765\u4e0d\u503c\u5f97\u7ef4\u7cfb\u7684 \u56e0\u6b64\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0a\u5927\u5b66\u4ee5\u540e\u4f1a\u611f\u89c9\u670b\u53cb\u5c11\u4e86\u5462\uff1f\u5c31\u662f\u56e0\u4e3a\u7b2c 1 \u6761\u53d8\u5f97\u66f4\u52a0\u7a00\u6709\u4e86\u3002\u9ad8\u4e2d\u5927\u5bb6\u90fd\u5728\u4e00\u4e2a\u73ed\u91cc\u4e0a\u8bfe\uff0c\u4ea4\u6d41\u76f8\u5f53\u4e30\u5bcc\uff1b\u540c\u684c\u548c\u90e8\u5206\u597d\u53cb\u751a\u81f3\u53ef\u4ee5\u6ee1\u8db3\u7b2c 2 \u6761\u7684\u8981\u6c42 c\uff0c\u56e0\u800c\u4e0d\u9700\u8981\u6211\u4eec\u4e3b\u89c2\u52aa\u529b\u5c31\u80fd\u5efa\u7acb\u8d77\u793e\u4ea4\u5173\u7cfb\u3002 \u4e5f\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5f88\u591a\u4eba\uff0c\u5c24\u5176\u662f\u5bf9\u793e\u4ea4\u5173\u7cfb\u7684 \u6570\u91cf \u9700\u6c42\u4e0d\u9ad8\u7684\u4eba\uff0c\u5728\u5927\u5b66\u4e4b\u524d\u5b8c\u5168\u6ca1\u6709\u4e3b\u89c2\u52aa\u529b\u5efa\u7acb\u793e\u4ea4\u5173\u7cfb\u7684\u7ecf\u9a8c\u548c\u610f\u8bc6\uff1b\u800c\u5230\u4e86\u5927\u5b66\uff0c\u5ba2\u89c2\u73af\u5883\u66ff\u6211\u4eec\u6ee1\u8db3\u7b2c 1 \u6761\u7684\u4f18\u52bf\u4e0d\u590d\u5b58\u5728\uff0c\u6211\u4eec\u81ea\u7136\u5c31\u5f88\u96be\u6709\u4ec0\u4e48\u65b0\u7684\u670b\u53cb\u4e86\u3002 3.2 \u5927\u591a\u6570\u7537\u5973\u751f\u793e\u4ea4\u7684\u4e0d\u540c\u70b9 \u00b6 \u4e00\u4e2a\u89c2\u5bdf\uff0c\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9 \u2014\u2014 \u5927\u591a\u6570\u7537\u751f\u5f62\u6210\u5708\u5b50\u6216\u8005\u4e00\u8d77\u51fa\u6e38\u57fa\u672c\u90fd\u6709\u4e00\u4e2a\u660e\u786e\u7684\u4e3b\u9898\uff0c\u800c\u5973\u5b69\u5b50\u4eec\u53ef\u4ee5\u7eaf\u7cb9\u56e0\u4e3a\u300c\u5173\u7cfb\u597d\u300d\u5f62\u6210\u4e00\u4e2a\u5708\u5b50\uff0c\u540c\u65f6\u53ef\u4ee5\u6ca1\u6709\u4efb\u4f55\u9884\u8c0b\u6216\u8005\u76ee\u7684\u5730\u4e00\u540c\u51fa\u6e38\u3002 \u4f46\u5b9e\u9645\u4e0a\u5728\u6211\u770b\u6765\uff0c\u804a\u5929\u4e5f\u8bb8\u66f4\u80fd\u4fc3\u8fdb\u5f7c\u6b64\u4e4b\u95f4\u7684\u4e86\u89e3\uff0c\u8fdb\u4e00\u6b65\u589e\u8fdb\u5f7c\u6b64\u7684\u4fe1\u4efb\u611f\u3002\u8fd9\u4e5f\u662f\u6211\u8ba4\u4e3a\u5927\u591a\u6570\u5973\u5b69\u5b50\u5728\u7cbe\u795e\u5c42\u9762\u7684\u793e\u4ea4\u8d28\u91cf\u6bd4\u7537\u5b69\u5b50\u597d\u4e00\u4e9b\u7684\u539f\u56e0\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4e5f\u4f1a\u5728\u6bcf\u4e2a\u5047\u671f\u5c3d\u53ef\u80fd\u548c\u5e0c\u671b\u7ef4\u6301\u5173\u7cfb\u7684\u8001\u670b\u53cb\u4e00\u8d77\u51fa\u6765\u538b\u9a6c\u8def\u3001\u804a\u5929 \u2014\u2014 \u6211\u5e0c\u671b\u5728\u4ea4\u5230\u65b0\u7684\u597d\u670b\u53cb\u8d8a\u6765\u8d8a\u96be\u7684\u60c5\u51b5\u4e0b\u5c3d\u53ef\u80fd\u7ef4\u62a4\u597d\u73b0\u6709\u7684\u5173\u7cfb\u3002\uff08\u4e0d\u8fc7\u8fd8\u662f\u5f88\u56f0\u96be\u2026\u2026\uff09 3.3 \u300c\u6ce1\u6cab\u300d \u00b6 \u5c0f\u65f6\u5019\u5bb6\u4eba\u548c\u8001\u5e08\u66fe\u7ecf\u56e0\u4e3a\u6211\u8868\u73b0\u5f97\u6709\u4e9b\u300c\u81ea\u95ed\u300d\u3001\u4e0d\u613f\u548c\u522b\u4eba\u4ea4\u5f80\u800c\u52aa\u529b\u9f13\u52b1\u6211\u4ea4\u670b\u53cb\uff1b\u5728\u6b64\u540e\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\u6211\u4e5f\u8ba4\u4e3a\u6211\u7684\u793e\u4ea4\u80fd\u529b\u7b97\u662f\u53ef\u4ee5\u8fc7\u5173\uff0c\u4f46\u4ed4\u7ec6\u60f3\u6765\u5927\u6982\u4e5f\u5e76\u975e\u5982\u6b64\u3002\u6682\u4e14\u4e0d\u8c08\u8fc7\u7a0b\uff0c\u4ec5\u4ece\u7ed3\u679c\u6765\u8bf4\uff0c\u6211\u6709\u65f6\u786e\u5b9e\u6c89\u6eba\u4e8e\u7f51\u7edc\u4e0a\u6240\u8c13\u300c\u793e\u4ea4\u300d\u5e26\u6765\u7684\u5feb\u611f\uff0c\u4f46\u90a3\u53ea\u662f \u770b\u4f3c \u81ea\u5df1\u5f88\u53d7\u6b22\u8fce\u5e26\u6765\u7684\u865a\u8363\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u88ab\u6559\u5bfc\u7684\u90a3\u6837\uff0c\u8fd9\u79cd\u865a\u8363\u7684\u6df1\u5904\u5b9e\u9645\u4e0a\u662f\u5bf9\u81ea\u5df1\u7684\u4e0d\u81ea\u4fe1\u3002\u6211\u4e3a\u4e86\u63a9\u76d6\u81ea\u5df1\u6df1\u5c42\u6b21\u793e\u4ea4\u7684\u532e\u4e4f\uff0c\u9009\u62e9\u4e86\u7528\u6ce1\u6cab\u5305\u56f4\u81ea\u5df1\uff0c\u4ece\u800c\u8499\u853d\u522b\u4eba\uff0c\u66f4\u591a\u7684\u662f\u8499\u853d\u81ea\u5df1\u3002\u4f46\u662f\u4e00\u65e6\u4eb2\u81ea\u62e8\u5f00\u8fd9\u4e9b\u6ce1\u6cab\uff0c\u624d\u53d1\u73b0\u91cc\u9762\u7a7a\u7a7a\u5982\u4e5f\u3002 \u540c\u65f6\uff0c\u8fd9\u4e9b\u6ce1\u6cab\u7684\u5b58\u5728\u4e5f\u4f1a\u8ba9\u522b\u4eba\u89c9\u5f97\uff0c\u65e2\u7136\u4e0d\u7f3a\u670b\u53cb\uff0c\u90a3\u4e48\u4e5f\u6ca1\u5fc5\u8981\u4e3b\u52a8\u9760\u8fd1\u4e86\u3002\u5927\u6982\u4e5f\u56e0\u4e3a\u8fd9\u79cd\u539f\u56e0\uff0c\u6211\u53ef\u80fd\u4e5f\u5931\u53bb\u4e86\u548c\u4e00\u4e9b\u4eba\u4ea4\u670b\u53cb\u7684\u673a\u4f1a\u3002\u6ce1\u6cab\u7684\u5b58\u5728\u662f\u4e00\u79cd\u9694\u79bb\uff0c\u5373\u4f7f\u5b83\u80fd\u5e26\u6765\u4e00\u70b9\u70b9\u6682\u65f6\u7684\u4fdd\u62a4\uff0c\u4f46\u662f\u6ce1\u6cab\u603b\u4f1a\u6709\u6d88\u6563\u7684\u90a3\u4e00\u5929\uff0c\u800c\u53ea\u6709\u6ce1\u6cab\u4e4b\u4e0b\u7684\u4e1c\u897f\uff0c\u624d\u7b97\u662f\u771f\u6b63\u62e5\u6709\u3002 3.4 \u81ea\u6211\u8bbe\u9650 \u00b6 \u6211\u4f3c\u4e4e\u7ecf\u5e38\u5b58\u5728\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u4ee5\u4e3a\u5bf9\u65b9\u6839\u672c\u4e0d\u60f3\u6216\u8005\u4e0d\u4f1a\u548c\u81ea\u5df1\u505a\u670b\u53cb\uff0c\u56e0\u800c\u5355\u65b9\u9762\u56de\u907f\u793e\u4ea4\uff1b\u800c\u5bf9\u65b9\u5b9e\u9645\u4e0a\u6839\u672c\u6ca1\u6709\u8fd9\u6837\u7684\u60f3\u6cd5\uff0c\u5374\u56e0\u4e3a\u6211\u4eec\u7684\u56de\u907f\u800c\u5728\u548c\u6211\u4eec\u5efa\u7acb\u793e\u4ea4\u5173\u7cfb\u7684\u5c1d\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u56e0\u6b64\u4e0d\u518d\u5c1d\u8bd5\u548c\u6211\u4eec\u5efa\u7acb\u5173\u7cfb\uff1b\u751a\u81f3\u8ba4\u4e3a\u6211\u4eec\u8ba8\u538c\u4ed6\u4eec\u7684\u4e00\u4e9b\u7279\u8d28\uff0c\u5bfc\u81f4\u6076\u6027\u5faa\u73af\u3002 \u6211\u81f3\u4eca\u4ecd\u7136\u5f88\u96be\u6539\u6b63\u8fd9\u79cd\u7531\u4e8e\u80e1\u601d\u4e71\u60f3\u6216\u8005\u62c5\u5fc3\u53d7\u632b\u4ece\u800c\u5c01\u95ed\u81ea\u5df1\u3001\u4e0d\u6562\u5c1d\u8bd5\u7684\u574f\u4e60\u60ef\uff0c\u65e0\u8bba\u662f\u5728\u793e\u4ea4\u8fd8\u662f\u5176\u4ed6\u65b9\u9762\u3002\u6211\u4e5f\u5728\u52aa\u529b\u63d0\u9192\u81ea\u5df1\u5c3d\u53ef\u80fd\u4e0d\u8981\u81ea\u6211\u8bbe\u9650\u2026\u2026\u4efb\u91cd\u800c\u9053\u8fdc)))) 3.5 \u65e0\u610f\u8bc6\u7684\u5192\u72af \u00b6 \u6211\u4eec\u53ef\u80fd\u5e76\u6ca1\u6709\u5224\u65ad\u81ea\u5df1\u7684\u67d0\u4e9b\u884c\u4e3a\u662f\u5426\u4f1a\u6253\u6270\u522b\u4eba\u7684\u610f\u8bc6\u6216\u80fd\u529b\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6709\u65f6\u65e0\u610f\u8bc6\u5730\u6253\u6270\u6216\u8005\u5192\u72af\u5230\u4e00\u4e9b\u4eba\u3002\u800c\u51fa\u4e8e\u793e\u4ea4\u793c\u4eea\uff0c\u6216\u8005\u56e0\u4e3a\u6839\u672c\u4e0d\u592a\u719f\uff0c\u53c8\u6216\u8005\u662f\u4e3a\u4e86\u907f\u514d\u51b2\u7a81\u548c\u8bef\u89e3\uff0c\u5176\u4ed6\u4eba\u4e5f\u8bb8\u5e76\u4e0d\u4f1a\u5411\u6211\u4eec\u53cd\u9988\u8fd9\u4e9b\u5192\u72af\u3002 \u6240\u4ee5\u5176\u5b9e\u5f88\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u544a\u8bc9\u6211\u6211\u4f1a\u5728\u54ea\u4e9b\u5730\u65b9\u8ba9\u4eba\u611f\u89c9\u4e0d\u9002 QWQ \u5982\u679c\u4e0d\u65b9\u4fbf\u76f4\u63a5\u8bf4\u7684\u8bdd\u5176\u5b9e\u4e5f\u6709\u5f88\u591a\u533f\u540d\u6e20\u9053\u7684\u2026\u2026\u6bd4\u5982 QQ \u7684\u533f\u540d\u95ee\u7b54\u4e4b\u7c7b\u7684 3.6 \u5927\u5bb6\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u7684\u9700\u6c42\u76f8\u5dee\u5f88\u5927 \u00b6 \u7cbe\u795e\u5c42\u9762\u7684\u793e\u4ea4\u5173\u7cfb\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\u662f\u521a\u9700\uff1b\u4f46\u5bf9\u4e8e\u53e6\u4e00\u4e9b\u4eba\uff0c\u5728\u5927\u591a\u6570\u65f6\u5019\u4e5f\u8bb8\u5e76\u4e0d\u592a\u91cd\u8981\u3002\u8fd9\u79cd\u5dee\u522b\u7684\u5b58\u5728\u4e5f\u8bb8\u4e5f\u4f1a\u662f\u5f88\u591a\u4eba\u4e4b\u95f4\u53d1\u5c55\u793e\u4ea4\u5173\u7cfb\u7684\u963b\u788d\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u5f15\u53d1\u5f7c\u6b64\u4e4b\u95f4\u7684\u8bef\u89e3\u3002 \uff08\u6211\u8fd8\u662f\u633a\u7fa1\u6155\u90a3\u4e9b\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u6ca1\u6709\u90a3\u4e48\u5927\u9700\u6c42\u7684\u4eba\u7684 \ud83d\udc49\ud83d\udc48 \u6211\u4f1a\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u5c1d\u8bd5\u7ef4\u6301\u3001\u53d1\u5c55\u793e\u4ea4\u5173\u7cfb\uff0c\u540c\u65f6\u4e5f\u7ecf\u5e38\u56e0\u4e3a\u4eb2\u5bc6\u5173\u7cfb\u5f71\u54cd\u5230\u81ea\u5df1\u7684\u5fc3\u60c5\u3002\u6211\u5c1d\u8bd5\u63a7\u5236\uff0c\u4f46\u662f\u63a7\u5236\u4e0d\u6765QAQ\uff09 4 \u5199\u4e2a\u7ed3\u5c3e \u00b6 \u4e0a\u9762\u804a\u7684\u90a3\u4e9b\u95ee\u9898\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u89e3\u51b3\u2026\u2026\u5982\u679c\u5927\u5bb6\u6709\u89e3\u51b3\u65b9\u6848\u6216\u8005\u5efa\u8bae\u7684\u8bdd\u8bf7\u52a1\u5fc5\u6d47\u6d47\u6211\uff09\uff09\uff09 \u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u80fd\u591f\u57f9\u517b\u51fa\u4e00\u4e2a\u300c\u53ef\u4f9d\u8d56\u300d\u7684\u5173\u7cfb\uff0c\u90a3\u4e2a\u95ee\u9898\u672c\u8eab\uff0c\u6211\u4e5f\u6ca1\u80fd\u7ed9\u51fa\u4ec0\u4e48\u80af\u5b9a\u7684\u7b54\u6848\uff08\u4f46\u662f\u597d\u50cf\u597d\u591a\u4eba\u4e5f\u6ca1\u6709 XD\uff09 \u6211\u5f88\u7f3a\u670b\u53cb\u7684\u2026\u2026\u6b22\u8fce\u627e\u6211\u73a9\u800d \ud83d\udc49\ud83d\udc48 \u6211\u7406\u60f3\u4e2d\u6700\u7f8e\u597d\u7684\u672a\u6765\uff0c\u9664\u4e86\u505a\u559c\u6b22\u7684\u4e8b\u3001\u6709\u57fa\u672c\u7684\u7269\u8d28\u54c1\u8d28\u548c\u8d5a\u94b1\u7684\u80fd\u529b\u4e4b\u5916\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6709\u4e00\u4e2a\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u7684\u4eba\u5728\u8eab\u8fb9\uff0c\u540c\u65f6\u9644\u8fd1\u4e5f\u6709\u5f88\u591a\u670b\u53cb\uff0c\u80fd\u5728\u95f2\u6687\u65f6\u95f4\u4e32\u4e32\u95e8\u3001\u505a\u505a\u996d\uff0c\u8c08\u5929\u8bf4\u5730\uff0c\u5076\u5c14\u4e00\u8d77\u51fa\u53bb\u73a9\u3002\u6211\u4e0d\u77e5\u9053\u8fd9\u6837\u7684\u672a\u6765\u6709\u591a\u5927\u53ef\u80fd\uff0c\u79bb\u6211\u53c8\u6709\u591a\u8fdc \u2014\u2014 \u7b97\u4e86\uff0c\u5c31\u5f53\u505a\u662f\u4e2a\u9065\u8fdc\u7684\u68a6\u5427QWQ","title":"\u5173\u4e8e\u4eb2\u5bc6\u5173\u7cfb\u7684\u788e\u788e\u5ff5"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#1-\u5bf9\u793e\u4ea4\u5173\u7cfb\u7684\u5206\u7ea7","text":"\u8ba8\u8bba\u8303\u56f4 \u4ee5\u4e0b\u5bf9\u4e8e\u793e\u4ea4\u5173\u7cfb\u548c\u4eb2\u5bc6\u5173\u7cfb\u7684\u8ba8\u8bba\uff0c\u5747\u4e0d\u5305\u542b\u8840\u4eb2\u4e4b\u7c7b\u5148\u5929\u81ea\u5e26\u7684\u5173\u7cfb\u3002\u56e0\u4e3a\u5728\u6211\u770b\u6765\uff0c\u8fd9\u4e9b\u4eba\u90fd\u5df2\u7ecf\u6210\u4e3a\u4e86\u6211\u7684\u4e16\u754c\u4e2d\u7684\u300c\u516c\u7406\u300d\uff0c\u662f\u6211\u7684\u4ef7\u503c\u89c2\u7684\u5f88\u5927\u4e00\u90e8\u5206\uff0c\u8fdb\u800c\u662f\u300c\u6211\u81ea\u5df1\u300d\u7684\u4e00\u90e8\u5206\u3002\u6211\u5e76\u4e0d\u5c1d\u8bd5\u53bb\u8bc4\u4ef7\u300c\u81ea\u5df1\u300d\u3002 \u6211\u4eec\u628a\u4e0a\u8ff0\u8ba8\u8bba\u8303\u56f4\u5185\u7684\u793e\u4ea4\u5bf9\u8c61\u7edf\u79f0\u4e3a\u300c\u719f\u4eba\u300d\u3002\u4ed6\u4eec\u5b58\u5728\u7684\u610f\u4e49\u53ef\u80fd\u5305\u62ec\uff1a \u57fa\u672c\u7684\u7269\u8d28\u6216\u8005\u53d1\u5c55\u4ef7\u503c\uff0c\u4f8b\u5982\u4e92\u76f8\u5e2e\u52a9\u3001\u63d0\u4f9b\u5efa\u8bae\u7b49\uff1b \u8fdb\u4e00\u6b65\u5730\uff0c\u80fd\u591f\u81ea\u53d1\u5408\u4f5c\u6216\u8005\u63a2\u8ba8\u5b66\u4e1a\u3001\u5de5\u4f5c\u76f8\u5173\u7684\u95ee\u9898\uff1b \u57fa\u672c\u7684\u7cbe\u795e\u4ef7\u503c\uff0c\u4f8b\u5982\u548c\u4ed6\u4eec\u4ea4\u5f80\u80fd\u591f\u6ee1\u8db3\u81ea\u5df1\u7684\u7cbe\u795e\u9700\u6c42\uff0c\u4f8b\u5982\u5206\u4eab\u6b32\u6216\u6210\u5c31\u611f\uff1b \u8fdb\u4e00\u6b65\u5730\uff0c\u80fd\u591f\u5c31\u4e00\u4e9b\u95ee\u9898\u4ea4\u6362\u60f3\u6cd5\uff0c\u8f83\u4e3a\u6df1\u5165\u5730\u8c08\u5fc3\u7b49\uff1b \u300c\u53ef\u4f9d\u8d56\u300d \u6211\u4f1a\u5728\u540e\u9762\u5206\u4eab\u6211\u5bf9\u300c\u53ef\u4f9d\u8d56\u300d\u7684\u5b9a\u4e49\uff0c\u90a3\u662f\u6211\u5bf9\u793e\u4ea4\u5173\u7cfb\u7684\u6700\u9ad8\u8ffd\u6c42\u3002","title":"1 \u5bf9\u793e\u4ea4\u5173\u7cfb\u7684\u5206\u7ea7"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#2-\u53ef\u4f9d\u8d56","text":"\u9996\u5148\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898\uff01 \u5982\u679c\uff0c\u5916\u661f\u4eba\u964d\u4e34\uff01\u5b83\u4eec \u6307\u5b9a \u4e86\u4e00\u4e2a\u6b63\u6574\u6570 \\(k\\) \uff0c\u8981\u6c42\u6211\u4eec\u6bcf\u4e00\u4e2a\u4eba\u9700\u8981\u5728 \u4e0d\u548c\u5176\u4ed6\u4eba\u6c9f\u901a \u7684\u60c5\u51b5\u4e0b\u9009\u5b9a\u5176\u4ed6 \\(k\\) \u4e2a\u4eba\uff0c\u4e0d\u5305\u542b\u8840\u4eb2\u3002\u5982\u679c\u4f60\u9009\u51fa\u7684\u8fd9 \\(k\\) \u4e2a\u4eba\u4e2d\u6709\u4efb\u4f55\u4e00\u4e2a\u4eba\u9009\u62e9\u4e86\u4f60\uff0c\u4f60\u5c31\u80fd\u6d3b\u4e0b\u6765\uff0c\u5426\u5219\u4f60\u5c31\u4f1a\u88ab\u5f04\u6b7b\ud83d\ude08\u3002 \u4f60\u7684\u9009\u62e9\u9700\u8981\u5c3d\u53ef\u80fd\u8ba9\u4f60\u6d3b\u4e0b\u6765 \uff0c\u8bf7\u95ee\uff1a \u5f53 \\(k = 1, 3, 5\\) \u7684\u65f6\u5019\uff0c\u4f60\u662f\u5426\u5206\u522b\u6709\u5bf9\u5e94\u7684\u4eba\u9009\uff1f \u5728 \\(k\\) \u4e0d\u5c0f\u4e8e\u591a\u5c11\u7684\u65f6\u5019\uff0c\u4f60\u6562\u7b03\u5b9a\u5730\u9009\u62e9\u67d0\u4e2a\u4eba\uff1f \u5728 \\(k\\) \u4e0d\u5145\u5206\u5927\u7684\u524d\u63d0\u4e0b\uff0c\u4f60\u6709\u591a\u5c11\u4eba\u9009\uff1f \u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u5728\u7406\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u679c\u67d0\u4e2a\u4eba\u4e0d\u4f1a\u9009\u4f60\uff0c\u90a3\u4e48\u4f60\u9009\u4ed6\u5c31\u6beb\u65e0\u610f\u4e49\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6562\u9009\u62e9\u67d0\u4e2a\u4eba\u7684\u524d\u63d0\u662f\uff1a \u5bf9\u65b9\u7684\u8a00\u884c\u8db3\u4ee5\u8ba9\u6211\u76f8\u4fe1\uff0c\u6211\u5728\u5bf9\u65b9\u7684\u5fc3\u91cc\u8db3\u591f\u91cd\u8981\uff1b \u6211\u786e\u4fe1 \u6211\u7684\u8a00\u884c\u8db3\u4ee5\u8ba9\u5bf9\u65b9\u76f8\u4fe1\uff0c\u5bf9\u65b9\u5728\u6211\u7684\u5fc3\u91cc\u8db3\u591f\u91cd\u8981\u3002 \u6211\u79f0\u8fd9\u6837\u7684\u5173\u7cfb\u4e3a\u300c \u53ef\u4f9d\u8d56 \u300d\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u826f\u6027\u7684\u4eb2\u5bc6\u5173\u7cfb\u9700\u8981\u8ba9\u53cc\u65b9\u90fd\u5bf9\u8fd9\u6bb5\u5173\u7cfb\u6709\u5145\u5206\u7684\u4fe1\u4efb\uff0c\u540c\u65f6\u4e5f\u90fd\u80fd\u591f\u5c06\u81ea\u5df1\u5bf9\u7ef4\u7cfb\u5173\u7cfb\u7684\u610f\u613f \u5448\u73b0 \u51fa\u6765\uff0c\u5e76\u786e\u4fdd\u5bf9\u65b9\u80fd\u591f\u611f\u53d7\u5230\u3002 \u56e0\u6b64\uff0c\u6211\u79f0\u4e00\u4e2a\u4eba\u4e3a \u300c \\(k\\) - \u53ef\u4f9d\u8d56 \u300d\u7684\uff0c\u5176\u4e2d \\(k\\) \u662f\u4f7f\u4f60\u6562\u4e8e\u7b03\u5b9a\u5730\u9009\u62e9\u8fd9\u4e2a\u4eba\u7684\u6700\u5c0f \\(k\\) \u3002 \u5bf9\u6211\u4e2a\u4eba\u800c\u8a00\uff0c \u6301\u7eed \u7684\u300c\u53ef\u4f9d\u8d56\u300d\u662f\u6211\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u7684\u6700\u9ad8\u671f\u5f85\uff1b\u800c \\(k\\) \u8d8a\u5c0f\uff0c\u6211\u5c31\u8ba4\u4e3a\u8fd9\u6bb5\u4eb2\u5bc6\u5173\u7cfb\u7684\u8d28\u91cf\u8d8a\u9ad8\u3002","title":"2 \u300c\u53ef\u4f9d\u8d56\u300d"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#21-\u604b\u7231\u5173\u7cfb","text":"\u604b\u7231\u5173\u7cfb\u662f\u9876\u7ea7\u4eb2\u5bc6\u5173\u7cfb\u7684\u4f53\u9a8c\u5361\u3002 \u9700\u8981\u7279\u522b\u8bf4\u660e\u7684\u662f\uff0c\u6211\u5e76\u6ca1\u6709\u628a\u604b\u7231\u5173\u7cfb\u6392\u9664\u5728\u4eb2\u5bc6\u5173\u7cfb\u4e4b\u5916 \u2014\u2014 \u4ece\u6211\u7684\u89d2\u5ea6\u800c\u8a00\uff0c\u604b\u7231\u5173\u7cfb\u662f\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u7684\u300c \u4f53\u9a8c\u5361 \u300d\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e24\u4e2a\u4eba\u7684\u5171\u540c\u7279\u8d28\u3001\u559c\u597d\u3001\u5171\u540c\u7ecf\u5386\u7b49\u7b49\u56e0\u7d20\u53ef\u80fd\u6682\u65f6\u8fbe\u4e0d\u5230 \\(k = 1\\) \u7684\u8981\u6c42\uff0c\u4f46\u662f\u604b\u7231\u5173\u7cfb\u4f5c\u4e3a\u4e00\u4e2a\u4e16\u4fd7\u7684\u9053\u5fb7\u7ea6\u675f\uff0c\u5b83\u672c\u8eab\u8981\u6c42\u6211\u4eec\uff08\u6216\u8005\uff0c\u8ba9\u6211\u4eec\u6709\u4fe1\u5fc3\uff09\u5728\u4e0a\u8ff0\u8ba8\u8bba\u4e2d\u4f18\u5148\u9009\u62e9\u81ea\u5df1\u7684\u5bf9\u8c61\u3002 \u800c\u5728\u6211\u770b\u6765\uff0c\u604b\u7231\u5173\u7cfb\u5728\u5f00\u59cb\u4e4b\u540e\u9700\u8981\u505a\u7684\uff0c\u5c31\u662f\u5728\u8fd9\u5f20\u300c\u4f53\u9a8c\u5361\u300d\u5230\u671f\u4e4b\u524d\uff0c\u53bb\u6c9f\u901a\u3001\u78e8\u5408\u3001\u5171\u4e8b\uff0c\u5171\u540c\u7ecf\u5386\u5e73\u5e38\u7684\u548c\u7279\u6b8a\u7684\u4e8b\u60c5\uff0c\u52a0\u6df1\u4e86\u89e3\u548c\u7f81\u7eca\uff0c\u4ece\u800c\u8865\u9f50 \\(k = 1\\) \u6240\u9700\u8981\u7684\u60c5\u611f\u57fa\u7840\u3002 \u4e5f\u6b63\u56e0\u5982\u6b64\uff0c\u56e0\u4e3a\u6211\u5bf9\u6027\u672c\u8eab\u6ca1\u4ec0\u4e48\u9700\u6c42\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6211\u800c\u8a00\uff0c\u5982\u679c\u6709\u80fd\u591f\u6301\u7eed\u7684\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u5173\u7cfb\u7684\u670b\u53cb\uff0c\u90a3\u604b\u7231\u5bf9\u4e8e\u6211\u6765\u8bf4\u4f3c\u4e4e\u5c31\u4e0d\u600e\u4e48\u91cd\u8981\u4e86\u3002\uff08\u4e0d\u8fc7\u611f\u89c9\u8fd9\u6bd4\u8c08\u4e00\u6bb5\u604b\u7231\u8fd8\u8981\u96be\u597d\u591a\ud83d\ude15\uff09\uff09\uff09\uff09","title":"2.1 \u604b\u7231\u5173\u7cfb"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#3-\u4e00\u4e9b\u95ee\u9898\u548c\u56f0\u5883","text":"Warning \u4e0b\u9762\u7684\u4e1c\u897f\u53ef\u80fd\u66f4\u7410\u788e\u548c\u6ca1\u6709\u903b\u8f91\u4e86\u2026\u2026","title":"3 \u4e00\u4e9b\u95ee\u9898\u548c\u56f0\u5883"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#31-\u5f00\u59cb\u800c\u4e0d\u53ea\u662f\u7ef4\u6301","text":"\u6211\u8ba4\u4e3a\u4e00\u5207\u793e\u4ea4\u5173\u7cfb\u7684\u5efa\u7acb\u548c\u7ef4\u6301\u9700\u8981 \u524d\u63d0\uff1a\u4e00\u4e2a\u8ba9\u4e24\u4e2a\u4eba\u8ba4\u8bc6\u7684\u7406\u7531 \u5efa\u7acb\uff1a a. \u4e92\u76f8\u5438\u5f15\uff0c\u6216\u8005 b. \u4e92\u76f8\u6709\u5efa\u7acb\u5173\u7cfb\u7684\u4ef7\u503c\uff0c\u6216\u8005 c. \u524d\u8ff0\u300c\u524d\u63d0\u300d\u7684\u957f\u671f\u6301\u7eed \u7ef4\u6301\uff1a a. \u4ecd\u7136\u5b58\u5728\u6ee1\u8db3\u524d\u8ff0\u300c\u5efa\u7acb\u300d\u8981\u6c42\u7684\u6761\u4ef6 b. \u57fa\u672c\u7684\u7ef4\u7cfb\u6d3b\u52a8 c. \u6ca1\u6709\u56e0\u4e3a\u8db3\u591f\u591a\u6216\u8005\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u793e\u4ea4\u5173\u7cfb\u5728\u81f3\u5c11\u4e00\u65b9\u770b\u6765\u4e0d\u503c\u5f97\u7ef4\u7cfb\u7684 \u56e0\u6b64\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0a\u5927\u5b66\u4ee5\u540e\u4f1a\u611f\u89c9\u670b\u53cb\u5c11\u4e86\u5462\uff1f\u5c31\u662f\u56e0\u4e3a\u7b2c 1 \u6761\u53d8\u5f97\u66f4\u52a0\u7a00\u6709\u4e86\u3002\u9ad8\u4e2d\u5927\u5bb6\u90fd\u5728\u4e00\u4e2a\u73ed\u91cc\u4e0a\u8bfe\uff0c\u4ea4\u6d41\u76f8\u5f53\u4e30\u5bcc\uff1b\u540c\u684c\u548c\u90e8\u5206\u597d\u53cb\u751a\u81f3\u53ef\u4ee5\u6ee1\u8db3\u7b2c 2 \u6761\u7684\u8981\u6c42 c\uff0c\u56e0\u800c\u4e0d\u9700\u8981\u6211\u4eec\u4e3b\u89c2\u52aa\u529b\u5c31\u80fd\u5efa\u7acb\u8d77\u793e\u4ea4\u5173\u7cfb\u3002 \u4e5f\u6b63\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5f88\u591a\u4eba\uff0c\u5c24\u5176\u662f\u5bf9\u793e\u4ea4\u5173\u7cfb\u7684 \u6570\u91cf \u9700\u6c42\u4e0d\u9ad8\u7684\u4eba\uff0c\u5728\u5927\u5b66\u4e4b\u524d\u5b8c\u5168\u6ca1\u6709\u4e3b\u89c2\u52aa\u529b\u5efa\u7acb\u793e\u4ea4\u5173\u7cfb\u7684\u7ecf\u9a8c\u548c\u610f\u8bc6\uff1b\u800c\u5230\u4e86\u5927\u5b66\uff0c\u5ba2\u89c2\u73af\u5883\u66ff\u6211\u4eec\u6ee1\u8db3\u7b2c 1 \u6761\u7684\u4f18\u52bf\u4e0d\u590d\u5b58\u5728\uff0c\u6211\u4eec\u81ea\u7136\u5c31\u5f88\u96be\u6709\u4ec0\u4e48\u65b0\u7684\u670b\u53cb\u4e86\u3002","title":"3.1 \u5f00\u59cb\uff0c\u800c\u4e0d\u53ea\u662f\u7ef4\u6301"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#32-\u5927\u591a\u6570\u7537\u5973\u751f\u793e\u4ea4\u7684\u4e0d\u540c\u70b9","text":"\u4e00\u4e2a\u89c2\u5bdf\uff0c\u4e0d\u77e5\u9053\u5bf9\u4e0d\u5bf9 \u2014\u2014 \u5927\u591a\u6570\u7537\u751f\u5f62\u6210\u5708\u5b50\u6216\u8005\u4e00\u8d77\u51fa\u6e38\u57fa\u672c\u90fd\u6709\u4e00\u4e2a\u660e\u786e\u7684\u4e3b\u9898\uff0c\u800c\u5973\u5b69\u5b50\u4eec\u53ef\u4ee5\u7eaf\u7cb9\u56e0\u4e3a\u300c\u5173\u7cfb\u597d\u300d\u5f62\u6210\u4e00\u4e2a\u5708\u5b50\uff0c\u540c\u65f6\u53ef\u4ee5\u6ca1\u6709\u4efb\u4f55\u9884\u8c0b\u6216\u8005\u76ee\u7684\u5730\u4e00\u540c\u51fa\u6e38\u3002 \u4f46\u5b9e\u9645\u4e0a\u5728\u6211\u770b\u6765\uff0c\u804a\u5929\u4e5f\u8bb8\u66f4\u80fd\u4fc3\u8fdb\u5f7c\u6b64\u4e4b\u95f4\u7684\u4e86\u89e3\uff0c\u8fdb\u4e00\u6b65\u589e\u8fdb\u5f7c\u6b64\u7684\u4fe1\u4efb\u611f\u3002\u8fd9\u4e5f\u662f\u6211\u8ba4\u4e3a\u5927\u591a\u6570\u5973\u5b69\u5b50\u5728\u7cbe\u795e\u5c42\u9762\u7684\u793e\u4ea4\u8d28\u91cf\u6bd4\u7537\u5b69\u5b50\u597d\u4e00\u4e9b\u7684\u539f\u56e0\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u6211\u4e5f\u4f1a\u5728\u6bcf\u4e2a\u5047\u671f\u5c3d\u53ef\u80fd\u548c\u5e0c\u671b\u7ef4\u6301\u5173\u7cfb\u7684\u8001\u670b\u53cb\u4e00\u8d77\u51fa\u6765\u538b\u9a6c\u8def\u3001\u804a\u5929 \u2014\u2014 \u6211\u5e0c\u671b\u5728\u4ea4\u5230\u65b0\u7684\u597d\u670b\u53cb\u8d8a\u6765\u8d8a\u96be\u7684\u60c5\u51b5\u4e0b\u5c3d\u53ef\u80fd\u7ef4\u62a4\u597d\u73b0\u6709\u7684\u5173\u7cfb\u3002\uff08\u4e0d\u8fc7\u8fd8\u662f\u5f88\u56f0\u96be\u2026\u2026\uff09","title":"3.2 \u5927\u591a\u6570\u7537\u5973\u751f\u793e\u4ea4\u7684\u4e0d\u540c\u70b9"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#33-\u6ce1\u6cab","text":"\u5c0f\u65f6\u5019\u5bb6\u4eba\u548c\u8001\u5e08\u66fe\u7ecf\u56e0\u4e3a\u6211\u8868\u73b0\u5f97\u6709\u4e9b\u300c\u81ea\u95ed\u300d\u3001\u4e0d\u613f\u548c\u522b\u4eba\u4ea4\u5f80\u800c\u52aa\u529b\u9f13\u52b1\u6211\u4ea4\u670b\u53cb\uff1b\u5728\u6b64\u540e\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\u6211\u4e5f\u8ba4\u4e3a\u6211\u7684\u793e\u4ea4\u80fd\u529b\u7b97\u662f\u53ef\u4ee5\u8fc7\u5173\uff0c\u4f46\u4ed4\u7ec6\u60f3\u6765\u5927\u6982\u4e5f\u5e76\u975e\u5982\u6b64\u3002\u6682\u4e14\u4e0d\u8c08\u8fc7\u7a0b\uff0c\u4ec5\u4ece\u7ed3\u679c\u6765\u8bf4\uff0c\u6211\u6709\u65f6\u786e\u5b9e\u6c89\u6eba\u4e8e\u7f51\u7edc\u4e0a\u6240\u8c13\u300c\u793e\u4ea4\u300d\u5e26\u6765\u7684\u5feb\u611f\uff0c\u4f46\u90a3\u53ea\u662f \u770b\u4f3c \u81ea\u5df1\u5f88\u53d7\u6b22\u8fce\u5e26\u6765\u7684\u865a\u8363\u3002\u4f46\u662f\u6b63\u5982\u6211\u4eec\u88ab\u6559\u5bfc\u7684\u90a3\u6837\uff0c\u8fd9\u79cd\u865a\u8363\u7684\u6df1\u5904\u5b9e\u9645\u4e0a\u662f\u5bf9\u81ea\u5df1\u7684\u4e0d\u81ea\u4fe1\u3002\u6211\u4e3a\u4e86\u63a9\u76d6\u81ea\u5df1\u6df1\u5c42\u6b21\u793e\u4ea4\u7684\u532e\u4e4f\uff0c\u9009\u62e9\u4e86\u7528\u6ce1\u6cab\u5305\u56f4\u81ea\u5df1\uff0c\u4ece\u800c\u8499\u853d\u522b\u4eba\uff0c\u66f4\u591a\u7684\u662f\u8499\u853d\u81ea\u5df1\u3002\u4f46\u662f\u4e00\u65e6\u4eb2\u81ea\u62e8\u5f00\u8fd9\u4e9b\u6ce1\u6cab\uff0c\u624d\u53d1\u73b0\u91cc\u9762\u7a7a\u7a7a\u5982\u4e5f\u3002 \u540c\u65f6\uff0c\u8fd9\u4e9b\u6ce1\u6cab\u7684\u5b58\u5728\u4e5f\u4f1a\u8ba9\u522b\u4eba\u89c9\u5f97\uff0c\u65e2\u7136\u4e0d\u7f3a\u670b\u53cb\uff0c\u90a3\u4e48\u4e5f\u6ca1\u5fc5\u8981\u4e3b\u52a8\u9760\u8fd1\u4e86\u3002\u5927\u6982\u4e5f\u56e0\u4e3a\u8fd9\u79cd\u539f\u56e0\uff0c\u6211\u53ef\u80fd\u4e5f\u5931\u53bb\u4e86\u548c\u4e00\u4e9b\u4eba\u4ea4\u670b\u53cb\u7684\u673a\u4f1a\u3002\u6ce1\u6cab\u7684\u5b58\u5728\u662f\u4e00\u79cd\u9694\u79bb\uff0c\u5373\u4f7f\u5b83\u80fd\u5e26\u6765\u4e00\u70b9\u70b9\u6682\u65f6\u7684\u4fdd\u62a4\uff0c\u4f46\u662f\u6ce1\u6cab\u603b\u4f1a\u6709\u6d88\u6563\u7684\u90a3\u4e00\u5929\uff0c\u800c\u53ea\u6709\u6ce1\u6cab\u4e4b\u4e0b\u7684\u4e1c\u897f\uff0c\u624d\u7b97\u662f\u771f\u6b63\u62e5\u6709\u3002","title":"3.3 \u300c\u6ce1\u6cab\u300d"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#34-\u81ea\u6211\u8bbe\u9650","text":"\u6211\u4f3c\u4e4e\u7ecf\u5e38\u5b58\u5728\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u4ee5\u4e3a\u5bf9\u65b9\u6839\u672c\u4e0d\u60f3\u6216\u8005\u4e0d\u4f1a\u548c\u81ea\u5df1\u505a\u670b\u53cb\uff0c\u56e0\u800c\u5355\u65b9\u9762\u56de\u907f\u793e\u4ea4\uff1b\u800c\u5bf9\u65b9\u5b9e\u9645\u4e0a\u6839\u672c\u6ca1\u6709\u8fd9\u6837\u7684\u60f3\u6cd5\uff0c\u5374\u56e0\u4e3a\u6211\u4eec\u7684\u56de\u907f\u800c\u5728\u548c\u6211\u4eec\u5efa\u7acb\u793e\u4ea4\u5173\u7cfb\u7684\u5c1d\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u56e0\u6b64\u4e0d\u518d\u5c1d\u8bd5\u548c\u6211\u4eec\u5efa\u7acb\u5173\u7cfb\uff1b\u751a\u81f3\u8ba4\u4e3a\u6211\u4eec\u8ba8\u538c\u4ed6\u4eec\u7684\u4e00\u4e9b\u7279\u8d28\uff0c\u5bfc\u81f4\u6076\u6027\u5faa\u73af\u3002 \u6211\u81f3\u4eca\u4ecd\u7136\u5f88\u96be\u6539\u6b63\u8fd9\u79cd\u7531\u4e8e\u80e1\u601d\u4e71\u60f3\u6216\u8005\u62c5\u5fc3\u53d7\u632b\u4ece\u800c\u5c01\u95ed\u81ea\u5df1\u3001\u4e0d\u6562\u5c1d\u8bd5\u7684\u574f\u4e60\u60ef\uff0c\u65e0\u8bba\u662f\u5728\u793e\u4ea4\u8fd8\u662f\u5176\u4ed6\u65b9\u9762\u3002\u6211\u4e5f\u5728\u52aa\u529b\u63d0\u9192\u81ea\u5df1\u5c3d\u53ef\u80fd\u4e0d\u8981\u81ea\u6211\u8bbe\u9650\u2026\u2026\u4efb\u91cd\u800c\u9053\u8fdc))))","title":"3.4 \u81ea\u6211\u8bbe\u9650"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#35-\u65e0\u610f\u8bc6\u7684\u5192\u72af","text":"\u6211\u4eec\u53ef\u80fd\u5e76\u6ca1\u6709\u5224\u65ad\u81ea\u5df1\u7684\u67d0\u4e9b\u884c\u4e3a\u662f\u5426\u4f1a\u6253\u6270\u522b\u4eba\u7684\u610f\u8bc6\u6216\u80fd\u529b\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6709\u65f6\u65e0\u610f\u8bc6\u5730\u6253\u6270\u6216\u8005\u5192\u72af\u5230\u4e00\u4e9b\u4eba\u3002\u800c\u51fa\u4e8e\u793e\u4ea4\u793c\u4eea\uff0c\u6216\u8005\u56e0\u4e3a\u6839\u672c\u4e0d\u592a\u719f\uff0c\u53c8\u6216\u8005\u662f\u4e3a\u4e86\u907f\u514d\u51b2\u7a81\u548c\u8bef\u89e3\uff0c\u5176\u4ed6\u4eba\u4e5f\u8bb8\u5e76\u4e0d\u4f1a\u5411\u6211\u4eec\u53cd\u9988\u8fd9\u4e9b\u5192\u72af\u3002 \u6240\u4ee5\u5176\u5b9e\u5f88\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u544a\u8bc9\u6211\u6211\u4f1a\u5728\u54ea\u4e9b\u5730\u65b9\u8ba9\u4eba\u611f\u89c9\u4e0d\u9002 QWQ \u5982\u679c\u4e0d\u65b9\u4fbf\u76f4\u63a5\u8bf4\u7684\u8bdd\u5176\u5b9e\u4e5f\u6709\u5f88\u591a\u533f\u540d\u6e20\u9053\u7684\u2026\u2026\u6bd4\u5982 QQ \u7684\u533f\u540d\u95ee\u7b54\u4e4b\u7c7b\u7684","title":"3.5 \u65e0\u610f\u8bc6\u7684\u5192\u72af"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#36-\u5927\u5bb6\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u7684\u9700\u6c42\u76f8\u5dee\u5f88\u5927","text":"\u7cbe\u795e\u5c42\u9762\u7684\u793e\u4ea4\u5173\u7cfb\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\u662f\u521a\u9700\uff1b\u4f46\u5bf9\u4e8e\u53e6\u4e00\u4e9b\u4eba\uff0c\u5728\u5927\u591a\u6570\u65f6\u5019\u4e5f\u8bb8\u5e76\u4e0d\u592a\u91cd\u8981\u3002\u8fd9\u79cd\u5dee\u522b\u7684\u5b58\u5728\u4e5f\u8bb8\u4e5f\u4f1a\u662f\u5f88\u591a\u4eba\u4e4b\u95f4\u53d1\u5c55\u793e\u4ea4\u5173\u7cfb\u7684\u963b\u788d\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u5f15\u53d1\u5f7c\u6b64\u4e4b\u95f4\u7684\u8bef\u89e3\u3002 \uff08\u6211\u8fd8\u662f\u633a\u7fa1\u6155\u90a3\u4e9b\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u6ca1\u6709\u90a3\u4e48\u5927\u9700\u6c42\u7684\u4eba\u7684 \ud83d\udc49\ud83d\udc48 \u6211\u4f1a\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u5c1d\u8bd5\u7ef4\u6301\u3001\u53d1\u5c55\u793e\u4ea4\u5173\u7cfb\uff0c\u540c\u65f6\u4e5f\u7ecf\u5e38\u56e0\u4e3a\u4eb2\u5bc6\u5173\u7cfb\u5f71\u54cd\u5230\u81ea\u5df1\u7684\u5fc3\u60c5\u3002\u6211\u5c1d\u8bd5\u63a7\u5236\uff0c\u4f46\u662f\u63a7\u5236\u4e0d\u6765QAQ\uff09","title":"3.6 \u5927\u5bb6\u5bf9\u4eb2\u5bc6\u5173\u7cfb\u7684\u9700\u6c42\u76f8\u5dee\u5f88\u5927"},{"location":"%E7%94%9F%E6%B4%BB/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/#4-\u5199\u4e2a\u7ed3\u5c3e","text":"\u4e0a\u9762\u804a\u7684\u90a3\u4e9b\u95ee\u9898\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u89e3\u51b3\u2026\u2026\u5982\u679c\u5927\u5bb6\u6709\u89e3\u51b3\u65b9\u6848\u6216\u8005\u5efa\u8bae\u7684\u8bdd\u8bf7\u52a1\u5fc5\u6d47\u6d47\u6211\uff09\uff09\uff09 \u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u80fd\u591f\u57f9\u517b\u51fa\u4e00\u4e2a\u300c\u53ef\u4f9d\u8d56\u300d\u7684\u5173\u7cfb\uff0c\u90a3\u4e2a\u95ee\u9898\u672c\u8eab\uff0c\u6211\u4e5f\u6ca1\u80fd\u7ed9\u51fa\u4ec0\u4e48\u80af\u5b9a\u7684\u7b54\u6848\uff08\u4f46\u662f\u597d\u50cf\u597d\u591a\u4eba\u4e5f\u6ca1\u6709 XD\uff09 \u6211\u5f88\u7f3a\u670b\u53cb\u7684\u2026\u2026\u6b22\u8fce\u627e\u6211\u73a9\u800d \ud83d\udc49\ud83d\udc48 \u6211\u7406\u60f3\u4e2d\u6700\u7f8e\u597d\u7684\u672a\u6765\uff0c\u9664\u4e86\u505a\u559c\u6b22\u7684\u4e8b\u3001\u6709\u57fa\u672c\u7684\u7269\u8d28\u54c1\u8d28\u548c\u8d5a\u94b1\u7684\u80fd\u529b\u4e4b\u5916\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6709\u4e00\u4e2a\u300c \\(1\\) - \u53ef\u4f9d\u8d56\u300d\u7684\u4eba\u5728\u8eab\u8fb9\uff0c\u540c\u65f6\u9644\u8fd1\u4e5f\u6709\u5f88\u591a\u670b\u53cb\uff0c\u80fd\u5728\u95f2\u6687\u65f6\u95f4\u4e32\u4e32\u95e8\u3001\u505a\u505a\u996d\uff0c\u8c08\u5929\u8bf4\u5730\uff0c\u5076\u5c14\u4e00\u8d77\u51fa\u53bb\u73a9\u3002\u6211\u4e0d\u77e5\u9053\u8fd9\u6837\u7684\u672a\u6765\u6709\u591a\u5927\u53ef\u80fd\uff0c\u79bb\u6211\u53c8\u6709\u591a\u8fdc \u2014\u2014 \u7b97\u4e86\uff0c\u5c31\u5f53\u505a\u662f\u4e2a\u9065\u8fdc\u7684\u68a6\u5427QWQ","title":"4 \u5199\u4e2a\u7ed3\u5c3e"},{"location":"%E7%94%9F%E6%B4%BB/%E5%92%B8%E9%B1%BC%E6%9A%84%E4%BB%8A%E5%A4%A9%E5%90%83%E4%BB%80%E4%B9%88/","text":"Abstract \u603b\u662f\u4e0d\u77e5\u9053\u5403\u4ec0\u4e48\u2026\u2026\u600e\u4e48\u529e\u5462","title":"\u54b8\u9c7c\u6684\u4eca\u5929\u5403\u4ec0\u4e48"},{"location":"%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","text":"Abstract \u5b66\u4e60\u7f16\u7a0b\u8bed\u8a00\u7684\u4e00\u4e9b\u8bb0\u5f55\uff1b\u5927\u591a\u6570\u6bd4\u8f83\u7c97\u7cd9","title":"\u8bed\u8a00\u57fa\u7840"}]}